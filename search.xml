<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Redis</title>
      <link href="/post/bae4ff13.html"/>
      <url>/post/bae4ff13.html</url>
      
        <content type="html"><![CDATA[<font size="3"><meta name="referrer" content="no-referrer"><h2 id="redis-简介"><a href="#Redis-简介" class="headerlink" title="Redis 简介"></a>Redis 简介</h2><p>Redis 是一个键值数据库，又叫 “NoSql”，其中没有表，没有约束，数据全部以键值对的形式存在</p><p>非结构化、无关联的、非 SQL、也无法完全满足ACID（原子性，隔离性，一致性，持久性）</p><br><h3 id="与传统数据库的区别"><a href="#与传统数据库的区别" class="headerlink" title="与传统数据库的区别"></a>与传统数据库的区别</h3><table><thead><tr><th></th><th>SQL</th><th>NoSql</th></tr></thead><tbody><tr><td>数据结构</td><td>结构化</td><td>非结构化</td></tr><tr><td>数据关联</td><td>关联的</td><td>无关联的</td></tr><tr><td>查询方式</td><td>SQL 查询</td><td>非 SQL</td></tr><tr><td>事务特性</td><td>ACID</td><td>BASE</td></tr><tr><td>存储方式</td><td>磁盘</td><td>内存</td></tr><tr><td>扩展性</td><td>垂直</td><td>水平</td></tr><tr><td>使用场景</td><td>1）数据结构固定<br>2）相关业务对数据安全性、一致性要求较高</td><td>1）数据结构不固定<br>2）对安全性、一致性要求不高<br>3）对性能要求高</td></tr></tbody></table><br><p>redis 的特征</p><ul><li>键值型，value 支持多种不同的数据类型，功能丰富</li><li>单线程，每个命令具备原子性</li><li>低延迟、速度快（基于内存，IO多路复用、良好的编码）</li><li>支持数据持久化</li><li>支持主从集群、分片集群</li></ul><br><h3 id="安装和启动"><a href="#安装和启动" class="headerlink" title="安装和启动"></a>安装和启动</h3><p>默认情况下 redis 是前台启动，我们需要修改相关的配置来完成后台启动</p><p>修改完 redis.conf 后即可启动 redis</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 进入redis 安装目录</span><br><span class="hljs-built_in">cd</span> /usr/local/src/redis-6.2.6<br><br><span class="hljs-comment"># 启动</span><br>redis-server redis.conf<br></code></pre></td></tr></table></figure><p><strong>停止服务</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 利用 redis-cli 来执行 shutdown 命令</span><br><span class="hljs-comment"># 由于之前设置了密码，因此需要通过 -u 来指定密码</span><br>redis-cli -u 123456 shutdown<br></code></pre></td></tr></table></figure><br><h4 id="设置开机自启"><a href="#设置开机自启" class="headerlink" title="设置开机自启"></a>设置开机自启</h4><p>（1）首先，新建一个系统服务文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">vi /etc/systemd/system/redis.service<br></code></pre></td></tr></table></figure><p>内容为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs conf">[Unit]<br>Description=redis-server<br>After=network.target<br><br>[Service]<br>Type=forking<br>ExecStart=/usr/local/bin/redis-server /usr/local/src/redis-6.2.6/redis.conf<br>PrivateTmp=true<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><br><p>（2）然后重载系统服务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl daemon-reload<br></code></pre></td></tr></table></figure><br><p>（3）接着就可以用下面这组命令来操作 redis 了：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 启动</span><br>systemctl start redis<br><span class="hljs-comment"># 停止</span><br>systemctl stop redis<br><span class="hljs-comment"># 重启</span><br>systemctl restart redis<br><span class="hljs-comment"># 查看状态</span><br>systemctl status redis<br></code></pre></td></tr></table></figure><br><p>执行下面的命令，可以让redis开机自启：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl <span class="hljs-built_in">enable</span> redis<br></code></pre></td></tr></table></figure><br><h3 id="key-的层级结构"><a href="#key-的层级结构" class="headerlink" title="key 的层级结构"></a>key 的层级结构</h3><p>我们可以通过给 key 添加前缀加以区分，不过这个前缀不是随便加的，有一定的规范：</p><p>Redis 的 key 允许有多个单词形成层级结构，多个单词之间用 : 隔开，这个格式并非固定，也可以根据自己的需求来删除或添加词条</p><br><p>例如我们的项目名称叫 firtree，有 user 和 product 两种不同类型的数据，我们可以这样定义 key：</p><ul><li><p>user 相关的 key：<code>firtree:user:1</code></p></li><li><p>product相关的key：<code>firtree:product:1</code></p></li></ul><p>如果 Value 是一个 Java 对象，例如一个 User 对象，则可以将对象序列化为 JSON 字符串后存储</p><table><thead><tr><th><strong>KEY</strong></th><th><strong>VALUE</strong></th></tr></thead><tbody><tr><td>firtree:user:1</td><td>{“id”:1, “name”: “Jack”, “age”: 21}</td></tr><tr><td>firtree:product:1</td><td>{“id”:1, “name”: “小米11”, “price”: 4999}</td></tr></tbody></table><p>一旦我们向 redis 采用这样的方式存储，那么在可视化界面中，redis 会以层级结构来进行存储，更加方便 Redis 获取数据</p><br><h2 id="redis-客户端"><a href="#Redis-客户端" class="headerlink" title="Redis 客户端"></a>Redis 客户端</h2><p>安装完成 Redis，我们就可以操作 Redis，实现数据的 CRUD 了</p><p>这需要用到Redis客户端，包括：</p><ul><li>命令行客户端</li><li>图形化桌面客户端</li><li>编程客户端</li></ul><br><h3 id="命令行客户端"><a href="#命令行客户端" class="headerlink" title="命令行客户端"></a>命令行客户端</h3><p>Redis 安装完成后就自带了命令行客户端：redis-cli，使用方式如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">redis-cli [options] [commonds]<br></code></pre></td></tr></table></figure><p>其中常见的 options 有：</p><ul><li><code>-h 127.0.0.1</code>：指定要连接的 redis 节点的 IP 地址，默认是 127.0.0.1</li><li><code>-p 6379</code>：指定要连接的 redis 节点的端口，默认是6379</li><li><code>-a 123456</code>：指定 redis 的访问密码</li></ul><p>其中的 commonds 就是 Redis 的操作命令，不指定时，会直接进入<code>redis-cli</code>的交互控制台</p><br><h3 id="图形化桌面客户端"><a href="#图形化桌面客户端" class="headerlink" title="图形化桌面客户端"></a>图形化桌面客户端</h3><p>使用 resp</p><br><h2 id="redis-常用命令"><a href="#Redis-常用命令" class="headerlink" title="Redis 常用命令"></a>Redis 常用命令</h2><h3 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h3><p>通用指令是部分数据类型的，都可以使用的指令，常见的有：</p><ul><li>KEYS：查看符合模板的所有 key</li><li>DEL：删除指定的 key，返回值为删除的 key 的数量</li><li>EXISTS：判断 key 是否存在，返回值为存在的 key 的数量</li><li>EXPIRE：给一个 key 设置有效期，有效期到期时该 key 会被自动删除</li><li>TTL：查看一个 kry 的剩余有效期，-1 代表永久有效，-2 代表已失效</li></ul><p>通过 help [command] 可以查看一个命令的具体用法，</p><blockquote><p>在生产环境下，不推荐使用 keys 命令，因为这个命令 在 key 过多的情况下，效率不高</p></blockquote><br><h3 id="string-命令"><a href="#String-命令" class="headerlink" title="String 命令"></a>String 命令</h3><p>String 类型，也就是字符串类型，是 Redis 中最简单的存储类型。其 value 是字符串，不过根据字符串的格式不同，又可以分为3类：</p><ul><li>string：普通字符串</li><li>int：整数类型，可以做自增、自减操作</li><li>float：浮点类型，可以做自增、自减操作</li></ul><br><p><strong>String 的常见命令有：</strong></p><ul><li>SET：添加或者修改已经存在的一个 String 类型的键值对</li><li>GET：根据 key 获取 String 类型的 value</li><li>MSET：批量添加多个 String 类型的键值对</li><li>MGET：根据多个 key 获取多个 String 类型的 value</li><li>INCR：让一个整型的 key 自增 1，返回值为增加后的值</li><li>INCRBY：让一个整型的 key 自增并指定步长，例如：incrby num 2 就是让 num 值自增2</li><li>INCRBYFLOAT：让一个浮点类型的数字自增并指定步长</li><li>SETNX：添加一个 String 类型的键值对，前提是这个 key 不存在，否则不执行</li><li>SETEX：添加一个 String 类型的键值对，并且指定有效期</li></ul><br><h3 id="hash-命令"><a href="#Hash-命令" class="headerlink" title="Hash 命令"></a>Hash 命令</h3><p>Hash 类型，也叫散列，其 value 是一个无序字典，类似于 Java 中的 HashMap 结构</p><p>String 结构是将对象序列化为 JSON 字符串后存储，当需要修改对象某个字段时很不方便<br>Hash 结构可以将对象中的每个字段独立存储，可以针对单个字段做 CRUD</p><br><p><strong>Hash类型的常见命令：</strong></p><ul><li>HSET key field value：添加或者修改 hash 类型 key 的 field 的值</li><li>HGET key field：获取一个 hash 类型 key 的 field 的值</li><li>HMSET：批量添加多个 hash 类型 key 的 field 的值</li><li>HMGET：批量获取多个 hash 类型 key 的 field 的值</li><li>HGETALL：获取一个hash类型的 key 中的所有的 field 和 value</li><li>HKEYS：获取一个 hash 类型的 key 中的所有的 field</li><li>HINCRBY：让一个 hash 类型 key 的字段值自增并指定步长</li><li>HSETNX：添加一个 hash 类型的 key 的 field 值，前提是这个 field 不存在，否则不执行</li></ul><br><h3 id="list-命令"><a href="#List-命令" class="headerlink" title="List 命令"></a>List 命令</h3><p>Redis 中的 List 类型与 Java 中的 LinkedList 类似，可以看做是一个双向链表结构。既可以支持正向检索和也可以支持反向检索，特征也与 LinkedList 类似</p><ul><li>有序</li><li>元素可以重复</li><li>插入和删除快</li><li>查询速度一般</li></ul><p>常用来存储一个有序数据，例如：朋友圈点赞列表，评论列表等</p><br><p><strong>List的常见命令有：</strong></p><ul><li>LPUSH key element … ：向列表左侧插入一个或多个元素</li><li>LPOP key：移除并返回列表左侧的第一个元素，没有则返回 nil</li><li>RPUSH key element … ：向列表右侧插入一个或多个元素</li><li>RPOP key：移除并返回列表右侧的第一个元素</li><li>LRANGE key star end：返回一段角标范围内的所有元素</li><li>BLPOP 和 BRPOP：与 LPOP 和 RPOP 类似，只不过在没有元素时等待指定时间，而不是直接返回 nil</li></ul><br><h3 id="set-命令"><a href="#Set-命令" class="headerlink" title="Set 命令"></a>Set 命令</h3><p>Redis 的 Set 结构与 Java 中的 HashSet 类似，可以看做是一个 value 为 null 的 HashMap。因为也是一个 hash 表，因此具备与 HashSet 类似的特征：</p><ul><li>无序</li><li>元素不可重复</li><li>查找快</li><li>支持交集、并集、差集等功能</li></ul><br><p><strong>Set类型的常见命令</strong></p><ul><li>SADD key member … ：向 set 中添加一个或多个元素</li><li>SREM key member … : 移除 set 中的指定元素</li><li>SCARD key： 返回 set 中元素的个数</li><li>SISMEMBER key member：判断一个元素是否存在于 set 中</li><li>SMEMBERS：获取 set 中的所有元素</li><li>SINTER key1 key2 … ：求 key1 与 key2 的交集</li><li>SDIFF key1 key2 … ：求 key1 与 key2 的差集</li><li>SUNION key1 key2 ..：求 key1 和 key2 的并集</li></ul><br><h3 id="sortedset-类型命令"><a href="#SortedSet-类型命令" class="headerlink" title="SortedSet 类型命令"></a>SortedSet 类型命令</h3><p>Redis 的 SortedSet 是一个可排序的 set 集合，与 Java 中的 TreeSet 有些类似，但底层数据结构却差别很大。SortedSet 中的每一个元素都带有一个 score 属性，可以基于 score 属性对元素排序，底层的实现是一个跳表（SkipList）加 hash 表</p><p>SortedSet 具备下列特性：</p><ul><li>可排序</li><li>元素不重复</li><li>查询速度快</li></ul><p>因为 SortedSet 的可排序特性，经常被用来实现排行榜这样的功能</p><br><p><strong>SortedSet的常见命令有：</strong></p><ul><li>ZADD key score member：添加一个或多个元素到 sorted set ，如果已经存在则更新其 score 值</li><li>ZREM key member：删除 sorted set 中的一个指定元素</li><li>ZSCORE key member : 获取 sorted set 中的指定元素的 score 值</li><li>ZRANK key member：获取 sorted set 中的指定元素的排名</li><li>ZCARD key：获取 sorted set 中的元素个数</li><li>ZCOUNT key min max：统计 score 值在给定范围内的所有元素的个数</li><li>ZINCRBY key increment member：让 sorted set 中的指定元素自增，步长为指定的 increment 值</li><li>ZRANGE key min max：按照 score 排序后，获取指定排名范围内的元素</li><li>ZRANGEBYSCORE key min max：按照 score 排序后，获取指定 score 范围内的元素</li><li>ZDIFF、ZINTER、ZUNION：求差集、交集、并集</li></ul><p>注意：所有的排名默认都是升序，如果要降序则在命令的 Z 后面添加 REV 即可，例如：</p><ul><li>升序获取 sorted set 中的指定元素的排名：ZRANK key member</li><li>降序获取 sorted set 中的指定元素的排名：ZREVRANK key memeber</li></ul><br><h2 id="redis-的-java-客户端"><a href="#Redis-的-Java-客户端" class="headerlink" title="Redis 的 Java 客户端"></a>Redis 的 Java 客户端</h2><p>推荐使用的 java 客户端，包括：</p><ul><li>Jedis 和 Lettuce：这两个主要是提供了 Redis 命令对应的 API，方便我们操作 Redis，而 SpringDataRedis 又对这两种做了抽象和封装，因此我们后期会直接以 SpringDataRedis 来学习</li><li>Redisson：是在 Redis 基础上实现了分布式的可伸缩的 java 数据结构，而且支持跨进程的同步机制，比较适合用来实现特殊的功能需求</li></ul><br><h3 id="jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h3><p>（1）创建工程，导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--jedis--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>redis.clients<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jedis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.7.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--单元测试--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.7.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><br><p>（2）建立连接 &amp;&amp; 测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JedisTest</span> &#123;<br>    <span class="hljs-keyword">private</span> Jedis jedis;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 建立连接</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@BeforeEach</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUp</span><span class="hljs-params">()</span> &#123;<br>        jedis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jedis</span>(<span class="hljs-string">&quot;192.168.102.100&quot;</span>, <span class="hljs-number">6379</span>);<br><br>        <span class="hljs-comment">// 设置密码</span><br>        jedis.auth(<span class="hljs-string">&quot;123456&quot;</span>);<br><br>        jedis.select(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testStr</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> jedis.set(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;shan&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;result = &quot;</span> + result);<br><br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> jedis.get(<span class="hljs-string">&quot;name&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;name = &quot;</span> + name);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 释放连接</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@AfterEach</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">tearDown</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (jedis != <span class="hljs-literal">null</span>) &#123;<br>            jedis.close();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><h4 id="创建jedis的连接池"><a href="#创建Jedis的连接池" class="headerlink" title="创建Jedis的连接池"></a>创建Jedis的连接池</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JedisConnectionFactory</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> JedisPool jedisPool;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-comment">// 配置连接池</span><br>        <span class="hljs-type">JedisPoolConfig</span> <span class="hljs-variable">poolConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisPoolConfig</span>();<br>        <span class="hljs-comment">// 最大连接数</span><br>        poolConfig.setMaxTotal(<span class="hljs-number">8</span>);<br>        <span class="hljs-comment">// 最大空闲连接</span><br>        poolConfig.setMaxIdle(<span class="hljs-number">8</span>);<br>        <span class="hljs-comment">// 最小空闲连接</span><br>        poolConfig.setMinIdle(<span class="hljs-number">0</span>);<br>        <span class="hljs-comment">// 等待时长</span><br>        poolConfig.setMaxWait(Duration.ofMillis(<span class="hljs-number">200</span>));<br><br>        <span class="hljs-comment">// 创建连接池对象</span><br>        jedisPool = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisPool</span>(poolConfig,<br>                <span class="hljs-string">&quot;192.168.150.101&quot;</span>,<span class="hljs-number">6379</span>,<span class="hljs-number">1000</span>,<span class="hljs-string">&quot;123321&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Jedis <span class="hljs-title function_">getJedis</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> jedisPool.getResource();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="springdataredis"><a href="#SpringDataRedis" class="headerlink" title="SpringDataRedis"></a>SpringDataRedis</h3><ul><li>提供了对不同 Redis 客户端的整合（Lettuce 和 Jedis）</li><li>提供了 RedisTemplate 统一 API 来操作 Redis</li><li>支持 Redis 的发布订阅模型</li><li>支持 Redis 哨兵和 Redis 集群</li><li>支持基于 Lettuce 的响应式编程</li><li>支持基于 JDK、JSON、字符串、Spring 对象的数据序列化及反序列化</li><li>支持基于 Redis 的 JDKCollection 实现</li></ul><p>SpringDataRedis 中提供了 RedisTemplate 工具类，其中封装了各种对 Redis 的操作。并且将不同数据类型的操作 API 封装到了不同的类型中</p><br><p>（1）创建工程，引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Redis依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--连接池依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-pool2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><br><p>（2）编写配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.150</span><span class="hljs-number">.101</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123321</span><br>    <span class="hljs-attr">lettuce:</span><br>      <span class="hljs-attr">pool:</span><br>        <span class="hljs-attr">max-active:</span> <span class="hljs-number">8</span>  <span class="hljs-comment">#最大连接</span><br>        <span class="hljs-attr">max-idle:</span> <span class="hljs-number">8</span>   <span class="hljs-comment">#最大空闲连接</span><br>        <span class="hljs-attr">min-idle:</span> <span class="hljs-number">0</span>   <span class="hljs-comment">#最小空闲连接</span><br>        <span class="hljs-attr">max-wait:</span> <span class="hljs-string">100ms</span> <span class="hljs-comment">#连接等待时间</span><br></code></pre></td></tr></table></figure><br><p>（3）运行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringDataRedisDemoApplicationTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testString</span><span class="hljs-params">()</span> &#123;<br>        redisTemplate.opsForValue().set(<span class="hljs-string">&quot;hobby&quot;</span>, <span class="hljs-string">&quot;play&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">hobby</span> <span class="hljs-operator">=</span> redisTemplate.opsForValue().get(<span class="hljs-string">&quot;hobby&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;hobby = &quot;</span> + hobby);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><h4 id="数据序列化器"><a href="#数据序列化器" class="headerlink" title="数据序列化器"></a>数据序列化器</h4><p>默认情况下 RedisTemplate 会把 Object 采用 JDK 序列化转为字节形式，得到的结果常常可读性差且占用内存较大</p><p>我们可以采用自定义 RedisTemplate 的序列化方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory redisConnectionFactory)</span> &#123;<br>        <span class="hljs-comment">// 创建 RedisTemplate 对象</span><br>        RedisTemplate&lt;String, Object&gt; template = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;&gt;();<br><br>        <span class="hljs-comment">// 设置连接工厂</span><br>        template.setConnectionFactory(redisConnectionFactory);<br><br>        <span class="hljs-comment">// 创建 JSON 的序列化工具</span><br>        <span class="hljs-type">GenericJackson2JsonRedisSerializer</span> <span class="hljs-variable">jsonRedisSerializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericJackson2JsonRedisSerializer</span>();<br><br>        <span class="hljs-comment">// 设置 key 的序列化</span><br>        template.setKeySerializer(RedisSerializer.string());<br>        template.setHashKeySerializer(RedisSerializer.string());<br><br>        <span class="hljs-comment">// 设置 value 的序列化</span><br>        template.setValueSerializer(jsonRedisSerializer);<br>        template.setHashValueSerializer(jsonRedisSerializer);<br><br>        <span class="hljs-comment">// 返回</span><br>        <span class="hljs-keyword">return</span> template;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>此处自定义的序列化中，key 必须为 Strng 类型，value 随意</p></blockquote><br><h4 id="stringredistemplate"><a href="#StringRedisTemplate" class="headerlink" title="StringRedisTemplate"></a>StringRedisTemplate</h4><p>为了在反序列化时知道对象的类型，JSON 序列化器会将类的 class 类型写入 json 结果中，存入 Redis，会带来额外的内存开销</p><p>为了减少内存的消耗，我们可以采用手动序列化的方式，换句话说，就是不借助默认的序列化器，而是我们自己来控制序列化的动作，同时，我们只采用 String 的序列化器，从而节约我们的内存空间</p><p>这种用法比较普遍，因此 SpringDataRedis 就提供了 RedisTemplate 的子类： StringRedisTemplate，它的 key 和 value 的序列化方式默认就是 String 方式</p><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisStringTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br><br>    <span class="hljs-comment">// 转 json 的工具</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSaveUser</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;xiao&quot;</span>, <span class="hljs-number">19</span>, <span class="hljs-string">&quot;男&quot;</span>);<br>        <span class="hljs-comment">// 手动序列化</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> mapper.writeValueAsString(user);<br><br>        stringRedisTemplate.opsForValue().set(<span class="hljs-string">&quot;xiao&quot;</span>, json);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">jsonUser</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(<span class="hljs-string">&quot;xiao&quot;</span>);<br>        <span class="hljs-comment">// 手动反序列化</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> mapper.readValue(jsonUser, User.class);<br>        System.out.println(<span class="hljs-string">&quot;xiao = &quot;</span> + result);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><h2 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h2><h3 id="基于pubsub的消息队列"><a href="#基于PubSub的消息队列" class="headerlink" title="基于PubSub的消息队列"></a>基于PubSub的消息队列</h3><p>PubSub（发布订阅）是 Redis2.0 版本引入的消息传递模型。顾名思义，消费者可以订阅一个或多个 channel，生产者向对应 channel 发送消息后，所有订阅者都能收到相关消息。</p><ul><li>SUBSCRIBE channel [channel] ：订阅一个或多个频道</li><li>PUBLISH channel msg ：向一个频道发送消息</li><li>PSUBSCRIBE pattern[pattern] ：订阅与pattern格式匹配的所有频道</li></ul><br><p>优点：</p><ul><li>采用发布订阅模型，支持多生产、多消费</li></ul><p>缺点：</p><ul><li>不支持数据持久化</li><li>无法避免消息丢失</li><li>消息堆积有上限，超出时数据丢失</li></ul><br><h3 id="基于stream的消息队列"><a href="#基于Stream的消息队列" class="headerlink" title="基于Stream的消息队列"></a>基于Stream的消息队列</h3><p>Stream 是 Redis 5.0 引入的一种新数据类型，可以实现一个功能非常完善的消息队列，支持数据的持久化</p><p>消息被读取后并不会被删除，而是永久性的存在</p><br><p>发送消息：xadd</p><p>比如：<code>xadd users * name jack age 20</code></p><p>users 表示 key，* 表示唯一id由redis自动生成，格式是“时间戳-递增数字”</p><br><p>获取消息队列中数据的个数：xlen key</p><br><p>读取消息：xread</p><p>（1）<code>xread count 1 streams users 0</code></p><p>从 users 中的第一个消息开始读取，每次读取一条消息</p><p>（2）读取时加上阻塞信息</p><p><code>xread count 1 block 0 streams users $</code></p><p>0 表示永久阻塞，$ 表示最新的消息</p><br><blockquote><p>注意：当我们指定起始ID为$时，代表读取最新的消息，如果我们处理一条消息的过程中，又有超过1条以上的消息到达队列，则下次获取时也只能获取到最新的一条，会出现漏读消息的问题</p></blockquote><p>STREAM 类型消息队列的XREAD命令特点：</p><ul><li>消息可回溯</li><li>一个消息可以被多个消费者读取</li><li>可以阻塞读取</li><li>有消息漏读的风险</li></ul><br><h3 id="消费者组"><a href="#消费者组" class="headerlink" title="消费者组"></a>消费者组</h3><p>消费者组（Consumer Group）：将多个消费者划分到一个组中，监听同一个队列。具备下列特点：</p><ol><li>消息分流：队列中的消息会分流给组内的不同消费者</li><li>消息标识：消费者组会维护一个标识，记录最后一个被处理的消息，哪怕消费者组宕机重启，也会从标识后读取消息</li><li>消息确认</li></ol><br><p>创建消费者组：</p><p><code>xgroup create key groupName ID [MKSTREAM]</code></p><p>key：队列名称</p><p>groupName：消费者组名称</p><p>ID：起始ID标示，$ 代表队列中最后一个消息，0 则代表队列中第一个消息</p><p>MKSTREAM：队列不存在时自动创建队列</p><br><h4 id="常见命令"><a href="#常见命令：" class="headerlink" title="常见命令："></a>常见命令：</h4><p> <strong>删除指定的消费者组</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">XGROUP DESTORY key groupName<br></code></pre></td></tr></table></figure><p> <strong>给指定的消费者组添加消费者</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">XGROUP CREATECONSUMER key groupname consumername<br></code></pre></td></tr></table></figure><p> <strong>删除消费者组中的指定消费者</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">XGROUP DELCONSUMER key groupname consumername<br></code></pre></td></tr></table></figure><p>从消费者组读取消息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">XREADGROUP GROUP group consumer [COUNT count] [BLOCK milliseconds] [NOACK] STREAMS key [key ...] ID [ID ...]<br></code></pre></td></tr></table></figure><ul><li>group：消费组名称</li><li>consumer：消费者名称，如果消费者不存在，会自动创建一个消费者</li><li>count：本次查询的最大数量</li><li>BLOCK milliseconds：当没有消息时最长等待时间</li><li>NOACK：无需手动 ACK，获取到消息后自动确认</li><li>STREAMS key：指定队列名称</li><li>ID：获取消息的起始ID<ul><li>“&gt;”：从下一个未消费的消息开始</li><li>其它：根据指定 id 从 pending-list 中获取已消费但未确认的消息</li><li>例如 0，是从 pending-list 中的第一个消息开始</li></ul></li></ul><br><p>将消息标记为已处理：xack key group ID</p><br><p>STREAM 类型消息队列的 XREAD GROUP 命令特点：</p><ul><li>消息可回溯</li><li>可以多消费者争抢消息，加快消费速度</li><li>可以阻塞读取</li><li>没有消息漏读的风险</li><li>有消息确认机制，保证消息至少被消费一次</li></ul><br><h2 id="geo数据结构"><a href="#GEO数据结构" class="headerlink" title="GEO数据结构"></a>GEO数据结构</h2><p>GEO 就是 Geolocation 的简写形式，代表地理坐标。Redis 在 3.2 版本中加入了对 GEO 的支持，允许存储地理坐标信息，帮助我们根据经纬度来检索数据。常见的命令有：</p><ul><li>GEOADD：添加一个地理空间信息，包含：经度（longitude）、纬度（latitude）、值（member）</li><li>GEODIST：计算指定的两个点之间的距离并返回</li><li>GEOHASH：将指定 member 的坐标转为 hash 字符串形式并返回</li><li>GEOPOS：返回指定 member 的坐标</li><li>GEORADIUS：指定圆心、半径，找到该圆内包含的所有 member，并按照与圆心之间的距离排序后返回。6.以后已废弃</li><li>GEOSEARCH：在指定范围内搜索 member，并按照与指定点之间的距离排序后返回。范围可以是圆形或矩形。6.2 新功能</li><li>GEOSEARCHSTORE：与 GEOSEARCH 功能一致，不过可以把结果存储到一个指定的 key。 6.2.新功能</li></ul><br><h2 id="bitmap"><a href="#BitMap" class="headerlink" title="BitMap"></a>BitMap</h2><p>Redis 中是利用 string 类型数据结构实现 BitMap，因此最大上限是 512M，转换为 bit 则是  2^32 个 bit 位</p><p>BitMap的操作命令有：</p><ul><li>SETBIT：向指定位置（offset）存入一个0或1</li><li>GETBIT ：获取指定位置（offset）的bit值</li><li>BITCOUNT ：统计 BitMap 中值为 1 的 bit 位的数量</li><li>BITFIELD ：操作（查询、修改、自增）BitMap 中 bit 数组中的指定位置（offset）的值</li><li>BITFIELD_RO ：获取 BitMap 中 bit 数组，并以十进制形式返回</li><li>BITOP ：将多个 BitMap 的结果做位运算（与 、或、异或）</li><li>BITPOS ：查找 bit 数组中指定范围内第一个 0 或 1 出现的位置</li></ul><br><h2 id="uv统计"><a href="#UV统计" class="headerlink" title="UV统计"></a>UV统计</h2><p>首先我们搞懂两个概念：</p><ul><li>UV：全称 Unique Visitor，也叫独立访客量，是指通过互联网访问、浏览这个网页的自然人。1 天内同一个用户多次访问该网站，只记录 1 次</li><li>PV：全称 Page View，也叫页面访问量或点击量，用户每访问网站的一个页面，记录 1 次 PV，用户多次打开页面，则记录多次 PV。往往用来衡量网站的流量</li></ul><p>通常来说 PV 会比 UV 大很多，衡量同一个网站的访问量，我们需要综合考虑很多因素，所以我们只是单纯的把这两个值作为一个参考值</p><p>UV 统计在服务端做会比较麻烦，因为要判断该用户是否已经统计过了，需要将统计过的用户信息保存。但是如果每个访问的用户都保存到 Redis 中，数据量会非常恐怖，那怎么处理呢？</p><p><strong>Hyperloglog(HLL)</strong> 是从 Loglog 算法派生的概率算法，用于确定非常大的集合的基数，而不需要存储其所有值<br>Redis 中的 HLL 是基于 string 结构实现的，单个 HLL 的内存 <strong>永远小于16kb</strong>，作为代价，其测量结果是概率性的，<strong>有小于0.81％的误差</strong>。不过对于 UV 统计来说，这完全可以忽略</p><br><p><strong>常见指令：</strong></p><ul><li>PFADD key element：添加元素</li><li>PFCOUNT key：统计指定 key 的元素个数</li><li>PFMERGE destkey sourcekey：将两个 key 合并</li></ul><br></font>]]></content>
      
      
      <categories>
          
          <category> Technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot3</title>
      <link href="/post/55656a4d.html"/>
      <url>/post/55656a4d.html</url>
      
        <content type="html"><![CDATA[<font size="2"><meta name="referrer" content="no-referrer"><p><strong>Spring Boot 特点：</strong></p><p>（1）简化整合</p><p>导入相关的场景，拥有相关的功能。场景启动器</p><p>默认支持的所有场景：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.build-systems.starters">https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.build-systems.starters</a></p><ul><li>官方提供的场景：命名为：<code>spring-boot-starter-*</code></li><li>第三方提供场景：命名为：<code>*-spring-boot-starter</code></li></ul><br><p>（2）简化开发</p><p>无需编写任何配置，直接开发业务</p><br><p>（3）简化配置</p><p><code>application.properties</code>：</p><ul><li>集中式管理配置。只需要修改这个文件就行 。</li><li>配置基本都有默认值</li><li>能写的所有配置都在： <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties">https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties</a></li></ul><br><p>（4）简化部署</p><p>打包为可执行的 jar 包。</p><p>linux 服务器上有 java 环境</p><br><p>（5）简化运维</p><p>修改配置（外部放一个 application.properties 文件）、监控、健康检查</p><br><p><strong>环境要求</strong></p><table><thead><tr><th>环境&amp;工具</th><th>版本（or later）</th></tr></thead><tbody><tr><td>SpringBoot</td><td>3.0.5+</td></tr><tr><td>IDEA</td><td>2021.2.1+</td></tr><tr><td>Java</td><td>17+</td></tr><tr><td>Maven</td><td>3.5+</td></tr><tr><td>Tomcat</td><td>10.0+</td></tr><tr><td>Servlet</td><td>5.0+</td></tr><tr><td>GraalVM Community</td><td>22.3+</td></tr><tr><td>Native Build Tools</td><td>0.9.19+</td></tr></tbody></table><br><h2 id="基础开发流程"><a href="#基础开发流程" class="headerlink" title="基础开发流程"></a>基础开发流程</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 所有springboot项目都必须继承自 spring-boot-starter-parent --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h3 id="导入场景"><a href="#导入场景" class="headerlink" title="导入场景"></a>导入场景</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- web开发的场景启动器 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h3 id="编写主程序"><a href="#编写主程序" class="headerlink" title="编写主程序"></a>编写主程序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span> <span class="hljs-comment">//这是一个SpringBoot应用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(MainApplication.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>Spring Boot 只扫描主程序所在的包和他的子包</p></blockquote><br><h3 id="业务"><a href="#业务" class="headerlink" title="业务"></a>业务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello,Spring Boot 3!&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- SpringBoot应用打包插件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h3 id="spring-initializr-创建向导"><a href="#Spring-Initializr-创建向导" class="headerlink" title="Spring Initializr 创建向导"></a>Spring Initializr 创建向导</h3><p>一键创建好整个项目结构</p><br><h2 id="应用分析"><a href="#应用分析" class="headerlink" title="应用分析"></a>应用分析</h2><h3 id="依赖管理机制"><a href="#依赖管理机制" class="headerlink" title="依赖管理机制"></a>依赖管理机制</h3><p>（1）为什么导入 <code>starter-web</code> 所有相关依赖都导入进来？</p><ul><li>导入场景启动器。 场景启动器自动把这个场景的所有核心依赖全部导入进来</li></ul><ul><li>开发什么场景，导入什么场景启动器</li><li>maven 依赖传递原则</li></ul><br><p>（2）为什么版本号都不用写？</p><ul><li>每个 boot 项目都有一个父项目<code>spring-boot-starter-parent</code></li><li>parent 的父项目是<code>spring-boot-dependencies</code></li><li>父项目的版本仲裁中心，把所有常见的 jar 的依赖版本都声明好了</li></ul><br><p>（3）利用 maven 的就近原则，自定义版本号</p><ul><li><p>直接在导入依赖的时候声明版本</p></li><li><p>直接在当前项目 <code>properties</code> 标签中声明父项目用的版本属性的 key</p></li></ul><br><p>（4）boot 父项目没有管理的需要自行声明好</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h3 id="自动装配机制"><a href="#自动装配机制" class="headerlink" title="自动装配机制"></a>自动装配机制</h3><p>（1）默认的包扫描规则</p><ul><li><code>@SpringBootApplication</code> 标注的类就是主程序类</li><li>Spring Boot 只会扫描主程序所在的包及其下面的子包，自动的 component-scan 功能</li><li>自定义扫描路径<ul><li><code>@SpringBootApplication(scanBasePackages = &quot;xxx&quot;)</code></li><li><code>@ComponentScan(&quot;xxx&quot;)</code> 直接指定扫描的路径</li></ul></li></ul><br><p>（2）配置默认值</p><ul><li>配置文件的所有配置项是和某个类的对象值进行一一绑定的</li><li>绑定了配置文件中每一项值的类： 属性类</li></ul><br><p>（3）按需加载自动配置</p><ul><li>导入场景 <code>spring-boot-starter-web</code></li><li>场景启动器除了会导入相关功能依赖，会导入一个 <code>spring-boot-starter</code>，是所有 starter 的 starter</li><li><code>spring-boot-starter</code> 导入了一个包 <code>spring-boot-autoconfigure</code>，包里面都是各种场景的 AutoConfiguration 自动配置类</li><li>虽然然全场景的自动配置都在 <code>spring-boot-autoconfigure</code> 这个包，但是不是全都开启的</li><li>导入哪个场景就开启哪个自动配置</li></ul><br><h3 id="完整流程"><a href="#完整流程" class="headerlink" title="完整流程"></a>完整流程</h3><p>（1）导入 <code>starter-web</code>：导入了 web 开发场景</p><ul><li>场景启动器导入了相关场景的所有依赖：starter-json、starter-tomcat、springmvc</li><li>每个场景启动器都引入了一个 <code>spring-boot-starter</code>，核心场景启动器</li><li>核心场景启动器引入了 <code>spring-boot-autoconfigure</code> 包，里面囊括了所有场景的所有配置</li><li>只要这个包下的所有类都能生效，那么相当于 Spring Boot 官方写好的整合功能就生效了</li><li>Spring Boot 默认却扫描不到 <code>spring-boot-autoconfigure</code> 下写好的所有配置类，默认只扫描主程序所在的包，（这些配置类给我们做了整合操作）</li></ul><br><p>（2）主程序：<code>@SpringBootApplication</code></p><ul><li><code>@SpringBootApplication</code> 由三个注解组成 <code>@SpringBootConfiguration</code>、<code>@EnableAutoConfiguratio</code>、<code>@ComponentScan</code></li><li>Spring Boot 默认只能扫描自己主程序所在的包及其下面的子包，扫描不到 <code>spring-boot-autoconfigure</code> 包中官方写好的配置类</li><li><code>@EnableAutoConfiguration</code>：SpringBoot 开启自动配置的核心<ul><li>是由 <code>@Import(AutoConfigurationImportSelector.class)</code> 提供功能：批量给容器中导入组件</li><li>Spring Boot 启动会默认加载 142个配置类</li><li>这 142 个配置类来自于 <code>spring-boot-autoconfigure</code> 下 <code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>文件指定的</li><li>项目启动的时候利用 @Import 批量导入组件机制把 <code>autoconfigure</code> 包下的 142  <code>xxxxAutoConfiguration</code> 类导入进来（自动配置类）</li><li>虽然导入了 142 个自动配置类</li></ul></li><li>按需生效：<ul><li>并不是这 142 个自动配置类都能生效</li><li>每一个自动配置类，都有条件注解 <code>@ConditionalOnxxx</code>，只有条件成立，才能生效</li></ul></li></ul><br><p>（3）xxxxAutoConfiguration自动配置类</p><ul><li>给容器中使用 @Bean 放一堆组件</li><li>每个自动配置类都可能有这个注解 <code>@EnableConfigurationProperties(ServerProperties.class)</code>，用来把配置文件中配的指定前缀的属性值封装到 <code>xxxProperties</code> 属性类中</li><li>给容器中放的所有组件的一些核心参数，都来自于 <code>xxxProperties</code>。<code>xxxProperties</code> 都是和配置文件绑定</li><li>只需要改配置文件的值，核心组件的底层参数都能修改</li></ul><p>（4）写业务，全程无需关心各种整合（底层这些整合写好了，而且也生效了）</p><br><p><strong>核心流程总结：</strong></p><ol><li>导入starter，就会导入 autoconfigure 包</li><li>autoconfigure 包里面 有一个文件 <code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>，里面指定的所有启动要加载的自动配置类</li><li><code>@EnableAutoConfiguration</code> 会自动的把上面文件里面写的所有自动配置类都导入进来</li><li><code>xxxAutoConfiguration</code> 是有条件注解进行按需加载</li><li><code>xxxAutoConfiguration</code> 给容器中导入一堆组件，组件都是从 <code>xxxProperties</code> 中提取属性值，<code>xxxProperties</code> 和配置文件进行了绑定</li></ol><blockquote><p>效果：导入starter、修改配置文件，就能修改底层行为</p></blockquote><br><h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><h3 id="组件注册"><a href="#组件注册" class="headerlink" title="组件注册"></a>组件注册</h3><ol><li>@Configuration 编写一个配置类</li><li>在配置类中，自定义方法给容器中注册组件，配合 @Bean</li><li>或使用 @Import 导入第三方的组件</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span> <span class="hljs-comment">// 标记这是一个配置类，替代以前的配置文件</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span> <span class="hljs-comment">// 替代以前的bean标签</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">user</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setId(<span class="hljs-number">1</span>);<br>        user.setName(<span class="hljs-string">&quot;张三&quot;</span>);<br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>组件有一些默认的配置：</p><p>是单实例的，可以通过 @scope(“prototype”) 注解修改为多例</p><p>组件在容器中的 id 默认就是方法名，可以通过 @Bean(“xxx”) 注释指定</p></blockquote><br><h3 id="条件注释"><a href="#条件注释" class="headerlink" title="条件注释"></a>条件注释</h3><p>如果注解指定的<strong>条件成立</strong>，则触发指定行为</p><p>@ConditionalOnXxx</p><p>@ConditionalOnClass：如果类路径中存在这个类，则触发指定行为</p><p>@ConditionalOnMissingClass：如果类路径中不存在这个类，则触发指定行为</p><p>@ConditionalOnBean：如果容器中存在这个 Bean（组件），则触发指定行为</p><p>@ConditionalOnMissingBean：如果容器中不存在这个 Bean（组件），则触发指定行为</p><br><p>@ConditionalOnBean（value&#x3D;组件类型，name&#x3D;组件名字）：判断容器中是否有这个类型的组件，并且名字是指定的值</p><br><h3 id="属性绑定"><a href="#属性绑定" class="headerlink" title="属性绑定"></a>属性绑定</h3><p>（1）@ConfigurationProperties： 声明组件的属性和配置文件哪些前缀开始项进行绑定</p><blockquote><p>将容器中任意组件（Bean）的属性值和配置文件的配置项的值进行绑定</p><ol><li>给容器中注册组件（@Component、@Bean）</li><li>使用 @ConfigurationProperties 声明组件和配置文件的哪些配置项进行绑定</li></ol></blockquote><br><p>（2）@EnableConfigurationProperties：快速注册注解</p><p>● 场景：Spring Boot 默认只扫描自己主程序所在的包</p><p>如果导入第三方包，即使组件上标注了 @Component、@ConfigurationProperties 注解，也没用</p><p>因为组件都扫描不进来，此时使用这个注解就可以<strong>快速进行属性绑定并把组件注册进容器</strong></p><br><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><h3 id="lombok"><a href="#lombok" class="headerlink" title="lombok"></a>lombok</h3><blockquote><p>简化 Java Bean 开发。自动生成构造器、getter &#x2F; setter、自动生成 Builder 模式等</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--lombok--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>@Data</code> 自动生成 javabean 属性的 getter&#x2F;setter 方法</li><li><code>@NoArgsConstructor</code> 自动生成无参构造器</li><li><code>@AllArgsConstructor </code>自动生成全参构造器</li></ul><br><h3 id="yaml配置文件"><a href="#YAML配置文件" class="headerlink" title="YAML配置文件"></a>YAML配置文件</h3><p>YAML 的特点：</p><ul><li>设计目标，就是方便人类读写</li></ul><ul><li>层次分明，更适合做配置文件</li><li>使用<code>.yaml</code>或 <code>.yml</code>作为文件后缀</li></ul><br><p><strong>基本语法</strong></p><ul><li>大小写敏感</li><li>使用缩进表示层级关系，k: v，使用空格分割</li><li>缩进时不允许使用Tab键，只允许使用空格、换行</li><li>缩进的空格数目不重要，只要相同层级的元素左侧对齐即可</li><li>#表示注释，从这个字符一直到行尾，都会被解析器忽略</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">data:</span><br>    <span class="hljs-attr">redis:</span><br>      <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br></code></pre></td></tr></table></figure><br><p><strong>支持的写法：</strong></p><ul><li>对象：键值对的集合，如：映射（map）&#x2F; 哈希（hash） &#x2F; 字典（dictionary）</li><li>数组：一组按次序排列的值，如：序列（sequence） &#x2F; 列表（list）</li><li>纯量：单个的、不可再分的值，如：字符串、数字、bool、日期</li></ul><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># List&lt;Dog&gt; dogs</span><br><span class="hljs-attr">dogs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">小黑</span><br>    <span class="hljs-attr">age:</span> <span class="hljs-number">3</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">小白</span><br>    <span class="hljs-attr">age:</span> <span class="hljs-number">2</span><br><br><span class="hljs-comment"># Map&lt;String, Cat&gt; cats</span><br><span class="hljs-attr">cats:</span><br>  <span class="hljs-attr">c1:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">小蓝</span><br>    <span class="hljs-attr">age:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">c2:</span> &#123;<span class="hljs-attr">name:</span> <span class="hljs-string">小绿</span>, <span class="hljs-attr">age:</span> <span class="hljs-number">2</span>&#125; <span class="hljs-comment"># 对象也可用&#123;&#125;表示</span><br></code></pre></td></tr></table></figure><br><p><strong>PS：</strong></p><ul><li><p>birthDay 推荐写为 birth-day</p></li><li><p>文本：</p></li><li><ul><li>单引号不会转义【\n 则为普通字符串显示】<ul><li>双引号会转义【\n会显示为换行符】</li></ul></li></ul></li><li><p>大文本</p></li><li><ul><li><code>|</code>开头，大文本写在下层，保留文本格式，换行符正确显示<ul><li><code>&gt;</code>开头，大文本写在下层，折叠换行符</li></ul></li></ul></li><li><p><strong>多文档合并</strong></p></li><li><ul><li>使用<code>---</code>可以把多个 yaml 文档合并在一个文档中，每个文档区依然认为内容独立</li></ul></li></ul><br><h3 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a>日志配置</h3><blockquote><p>规范：项目开发不要编写<code>System.out.println()</code>，应该用<strong>日志</strong>记录信息</p></blockquote><ul><li>Spring 使用 commons-logging 作为内部日志，但底层日志实现是开放的。可对接其他日志框架</li><li>支持 jul，log4j2，logback。SpringBoot 提供了默认的控制台输出配置，也可以配置输出为文件</li><li>logback 是默认使用的</li><li>虽然日志框架很多，但使用 SpringBoot 的默认配置就能工作的很好</li></ul><br><p><strong>Spring Boot 怎么把日志默认配置好的</strong></p><p>1、每个<code>starter</code>场景，都会导入一个核心场景<code>spring-boot-starter</code></p><p>2、核心场景引入了日志的所用功能<code>spring-boot-starter-logging</code></p><p>3、默认使用了<code>logback + slf4j</code> 组合作为默认底层日志</p><p>4、日志是系统一启动就要用，<code>xxxAutoConfiguration</code>是系统启动好了以后放好的组件，后来用的</p><p>5、日志是利用监听器机制配置好的。<code>ApplicationListener</code></p><p>6、日志所有的配置都可以通过修改配置文件实现。以<code>logging</code>开始的所有配置</p><br><h4 id="日志格式"><a href="#日志格式" class="headerlink" title="日志格式"></a>日志格式</h4><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tex">2023-03-31T13:56:17.511+08:00  INFO 4944 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]<br>2023-03-31T13:56:17.511+08:00  INFO 4944 --- [           main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.7]<br></code></pre></td></tr></table></figure><p>默认输出格式：</p><ul><li>时间和日期：毫秒级精度</li><li>日志级别：ERROR、WARN、INFO、DEBUG、TRACE</li><li>进程 ID</li><li>—： 消息分割符</li><li>线程名： 使用 []  包含</li><li>Logger 名： 通常是产生日志的类名</li><li>消息： 日志记录的内容</li></ul><blockquote><p>注意：</p><p>logback 没有FATAL级别，对应的是ERROR</p><p>可以通过配置文件的 <code>logging.pattern.console</code> 属性进行修改</p></blockquote><br><h4 id="记录日志"><a href="#记录日志" class="headerlink" title="记录日志"></a>记录日志</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(getClass());<br>        logger.info(<span class="hljs-string">&quot;hahahahah!!&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>或者可以直接使用 Lombok 的 @Slf4j 注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>        log.info(<span class="hljs-string">&quot;hahahahah!!&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><h4 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h4><p>只会打印指定级别及以上级别的日志，由低到高：<code>ALL,TRACE, DEBUG, INFO, WARN, ERROR,FATAL,OFF</code>；</p><ul><li><p>ALL：打印所有日志</p></li><li><p>TRACE：追踪框架详细流程日志，一般不使用</p></li><li><p>DEBUG：开发调试细节日志</p></li><li><p>INFO：关键、感兴趣信息日志</p></li><li><p>WARN：警告但不是错误的信息日志，比如：版本过时</p></li><li><p>ERROR：业务错误日志，比如出现各种异常</p></li><li><p>FATAL：致命错误日志，比如 jvm 系统崩溃</p></li><li><p>OFF：关闭所有日志记录</p></li><li><p>不指定级别的所有类，都使用 root 指定的级别作为默认级别</p></li></ul><p><strong>Spring Boot日志默认级别是 INFO</strong></p><br><p>在 <code>application.properties/yaml</code> 中配置 <code>logging.level.&lt;logger-name&gt;=&lt;level&gt;</code>指定日志级别</p><ul><li><p><logger-name> 一般写作全类名</logger-name></p></li><li><p>level 可取值范围：<code>TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF</code>，定义在 <code>LogLevel</code>类中</p></li></ul><p>root 的 <code>logger-name</code> 叫 root，可以配置 <code>logging.level.root=warn</code>，代表所有未指定日志级别都使用 root 的 warn 级别</p><br><p><strong>log中的数据支持占位符，也可以直接拼接哈</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>, b = <span class="hljs-number">200</span>;<br>log.info(<span class="hljs-string">&quot;参数a: &quot;</span> + a);<br>log.info(<span class="hljs-string">&quot;参数b: &#123;&#125;&quot;</span>, b);<br></code></pre></td></tr></table></figure><br><h4 id="日志分组"><a href="#日志分组" class="headerlink" title="日志分组"></a>日志分组</h4><p>将相关的 logger 分组在一起，统一配置。Spring Boot 也支持</p><p>比如：Tomcat 相关的日志统一设置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">logging.group.tomcat</span>=<span class="hljs-string">org.apache.catalina, org.apache.coyote, org.apache.tomcat</span><br><span class="hljs-attr">logging.level.tomcat</span>=<span class="hljs-string">trace</span><br></code></pre></td></tr></table></figure><br><p>Spring Boot 预定义两个组</p><table><thead><tr><th>Name</th><th>Loggers</th></tr></thead><tbody><tr><td>web</td><td>org.springframework.core.codec, <br>org.springframework.http, <br>org.springframework.web, <br>org.springframework.boot.actuate.endpoint.web, <br>org.springframework.boot.web.servlet.ServletContextInitializerBeans</td></tr><tr><td>sql</td><td>org.springframework.jdbc.core, <br>org.hibernate.SQL, <br>org.jooq.tools.LoggerListener</td></tr></tbody></table><br><h4 id="文件输出"><a href="#文件输出" class="headerlink" title="文件输出"></a>文件输出</h4><p>记录在文件中时，同时也会在控制台输出</p><p>Spring Boot 默认只把日志写在控制台，如果想额外记录到文件，可以在 <code>application.properties</code> 中添加 <code>logging.file.name</code> or <code>logging.file.path</code> 配置项</p><table><thead><tr><th>logging.file.name</th><th>logging.file.path</th><th></th></tr></thead><tbody><tr><td>指定</td><td>不指定</td><td>生成到当前项目同位置，文件名为指定内容</td></tr><tr><td>不指定</td><td>指定</td><td>生成到指定位置，文件名为 spring.log</td></tr><tr><td>指定</td><td>指定</td><td>生成指定位置的指定文件</td></tr></tbody></table><br><h4 id="文件归档与滚动切割"><a href="#文件归档与滚动切割" class="headerlink" title="文件归档与滚动切割"></a>文件归档与滚动切割</h4><blockquote><p>归档：每天的日志单独存到一个文档中</p><p>切割：每个文件10MB，超过大小切割成另外一个文件</p></blockquote><ul><li><p>每天的日志应该独立分割出来存档。如果使用 logback，可以通过 <code>application.properties/yaml</code> 文件指定日志滚动规则</p></li><li><p>如果是其他日志系统，需要自行配置（添加 log4j2.xml 或 log4j2-spring.xml）</p></li><li><p>支持的滚动规则设置如下</p></li></ul><table><thead><tr><th>配置项</th><th>描述</th></tr></thead><tbody><tr><td><code>logging.logback.rollingpolicy.file-name-pattern</code></td><td>日志存档的文件名格式<br>（默认值：${LOG_FILE}.%d{yyyy-MM-dd}.%i.gz）</td></tr><tr><td><code>logging.logback.rollingpolicy.clean-history-on-start</code></td><td>应用启动时是否清除以前存档，默认值：false</td></tr><tr><td><code>logging.logback.rollingpolicy.max-file-size</code></td><td>存档前，每个日志文件的最大大小，默认值：10MB</td></tr><tr><td><code>logging.logback.rollingpolicy.total-size-cap</code></td><td>日志文件被删除之前，可以容纳的最大大小，默认值：0B。设置1GB则磁盘存储超过 1GB 日志后就会删除旧日志文件</td></tr><tr><td><code>logging.logback.rollingpolicy.max-history</code></td><td>日志文件保存的最大天数，默认值：7</td></tr></tbody></table><br><h4 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h4><p>通常我们配置 <code>application.properties</code> 就够了。当然也可以自定义</p><p> 自己要写配置，配置文件名一般使用 <code>xxx-spring.xml</code></p><br><h4 id="切换日志组合"><a href="#切换日志组合" class="headerlink" title="切换日志组合"></a>切换日志组合</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><br><blockquote><p>导入任何第三方框架，先排除它的日志包，因为Boot底层控制好了日志</p><p>修改 <code>application.properties</code> 配置文件，就可以调整日志的所有行为</p><p>如果不够，可以编写日志框架自己的配置文件放在类路径下就行，比如<code>logback-spring.xml</code>，<code>log4j2-spring.xml</code></p><p>业务中使用 slf4j-api 记录日志</p></blockquote><br><h2 id="web开发"><a href="#web开发" class="headerlink" title="web开发"></a>web开发</h2><p><strong>默认的效果</strong></p><ul><li><p>包含了 <code>ContentNegotiatingViewResolver</code> 和 <code>BeanNameViewResolver</code> 组件，方便视图解析</p></li><li><p>默认的静态资源处理机制： 静态资源放在 static 文件夹下即可直接访问</p></li><li><p>自动注册了 <code>Converter</code>、<code>GenericConverter</code>、<code>Formatter</code> 组件，适配常见数据类型转换和格式化需求</p></li><li><p>支持 <code>HttpMessageConverters</code>，可以方便返回 json 等数据类型</p></li><li><p>注册 <code>MessageCodesResolve</code>r，方便国际化及错误消息处理</p></li><li><p>支持静态 index.html</p></li><li><p>自动使用 <code>ConfigurableWebBindingInitializer</code>，实现消息处理、数据绑定、类型转化、数据校验等功能</p></li></ul><br><p>在容器中协议写一个配置配继承 @Configuration 实现 WebMvcConfigurer，但是不标注 @EnableWebMvc，此时可以实现手自一体</p><br><h3 id="webmvcautoconfiguration"><a href="#WebMvcAutoConfiguration" class="headerlink" title="WebMvcAutoConfiguration"></a>WebMvcAutoConfiguration</h3><p><strong>效果：</strong></p><p>（1）放了两个Filter：</p><ul><li><p><code>HiddenHttpMethodFilter</code>；页面表单提交 Rest 请求（GET、POST、PUT、DELETE）</p></li><li><p><code>FormContentFilter</code>： 使不忽略 PUT、DELETE 的请求体数据</p></li></ul><br><p>（2）给容器中放了 <code>WebMvcConfigurer</code> 组件，给 SpringMVC 添加各种定制功能</p><ul><li>所有的功能最终会和配置文件进行绑定</li><li>WebMvcProperties： <code>spring.mvc</code>配置文件</li><li>WebProperties： <code>spring.web</code>配置文件</li></ul><br><p><code>WebMvcConfigurer</code> 接口提供了配置 <code>SpringMVC</code> 底层的所有组件入口</p><p><img src="https://gitee.com/Greedy_firtree/picture/raw/master/blog/image-20231031195045473.png" alt="image-20231031195045473"></p><br><h3 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h3><p>静态资源映射规则在 <code>WebMvcAutoConfiguration</code> 中进行了定义</p><ul><li><p><code>/webjars/**</code> 的所有路径 资源都在 <code>classpath:/META-INF/resources/webjars/</code></p></li><li><p><code>/**</code> 的所有路径 资源都在 <code>classpath:/META-INF/resources/</code>、<code>classpath:/resources/</code>、<code>classpath:/static/</code>、<code>classpath:/public/</code></p></li><li><p>所有静态资源都定义了缓存规则。【浏览器访问过一次，就会缓存一段时间】，但此功能参数无默认值</p><ul><li><p>period： 缓存间隔。 默认 0S</p></li><li><p>cacheControl：缓存控制。 默认无</p></li><li><p>useLastModified：是否使用lastModified头。 默认 false</p></li></ul></li></ul><br><h4 id="静态资源访问规则"><a href="#静态资源访问规则" class="headerlink" title="静态资源访问规则"></a>静态资源访问规则</h4><p>（1）规则一：访问： <code>/webjars/**</code> 路径就去 <code>classpath:/META-INF/resources/webjars/</code>下找资源</p><p>（2）规则二：访问： <code>/**</code> 路径就去静态资源默认的四个位置找资源</p><ol><li><p><code>classpath:/META-INF/resources/</code></p></li><li><p><code>classpath:/resources/</code></p></li><li><p><code>classpath:/static/</code></p></li><li><p><code>classpath:/public/</code></p></li></ol><p>（3）规则三：静态资源默认都有缓存规则的设置</p><ol><li><p>所有缓存的设置，直接通过配置文件： <code>spring.web</code></p></li><li><p>cachePeriod： 缓存周期； 多久不用找服务器要新的。 默认0s</p></li><li><p>cacheControl： HTTP 缓存控制</p></li><li><p>useLastModified：是否使用最后一次修改。配合HTTP Cache规则</p></li></ol><blockquote><p> 如果浏览器访问了一个静态资源 <code>index.js</code>，如果服务这个资源没有发生变化，下次访问的时候就可以直接让浏览器用自己缓存中的东西，而不用给服务器发请求</p></blockquote><br><p><strong>欢迎页</strong></p><p>欢迎页规则在 <code>WebMvcAutoConfiguration</code> 中进行了定义：</p><ol><li>在静态资源目录下找 index.html</li><li>没有就在 <code>templates</code> 下找 index 模板页</li></ol><br><p><strong>Favicon</strong></p><p>网页的小图标，在静态资源目录下找 favicon.ico</p><br><h4 id="自定义静态资源规则"><a href="#自定义静态资源规则" class="headerlink" title="自定义静态资源规则"></a>自定义静态资源规则</h4><p>（1）配置方式</p><p><code>spring.mvc</code>： 静态资源访问前缀路径</p><p><code>spring.web</code>：静态资源目录、静态资源缓存策略</p><br><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#1、spring.web：</span><br><span class="hljs-comment"># 1.配置国际化的区域信息</span><br><span class="hljs-comment"># 2.静态资源策略(开启、处理链、缓存)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#开启静态资源映射规则</span><br><span class="hljs-attr">spring.web.resources.add-mappings</span>=<span class="hljs-string">true</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#设置缓存</span><br><span class="hljs-attr">spring.web.resources.cache.period</span>=<span class="hljs-string">3600</span><br><span class="hljs-comment">##缓存详细合并项控制，覆盖period配置：</span><br><span class="hljs-comment">## 浏览器第一次请求服务器，服务器告诉浏览器此资源缓存7200秒，7200秒以内的所有此资源访问不用发给服务器请求，7200秒以后发请求给服务器</span><br><span class="hljs-attr">spring.web.resources.cache.cachecontrol.max-age</span>=<span class="hljs-string">7200</span><br><span class="hljs-comment">## 共享缓存</span><br><span class="hljs-attr">spring.web.resources.cache.cachecontrol.cache-public</span>=<span class="hljs-string">true</span><br><span class="hljs-comment">#使用资源 last-modified 时间，来对比服务器和浏览器的资源是否相同没有变化。相同返回 304</span><br><span class="hljs-attr">spring.web.resources.cache.use-last-modified</span>=<span class="hljs-string">true</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#自定义静态资源文件夹位置</span><br><span class="hljs-attr">spring.web.resources.static-locations</span>=<span class="hljs-string">classpath:/a/,classpath:/b/,classpath:/static/</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#2、 spring.mvc</span><br><span class="hljs-comment">## 2.1. 自定义webjars路径前缀</span><br><span class="hljs-attr">spring.mvc.webjars-path-pattern</span>=<span class="hljs-string">/wj/**</span><br><span class="hljs-comment">## 2.2. 静态资源访问路径前缀</span><br><span class="hljs-attr">spring.mvc.static-path-pattern</span>=<span class="hljs-string">/static/**</span><br></code></pre></td></tr></table></figure><br><p>（2）代码方式</p><ul><li>容器中只要有一个 WebMvcConfigurer 组件。配置的底层行为都会生效</li><li>@EnableWebMvc &#x2F;&#x2F;禁用boot的默认配置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// @EnableWebMvc // 禁用boot的默认配置</span><br><span class="hljs-meta">@Configuration</span>   <span class="hljs-comment">// 标记这是一个配置类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> &#123;<br>        <span class="hljs-comment">//保留以前规则</span><br>        <span class="hljs-comment">//自己写新的规则。</span><br>        registry.addResourceHandler(<span class="hljs-string">&quot;/static/**&quot;</span>)<br>                .addResourceLocations(<span class="hljs-string">&quot;classpath:/a/&quot;</span>,<span class="hljs-string">&quot;classpath:/b/&quot;</span>)<br>                .setCacheControl(CacheControl.maxAge(<span class="hljs-number">1180</span>, TimeUnit.SECONDS));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>也可以直接给容器中放一个 WebMvcConfigurer 组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Jav">@Configuration<br>public class MyConfig &#123;<br>    @Bean<br>    public WebMvcConfigurer webMvcConfigurer() &#123;<br>        return new WebMvcConfigurer() &#123;<br>            @Override<br>            public void addResourceHandlers(ResourceHandlerRegistry registry) &#123;<br>                registry.addResourceHandler(&quot;/static/**&quot;)<br>                        .addResourceLocations(&quot;classpath:/a/&quot;, &quot;classpath:/b/&quot;)<br>                        .setCacheControl(CacheControl.maxAge(1180, TimeUnit.SECONDS));<br>            &#125;<br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="路径匹配"><a href="#路径匹配" class="headerlink" title="路径匹配"></a>路径匹配</h3><blockquote><p><strong>Spring5.3</strong> 之后加入了更多的请求路径匹配的实现策略</p><p>以前只支持 <code>AntPathMatcher</code> 策略，现在提供了 <code>PathPatternParser</code> 策略</p><p>并且可以让我们指定到底使用那种策略</p></blockquote><h4 id="ant风格路径用法"><a href="#Ant风格路径用法" class="headerlink" title="Ant风格路径用法"></a>Ant风格路径用法</h4><p>Ant 风格的路径模式语法具有以下规则：</p><ul><li><code>*</code>：表示任意数量的字符</li><li><code>?</code>：表示任意一个字符</li><li><code>**</code>：表示任意数量的目录</li><li><code>&#123;&#125;</code>：表示一个命名的模式占位符</li><li><code>[]</code>：表示字符集合，例如[a-z]表示小写字母</li></ul><br><blockquote><p>注意：Ant 风格的路径模式语法中的特殊字符需要转义，如：</p><ul><li>要匹配文件路径中的星号，则需要转义为 <code>\\*</code></li><li>要匹配文件路径中的问号，则需要转义为 <code>\\?</code></li></ul></blockquote><br><h4 id="模式切换"><a href="#模式切换" class="headerlink" title="模式切换"></a>模式切换</h4><p><code>AntPathMatcher</code> 与 <code>PathPatternParser</code></p><ul><li>PathPatternParser 在 jmh 基准测试下，有 6<del>8 倍吞吐量提升，降低 30%</del>40% 空间分配率</li><li>PathPatternParser 兼容 AntPathMatcher 语法，并支持更多类型的路径模式</li><li>PathPatternParser <code>&quot;**&quot;</code> 多段匹配的支持仅允许在模式末尾使用</li></ul><br><p>总结： </p><ul><li>使用默认的路径匹配规则，是由 PathPatternParser  提供的</li><li>如果路径中间需要有 <code>**</code>，替换成 ant 风格路径</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 改变路径匹配策略：</span><br><span class="hljs-comment"># ant_path_matcher 老版策略；</span><br><span class="hljs-comment"># path_pattern_parser 新版策略；</span><br><span class="hljs-attr">spring.mvc.pathmatch.matching-strategy</span>=<span class="hljs-string">ant_path_matcher</span><br></code></pre></td></tr></table></figure><br><h3 id="内容协商"><a href="#内容协商" class="headerlink" title="内容协商"></a>内容协商</h3><h4 id="多端内容适配"><a href="#多端内容适配" class="headerlink" title="多端内容适配"></a>多端内容适配</h4><p>默认规则</p><br><h3 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h3><p>国际化的自动配置参照<code>MessageSourceAutoConfiguration</code></p><p><strong>实现步骤</strong>：</p><ol><li><p>Spring Boot 在类路径根下查找 messages 资源绑定文件。文件名为：messages.properties</p></li><li><p>多语言可以定义多个消息文件，命名为 <code>messages_区域代码.properties</code>。如：</p></li><li><ol><li><code>messages.properties</code>：默认</li><li><code>messages_zh_CN.properties</code>：中文环境</li><li><code>messages_en_US.properties</code>：英语环境</li></ol></li><li><p>在程序中可以自动注入  <code>MessageSource</code> 组件，获取国际化的配置项值</p></li><li><p>在页面中可以使用表达式 <code> #&#123;&#125;</code>获取国际化的配置项值</p></li></ol><br><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><p><strong>错误处理的自动配置</strong>都在<code>ErrorMvcAutoConfiguration</code>中，两大核心机制：</p><ul><li>Spring Boot 会自适应处理错误，响应页面或 JSON 数据</li></ul><ul><li>SpringMVC的错误处理机制依然保留，MVC 处理不了，才会交给 boot 进行处理</li></ul></font>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC</title>
      <link href="/post/ae0f95e0.html"/>
      <url>/post/ae0f95e0.html</url>
      
        <content type="html"><![CDATA[<font size="2"><meta name="referrer" content="no-referrer"><h2 id="springmvc简介"><a href="#SpringMVC简介" class="headerlink" title="SpringMVC简介"></a>SpringMVC简介</h2><p>SpringMVC 是 Spring 的一个后续产品，是 Spring 的一个子项目，目前业界普遍选择了 SpringMVC 作为 Java EE 项目表述层开发的首选方案</p><blockquote><p>三层架构分为表述层（或表示层）、业务逻辑层、数据访问层</p><p>表述层表示前台页面和后台 servlet</p></blockquote><br><p><strong>SpringMVC 的特点</strong></p><ul><li>Spring 家族原生产品，与 IOC 容器等基础设施无缝对接</li><li>基于原生的 Servlet，通过了功能强大的前端控制器 DispatcherServlet，对请求和响应进行统一处理</li><li>表述层各细分领域需要解决的问题全方位覆盖，提供全面解决方案</li><li>代码清新简洁，大幅度提升开发效率</li><li>内部组件化程度高，可插拔式组件即插即用，想要什么功能配置相应组件即可</li><li>性能卓著，尤其适合现代大型、超大型互联网项目要求</li></ul><br><h2 id="简单案例"><a href="#简单案例" class="headerlink" title="简单案例"></a>简单案例</h2><p>创建一个 springmvc 工程的步骤</p><br><h3 id="创建maven工程"><a href="#创建maven工程" class="headerlink" title="创建maven工程"></a>创建maven工程</h3><p>（1）创建一个 maven 工程，在 pom.xml 中设置打包方式为 war，并引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--设置打包方式--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- SpringMVC --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 日志 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- ServletAPI --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Spring5和Thymeleaf整合包 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.12.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h3 id="配置-webxml"><a href="#配置-web-xml" class="headerlink" title="配置 web.xml"></a>配置 web.xml</h3><p>注册 SpringMVC 的前端控制器 DispatcherServlet</p><br><p><strong>（1）默认配置发方式</strong></p><p>SpringMVC 配置文件默认的位置和名称：</p><ul><li><p>位置：WEB-INF下</p></li><li><p>名称：<code>&lt;servlet-name&gt;-servlet.xml</code></p></li></ul><p>例如，以下配置所对应 SpringMVC 的配置文件位于 WEB-INF 下，文件名为springMVC-servlet.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><br><p><strong>（2）拓展配置方式</strong></p><p>可通过 init-param 标签设置 SpringMVC 配置文件的位置和名称</p><p>a. 在 web.xml 文件中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--修改配置文件存放位置--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--将DispatcherServlet初始化提交到服务器启动时--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p>b. 在 resources 下创建对应的配置文件 Xxx.xml</p><blockquote><p>标签中使用 &#x2F; 和 &#x2F;* 的区别：</p><p> &#x2F; 匹配所有请求路径，但不包括 .jsp 请求路径的请求</p><p>&#x2F;* 匹配所有请求路径，也不包括 .jsp 请求路径的请求</p></blockquote><br><h3 id="创建请求控制器"><a href="#创建请求控制器" class="headerlink" title="创建请求控制器"></a>创建请求控制器</h3><p>请求控制器中每一个处理请求的方法成为控制器方法</p><p>因为 SpringMVC 的控制器由一个POJO（普通的Java类）担任，因此需要通过 @Controller 注解将其标识 为一个控制层组件，交给 Spring 的 IOC 容器管理，此时 SpringMVC 才能够识别控制器的存在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">portal</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 将逻辑视图返回</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="创建springmvc配置文件"><a href="#创建springMVC配置文件" class="headerlink" title="创建springMVC配置文件"></a>创建springMVC配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--扫描控制层组件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atfirtree.controller&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!-- 配置Thymeleaf视图解析器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;viewResolver&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;order&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;characterEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateEngine&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateResolver&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!-- 视图前缀 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span><br>                    <span class="hljs-comment">&lt;!-- 视图后缀 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.html&quot;</span>/&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateMode&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;HTML5&quot;</span>/&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;characterEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>浏览器发送请求，若请求地址符合前端控制器的 url-pattern，该请求就会被前端控制器  DispatcherServlet 处理</p><p>前端控制器会读取 springMVC 的核心配置文件，通过扫描组件找到控制器， 将请求地址和控制器中 @RequestMapping 注解的 value 属性值进行匹配</p><p>若匹配成功，该注解所标识的控制器方法就是处理请求的方法。处理请求的方法需要返回一个字符串类型的视图名称，该视图名称会被视图解析器解析，加上前缀和后缀组成视图的路径，通过 Thymeleaf 对视图进行渲染，最终转发到视图所对应页面</p><br><h2 id="requestmapping注解"><a href="#RequestMapping注解" class="headerlink" title="@RequestMapping注解"></a>@RequestMapping注解</h2><p>从注解名称上我们可以看到，@RequestMapping 注解的作用就是将请求和处理请求的控制器方法关联起来，建立映射关系。 SpringMVC 接收到指定的请求，就会来找到在映射关系中对应的控制器方法来处理这个请求</p><p>当设置的属性越多，映射的请求就越精确</p><br><h3 id="requestmapping注解的位置"><a href="#RequestMapping注解的位置" class="headerlink" title="@RequestMapping注解的位置"></a>@RequestMapping注解的位置</h3><ol><li>@RequestMapping标识一个类：设置映射请求的请求路径的初始信息 </li><li>@RequestMapping标识一个方法：设置映射请求请求路径的具体信息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestMappingController</span> &#123;<br>    <span class="hljs-comment">//此时请求映射所映射的请求的请求路径为：/test/testRequestMapping</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/testRequestMapping&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testRequestMapping</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="requestmapping注解的value属性"><a href="#RequestMapping注解的value属性" class="headerlink" title="@RequestMapping注解的value属性"></a>@RequestMapping注解的value属性</h3><ol><li>通过请求的请求地址匹配请求映射</li><li>是一个字符串类型的数组，表示该请求映射能够匹配多个请求地址所对应的请求</li><li>value 属性必须设置，至少通过请求地址匹配请求映射</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&#123;&quot;/test&quot;, &quot;/RequestMappingControllerTest&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestMappingController</span> &#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="requestmapping注解的method属性"><a href="#RequestMapping注解的method属性" class="headerlink" title="@RequestMapping注解的method属性"></a>@RequestMapping注解的method属性</h3><ol><li>通过请求的请求方式（get 或 post）匹配请求映射</li><li>是一个 RequestMethod 类型的数组，表示该请求映射能够匹配多种请求方式的请求</li><li>若当前请求的请求地址满足请求映射的 value 属性，但是请求方式不满足 method 属性，则浏览器报错 405</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(</span><br><span class="hljs-meta">        value = &quot;/test&quot;,</span><br><span class="hljs-meta">        method = &#123;RequestMethod.POST, RequestMethod.GET&#125; )</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestMappingController</span> &#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注：</p><p> 1、对于处理指定请求方式的控制器方法，SpringMVC 中提供了 @RequestMapping 的派生注解</p><p>​处理 get 请求的映射–&gt;@GetMapping</p><p>​处理 post 请求的映射–&gt;@PostMapping</p><p>​处理 put 请求的映射–&gt;@PutMapping</p><p>​处理 delete 请求的映射–&gt;@DeleteMapping </p><p>2、常用的请求方式有 get，post，put，delete 但是目前浏览器只支持 ge t和 post，若在 form 表单提交时，为 method 设置了其他请求方式的字符串（put 或 delete），则按照默认的请求方式 get 处理</p><p>若要发送 put 和 delete 请求，则需要通过 spring 提供的过滤器</p></blockquote><br><h3 id="requestmapping注解的params属性"><a href="#RequestMapping注解的params属性" class="headerlink" title="@RequestMapping注解的params属性"></a>@RequestMapping注解的params属性</h3><ol><li>通过请求的请求参数匹配请求映射</li><li>是一个字符串类型的数组，可以通过四种表达式设置请求参数和请求映射的匹配关系 <ul><li>“param”：要求请求映射所匹配的请求必须携带 param 请求参数</li><li>“!param”：要求请求映射所匹配的请求必须不能携带 param 请求参数</li><li>“param&#x3D;value”：要求请求映射所匹配的请求必须携带 param 请求参数且 param&#x3D;value</li><li>“param!&#x3D;value”：要求请求映射所匹配的请求必须携带 param 请求参数但是 param!&#x3D;value</li></ul></li></ol><blockquote><p>若当前请求满足 @RequestMapping 注解的 value 和 method 属性，但是不满足 params 属性，此时页面回报错400</p></blockquote><br><h3 id="requestmapping注解的headers属性"><a href="#RequestMapping注解的headers属性" class="headerlink" title="@RequestMapping注解的headers属性"></a>@RequestMapping注解的headers属性</h3><ol><li>通过请求的请求头信息匹配请求映</li><li>是一个字符串类型的数组，可以通过四种表达式设置请求头信息和请求映射的匹配关系<ul><li>“header”：要求请求映射所匹配的请求必须携带 header 请求头信息</li><li>“!header”：要求请求映射所匹配的请求必须不能携带 header 请求头信息</li><li>“header&#x3D;value”：要求请求映射所匹配的请求必须携带 header 请求头信息且 header&#x3D;value</li><li>“header!&#x3D;value”：要求请求映射所匹配的请求必须携带 header 请求头信息且 header!&#x3D;value</li></ul></li></ol><blockquote><p>若当前请求满足 @RequestMapping 注解的 value 和 method 属性，但是不满足  headers 属性，此时页面显示404</p></blockquote><br><h3 id="支持ant风格的路径"><a href="#支持ant风格的路径" class="headerlink" title="支持ant风格的路径"></a>支持ant风格的路径</h3><p>? ：表示任意的单个字符</p><p>*：表示任意的0个或多个字符</p><p>&#x2F;** ：表示任意层数的任意目录</p><blockquote><p>在使用 ** 时，只能使用 &#x2F;**&#x2F;xxx 的方式，即写在双斜线中，不能有任意的其他字符</p></blockquote><br><h3 id="支持路径中的占位符"><a href="#支持路径中的占位符" class="headerlink" title="支持路径中的占位符"></a>支持路径中的占位符</h3><p>原始方式：&#x2F;deleteUser?id&#x3D;1</p><p>rest方式：&#x2F;user&#x2F;delete&#x2F;1</p><p>SpringMVC 路径中的占位符常用于 RESTful 风格中，当请求路径中将某些数据通过路径的方式传输到服务器中，就可以在相应的 @RequestMapping 注解的 value 属性中通过占位符 {xxx} 表示传输的数据，再通过 @PathVariable 注解，将占位符所表示的数据赋值给控制器方法的形参</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/testRest/1/admin&#125;&quot;</span>&gt;</span>测试路径中的占位符--&gt;/testRest<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testRest/&#123;id&#125;/&#123;username&#125;&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testRest</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> String id, <span class="hljs-meta">@PathVariable(&quot;username&quot;)</span> String username)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;id:&quot;</span> + id + <span class="hljs-string">&quot;,username:&quot;</span> + username);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br><span class="hljs-comment">//最终输出的内容为--&gt;id:1,username:admin</span><br></code></pre></td></tr></table></figure><br><h2 id="springmvc获取请求参数"><a href="#SpringMVC获取请求参数" class="headerlink" title="SpringMVC获取请求参数"></a>SpringMVC获取请求参数</h2><h3 id="通过servletapi获取"><a href="#通过ServletAPI获取" class="headerlink" title="通过ServletAPI获取"></a>通过ServletAPI获取</h3><p>将 HttpServletRequest 作为控制器方法的形参，此时 HttpServletRequest 类型的参数表示封装了当前请求的请求报文的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/param/servletAPI&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getParamByServletAPI</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br><br>    System.out.println(<span class="hljs-string">&quot;username=&quot;</span> + username + <span class="hljs-string">&quot; password=&quot;</span> + password);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="通过控制器方法的形参获取请求参数"><a href="#通过控制器方法的形参获取请求参数" class="headerlink" title="通过控制器方法的形参获取请求参数"></a>通过控制器方法的形参获取请求参数</h3><p>在控制器方法的形参位置，设置和请求参数同名的形参，当浏览器发送请求，匹配到请求映射时，在 DispatcherServlet 中就会将请求参数赋值给相应的形参</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/param&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getParam</span><span class="hljs-params">(String username, String password)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;通过控制器方法的形参获取参数：username=&quot;</span> + username + <span class="hljs-string">&quot; password=&quot;</span> + password);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>若请求所传输的请求参数中有多个同名的请求参数，此时可以在控制器方法的形参中设置字符串数组或者字符串类型的形参接收此请求参数</p><p>若使用字符串数组类型的形参，此参数的数组中包含了每一个数据</p><p>若使用字符串类型的形参，此参数的值为每个数据中间使用逗号拼接的结果</p></blockquote><br><h4 id="requestparam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h4><p>@RequestParam 是将请求参数和控制器方法的形参创建映射关系</p><p>@RequestParam 注解一共有三个属性：</p><ul><li>value：指定为形参赋值的请求参数的参数名</li><li>required：设置是否必须传输此请求参数，默认值为 true<ul><li>若设置为 true 时，则当前请求必须传输 value 所指定的请求参数，若没有传输该请求参数，且没有设置 defaultValue 属性，则页面报错400</li><li>若设置为 false，则当前请求不是必须传输 value 所指定的请求参数，若没有传输，则注解所标识的形参的值为 null</li><li>defaultValue：不管 required 属性值为 true 或 false，当 value 所指定的请求参数没有传输或传输的值为空时，则使用默认值为形参赋值</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/param&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getParam</span><span class="hljs-params">(</span><br><span class="hljs-params">        <span class="hljs-meta">@RequestParam(value = &quot;username&quot;, required = true, defaultValue = &quot;xxx&quot;)</span> String username,</span><br><span class="hljs-params">        <span class="hljs-meta">@RequestParam(&quot;password&quot;)</span> String password)</span> &#123;<br><br>    System.out.println(<span class="hljs-string">&quot;通过ServletAPI获取参数：username=&quot;</span> + username + <span class="hljs-string">&quot; password=&quot;</span> + password);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><h4 id="requestheader"><a href="#RequestHeader" class="headerlink" title="@RequestHeader"></a>@RequestHeader</h4><p>@RequestHeader 是将请求头信息和控制器方法的形参创建映射关系</p><p>@RequestHeader 注解一共有三个属性：value、required、defaultValue，用法同上</p><br><h4 id="cookievalue"><a href="#CookieValue" class="headerlink" title="@CookieValue"></a>@CookieValue</h4><p>@CookieValue 是将 cookie 数据和控制器方法的形参创建映射关系</p><p>@CookieValue注解一共有三个属性：value、required、defaultValue，用法同上</p><br><h3 id="通过pojo获取请求参数"><a href="#通过POJO获取请求参数" class="headerlink" title="通过POJO获取请求参数"></a>通过POJO获取请求参数</h3><p>可以在控制器方法的形参位置设置一个实体类型的形参，此时若浏览器传输的请求参数的参数名和实体类中的属性名一致，那么请求参数就会为此属性赋值                                                                                                                    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/param/pojo&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getParamByPojo</span><span class="hljs-params">(User user)</span> &#123;<br><br>    System.out.println(<span class="hljs-string">&quot;通过pojo获取参数：username=&quot;</span> + user.getUsername() + <span class="hljs-string">&quot; password=&quot;</span> + user.getPassword());<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="解决获取请求参数的乱码问题"><a href="#解决获取请求参数的乱码问题" class="headerlink" title="解决获取请求参数的乱码问题"></a>解决获取请求参数的乱码问题</h3><p>解决获取请求参数的乱码问题，可以使用 SpringMVC 提供的编码过滤器 CharacterEncodingFilter，但是 必须在 web.xml 中进行注册</p><p><strong>SpringMVC中处理编码的过滤器一定要配置到其他过滤器之前，否则无效</strong></p><p>因为在设置编码之前，一定不能获取任意的请求参数，只要获取了，设置的编码就不起作用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置springMVC的编码过滤器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>forceEncoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h2 id="域对象共享数据"><a href="#域对象共享数据" class="headerlink" title="域对象共享数据"></a>域对象共享数据</h2><h3 id="向request域共享数据"><a href="#向request域共享数据" class="headerlink" title="向request域共享数据"></a>向request域共享数据</h3><h4 id="使用servletapi向request域对象共享数据"><a href="#使用ServletAPI向request域对象共享数据" class="headerlink" title="使用ServletAPI向request域对象共享数据"></a>使用ServletAPI向request域对象共享数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testServletAPI&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testServletAPI</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>    request.setAttribute(<span class="hljs-string">&quot;testScope&quot;</span>, <span class="hljs-string">&quot;hello,servletAPI&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>然而并不是很常用</p><br><h4 id="使用modelandview向request域对象共享数据"><a href="#使用ModelAndView向request域对象共享数据" class="headerlink" title="使用ModelAndView向request域对象共享数据"></a>使用ModelAndView向request域对象共享数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/test/mav&quot;)</span><br><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">testMAV</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 包含 model 和 view两个功能</span><br><span class="hljs-comment">     * Model:向请求域中共享数据</span><br><span class="hljs-comment">     * View:设置逻辑视图实现页面跳转</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">mav</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>();<br>    <span class="hljs-comment">// 向请求域中共享数据</span><br>    mav.addObject(<span class="hljs-string">&quot;testRequestScope&quot;</span>, <span class="hljs-string">&quot;hello,ModelAndView&quot;</span>);<br>    <span class="hljs-comment">// 设置逻辑视图</span><br>    mav.setViewName(<span class="hljs-string">&quot;success&quot;</span>);<br>    <span class="hljs-keyword">return</span> mav;<br>&#125;<br></code></pre></td></tr></table></figure><br><h4 id="使用model向request域对象共享数据"><a href="#使用Model向request域对象共享数据" class="headerlink" title="使用Model向request域对象共享数据"></a>使用Model向request域对象共享数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/test/model&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testModel</span><span class="hljs-params">(Model model)</span> &#123;<br>    model.addAttribute(<span class="hljs-string">&quot;testRequestScope&quot;</span>, <span class="hljs-string">&quot;hello,Model&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>比较方便</p><br><h4 id="使用map向request域对象共享数据"><a href="#使用map向request域对象共享数据" class="headerlink" title="使用map向request域对象共享数据"></a>使用map向request域对象共享数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/test/map&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testMap</span><span class="hljs-params">(Map&lt;String, Object&gt; map)</span>&#123;<br>    map.put(<span class="hljs-string">&quot;testRequestScope&quot;</span>, <span class="hljs-string">&quot;hello,Map&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><h4 id="使用modelmap向request域对象共享数据"><a href="#使用ModelMap向request域对象共享数据" class="headerlink" title="使用ModelMap向request域对象共享数据"></a>使用ModelMap向request域对象共享数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/test/modelMap&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testModelMap</span><span class="hljs-params">(ModelMap modelMap)</span>&#123;<br>    modelMap.addAttribute(<span class="hljs-string">&quot;testRequestScope&quot;</span>, <span class="hljs-string">&quot;hello,ModelMap&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><p><strong>Model、ModelMap、Map的关系：</strong></p><p>Model、ModelMap、Map 类型的参数其实本质上都是 BindingAwareModelMap 类型的</p><br><h3 id="向session域共享数据"><a href="#向session域共享数据" class="headerlink" title="向session域共享数据"></a>向session域共享数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testSession&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testSession</span><span class="hljs-params">(HttpSession session)</span>&#123;<br>    session.setAttribute(<span class="hljs-string">&quot;testSessionScope&quot;</span>, <span class="hljs-string">&quot;hello,session&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="向application域共享数据"><a href="#向application域共享数据" class="headerlink" title="向application域共享数据"></a>向application域共享数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testApplication&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testApplication</span><span class="hljs-params">(HttpSession session)</span>&#123;<br>    <span class="hljs-type">ServletContext</span> <span class="hljs-variable">application</span> <span class="hljs-operator">=</span> session.getServletContext();<br>    application.setAttribute(<span class="hljs-string">&quot;testApplicationScope&quot;</span>, <span class="hljs-string">&quot;hello,application&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><h2 id="springmvc的视图"><a href="#SpringMVC的视图" class="headerlink" title="SpringMVC的视图"></a>SpringMVC的视图</h2><p>SpringMVC 中的视图是 View 接口，视图的作用渲染数据，将模型 Model 中的数据展示给用户</p><p>SpringMVC 视图的种类很多，默认有转发视图和重定向视图</p><p>当工程引入 jstl 的依赖，转发视图会自动转换为 JstlView</p><p>若使用的视图技术为 Thymeleaf，在 SpringMVC 的配置文件中配置了 Thymeleaf 的视图解析器，由此视图解析器解析之后所得到的是 ThymeleafView</p><br><h3 id="thymeleafview"><a href="#ThymeleafView" class="headerlink" title="ThymeleafView"></a>ThymeleafView</h3><p>当控制器方法中所设置的视图名称没有任何前缀时，此时的视图名称会被 SpringMVC 配置文件中所配置的视图解析器解析，视图名称拼接视图前缀和视图</p><p>后缀所得到的最终路径，会通过转发的方式实现跳转</p><br><h3 id="转发视图"><a href="#转发视图" class="headerlink" title="转发视图"></a>转发视图</h3><p>SpringMVC 中默认的转发视图是 InternalResourceView</p><p>SpringMVC中 创建转发视图的情况：</p><p>当控制器方法中所设置的视图名称以 “forward:” 为前缀时，创建 InternalResourceView 视图，此时的视图名称不会被 SpringMVC 配置文件中所配置的视图解析器解析，而是会将前缀 “forward:” 去掉，剩余部分作为最终路径通过转发的方式实现跳转</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/test/view/forward&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testInternalResourceView</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;forward:/test/model&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="重定向视图"><a href="#重定向视图" class="headerlink" title="重定向视图"></a>重定向视图</h3><p>SpringMVC 中默认的重定向视图是 RedirectView</p><p>当控制器方法中所设置的视图名称以 “redirect:” 为前缀时，创建 RedirectView 视图，此时的视图名称不会被 SpringMVC 配置文件中所配置的视图解析器解析，而是会将前缀 “redirect:” 去掉，剩余部分作为最终路径通过重定向的方式实现跳转</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/test/view/redirect&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testRedirectView</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/test/model&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="视图控制器view-controller"><a href="#视图控制器view-controller" class="headerlink" title="视图控制器view-controller"></a>视图控制器view-controller</h3><p>当控制器方法中，仅仅用来实现页面跳转，即只需要设置视图名称时，可以将处理器方法使用 viewcontroller 标签进行表示</p><p>springmvc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--开启mvc注解驱动的标签--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span> /&gt;</span><br><span class="hljs-comment">&lt;!--配置视图控制器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:view-controller</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">view-name</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:view-controller</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>注：</p><p>当 SpringMVC 中设置任何一个 view-controller 时，其他控制器中的请求映射将全部失效</p><p>此时需要在 SpringMVC 的核心配置文件中设置开启 mvc 注解驱动的标签：</p><p>&lt;mvc:annotation-driven &#x2F;&gt;</p></blockquote><br><h2 id="restful"><a href="#RESTful" class="headerlink" title="RESTful"></a>RESTful</h2><p>REST：Representational State Transfer，表现层资源状态转移。一种代码实现风格</p><p><strong>实现：</strong></p><p>具体说，就是 HTTP 协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE</p><p>它们分别对应四种基本操作：GET 用来获取资源，POST 用来新建资源，PUT 用来更新资源，DELETE 用来删除资源</p><p>REST 风格提倡 URL 地址使用统一的风格设计，从前到后各个单词使用斜杠分开，不使用问号键值对方式携带请求参数，而是将要发送给服务器的数据作为 URL 地址的一部分，以保证整体风格的一致性</p><br><table><thead><tr><th>操作</th><th>传统方式</th><th>REST风格</th></tr></thead><tbody><tr><td>查询</td><td>getUserById?id&#x3D;1</td><td>user&#x2F;1–&gt;get</td></tr><tr><td>保存</td><td>saveUser</td><td>user–&gt;post</td></tr><tr><td>删除</td><td>deleteUser?id&#x3D;1</td><td>user&#x2F;1–&gt;delete</td></tr><tr><td>更新</td><td>updateUser</td><td>user–&gt;put</td></tr></tbody></table><br><h3 id="hiddenhttpmethodfilter"><a href="#HiddenHttpMethodFilter" class="headerlink" title="HiddenHttpMethodFilter"></a>HiddenHttpMethodFilter</h3><p>由于浏览器只支持发送 get 和 post 方式的请求，那么该如何发送 put 和 delete 请求呢？</p><p>SpringMVC 提供了 HiddenHttpMethodFilter 帮助我们将 POST 请求转换为 DELETE 或 PUT 请求</p><p>HiddenHttpMethodFilter 处理 put 和 delete 请求的条件：</p><ul><li><p>当前请求的请求方式必须为 post</p></li><li><p>当前请求必须传输请求参数 _method</p></li></ul><p>满足以上条件，HiddenHttpMethodFilter 过滤器就会将当前请求的请求方式转换为请求参数 _method 的值，因此请求参数 _method 的值才是最终的请求方式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/user&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;_method&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;put&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;修改用户信息&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><br><p>需要在 web.xml 中注册 HiddenHttpMethodFilter</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><br><p>但是一般我们的删除操作都不是通过表单提交的，因此需要额外利用 vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;deleteEmployee&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>delete<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;_method&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;delete&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/static/js/vue.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> vue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">      <span class="hljs-title function_">deleteEmployee</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 获取form表单</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> form = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&quot;form&quot;</span>)[<span class="hljs-number">0</span>];</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 将超链接的href属性赋值给form表单的action属性</span></span><br><span class="language-javascript">        <span class="hljs-comment">// event.target 表示触发当前事件的标签</span></span><br><span class="language-javascript">        form.<span class="hljs-property">action</span> = event.<span class="hljs-property">target</span>.<span class="hljs-property">href</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 表单提交</span></span><br><span class="language-javascript">        form.<span class="hljs-title function_">submit</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 阻止超链接的默认行为</span></span><br><span class="language-javascript">        event.<span class="hljs-title function_">preventDefault</span>();</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h2 id="springmvc处理ajax请求"><a href="#SpringMVC处理ajax请求" class="headerlink" title="SpringMVC处理ajax请求"></a>SpringMVC处理ajax请求</h2><h3 id="requestbody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h3><p>@RequestBody 可以获取请求体信息，使用 @RequestBody 注解标识控制器方法的形参，当前请求的请求体就会为当前注解所标识的形参赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/test/ajax&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAjax</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> String requestBody)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;requestBody: &quot;</span> + requestBody);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="requestbody获取json格式的请求参数"><a href="#RequestBody获取json格式的请求参数" class="headerlink" title="@RequestBody获取json格式的请求参数"></a>@RequestBody获取json格式的请求参数</h4><blockquote><p>在使用了 axios 发送 ajax 请求之后，浏览器发送到服务器的请求参数有两种格式：</p><p>1、name&#x3D;value&amp;name&#x3D;value…，此时的请求参数可以通过 request.getParameter() 获取，对应 SpringMVC 中，可以直接通过控制器方法的形参获取此类请求参数</p><p>2、{key:value,key:value,…}，此时无法通过 request.getParameter() 获取，之前我们使用操作 json 的相关 jar 包 gson 或 jackson 处理此类请求参数，可以将其转换为指定的实体类对象或 map 集合，在 SpringMVC 中，直接使用 @RequestBody 注解标识控制器方法的形参即可将此类请求参数转换为 java 对象</p></blockquote><p><strong>使用 @RequestBody 获取 json 格式的请求参数的步骤：</strong></p><p>（1）导入 jackson 的依赖</p><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.12.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><br><p>（2）SpringMVC 的配置文件中设置开启 mvc 的注解驱动</p><p>springmvc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--开启mvc注解驱动的标签--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span> /&gt;</span><br></code></pre></td></tr></table></figure><br><p>（3）在控制器方法的形参位置，设置 json 格式的请求参数要转换成的 java 类型（实体类或 map ）的参数，并使用 @RequestBody 注解标识</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/test/requestBody/json&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testRequestBody</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user,</span><br><span class="hljs-params">                            HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    System.out.println(user);<br>    response.getWriter().write(<span class="hljs-string">&quot;hello, RequestBody&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="responsebody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody"></a>@ResponseBody</h3><p>@ResponseBody 用于标识一个控制器方法，可以将该方法的返回值直接作为响应报文的响应体响应到浏览器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/test/responseBody&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testResponseBody</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><h4 id="responsebody响应浏览器json数据"><a href="#ResponseBody响应浏览器json数据" class="headerlink" title="@ResponseBody响应浏览器json数据"></a>@ResponseBody响应浏览器json数据</h4><p>服务器处理 ajax 请求之后，大多数情况都需要向浏览器响应一个 java 对象，此时必须将 java 对象转换为 json 字符串才可以响应到浏览器，之前我们使用操作 json 数据的 jar 包 gson 或 jackson 将 java 对象转换为 json 字符串。在 SpringMVC 中，我们可以直接使用 @ResponseBody 注解实现此功能</p><p><strong>使用 @ResponseBody 获取 json 格式的请求参数的步骤：</strong></p><p>（1）导入 jackson 的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.12.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><br><p>（2）SpringMVC 的配置文件中设置开启 mvc 的注解驱动</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--开启mvc注解驱动的标签--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span> /&gt;</span><br></code></pre></td></tr></table></figure><br><p>（3）使用 @ResponseBody 注解标识控制器方法，在方法中，将需要转换为 json 字符串并响应到浏览器的 java 对象作为控制器方法的返回值，此时 SpringMVC 就可以将此对象直接转换为 json 字符串并响应到浏览器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/test/responseBody/json&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">testResponseBodyJson</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">1001</span>, <span class="hljs-string">&quot;xiao&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>, <span class="hljs-number">23</span>, <span class="hljs-string">&quot;男&quot;</span>);<br>    <span class="hljs-keyword">return</span> user;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>常用的 java 对象转换为 json 的结果：</p><p>实体类 –&gt; json 对象</p><p>map –&gt; json 对象</p><p>list –&gt; json 数组</p></blockquote><br><h3 id="restcontroller注解"><a href="#RestController注解" class="headerlink" title="@RestController注解"></a>@RestController注解</h3><p>@RestController 注解是 springMVC 提供的一个复合注解，标识在控制器的类上，就相当于为类添加了 @Controller 注解，并且为其中的每个方法添加了 @ResponseBody 注解</p><br><h2 id="文件上传和下载"><a href="#文件上传和下载" class="headerlink" title="文件上传和下载"></a>文件上传和下载</h2><h3 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h3><p>ResponseEntity 用于控制器方法的返回值类型，该控制器方法的返回值就是响应到浏览器的完整的响应报文，使用 ResponseEntity 实现下载文件的功能</p><blockquote><p>特殊情况：</p><p>当控制器方法没有返回值，也没有通过 response.getwriter().write() 响应浏览器数据</p><p>会直接将我们当前要处理的请求的地址作为逻辑视图来处理</p><p>PS：</p><p>当无法确定文件路径的分隔符时，可以使用 File.separator，会自动识别文件的分隔符</p></blockquote><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/test/download&quot;)</span><br><span class="hljs-keyword">public</span> ResponseEntity&lt;<span class="hljs-type">byte</span>[]&gt; testResponseEntity(HttpSession session) <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//获取ServletContext对象</span><br>    <span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> session.getServletContext();<br><br>    <span class="hljs-comment">//获取服务器中文件的真实路径</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">realPath</span> <span class="hljs-operator">=</span> servletContext.getRealPath(<span class="hljs-string">&quot;/img/111.jpg&quot;</span>);<br><br>    <span class="hljs-comment">//创建输入流</span><br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(realPath);<br><br>    <span class="hljs-comment">//创建字节数组</span><br>    <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[is.available()];<br><br>    <span class="hljs-comment">//将流读到字节数组中</span><br>    is.read(bytes);<br><br>    <span class="hljs-comment">//创建HttpHeaders对象设置响应头信息</span><br>    MultiValueMap&lt;String, String&gt; headers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpHeaders</span>();<br><br>    <span class="hljs-comment">//设置要下载方式以及下载文件的名字</span><br>    headers.add(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment;filename=111.jpg&quot;</span>);<br><br>    <span class="hljs-comment">//设置响应状态码</span><br>    <span class="hljs-type">HttpStatus</span> <span class="hljs-variable">statusCode</span> <span class="hljs-operator">=</span> HttpStatus.OK;<br><br>    <span class="hljs-comment">//创建ResponseEntity对象</span><br>    ResponseEntity&lt;<span class="hljs-type">byte</span>[]&gt; responseEntity = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseEntity</span>&lt;&gt;(bytes, headers, statusCode);<br><br>    <span class="hljs-comment">//关闭输入流</span><br>    is.close();<br>    <span class="hljs-keyword">return</span> responseEntity;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p>文件上传要求 form 表单的请求方式必须为 post，并且添加属性 <code>enctype=&quot;multipart/form-data&quot;</code></p><p>SpringMVC中 将上传的文件封装到 MultipartFile 对象中，通过此对象可以获取文件相关信息</p><br><p>（1）添加依赖</p><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><br><p>（2）在 SpringMVC 的配置文件中添加配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--必须通过文件解析器的解析才能将文件转换为MultipartFile对象--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;multipartResolver&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--设置文件上传的默认编码--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><br><p>（3）控制器方法</p><p><strong>包括如何解决文件上传过程中文件重名的情况</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/test/upload&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testUp</span><span class="hljs-params">(MultipartFile photo, HttpSession session)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 获取上传的文件的文件名</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> photo.getOriginalFilename();<br><br>    <span class="hljs-comment">// 处理文件重名问题</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">hzName</span> <span class="hljs-operator">=</span> fileName.substring(fileName.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>));<br>    fileName = UUID.randomUUID().toString() + hzName;<br><br>    <span class="hljs-comment">// 获取服务器中photo目录的路径</span><br>    <span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> session.getServletContext();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">photoPath</span> <span class="hljs-operator">=</span> servletContext.getRealPath(<span class="hljs-string">&quot;photo&quot;</span>);<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(photoPath);<br>    <span class="hljs-keyword">if</span> (!file.exists()) &#123;<br>        file.mkdir();<br>    &#125;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">finalPath</span> <span class="hljs-operator">=</span> photoPath + File.separator + fileName;<br><br>    <span class="hljs-comment">// 实现上传功能</span><br>    photo.transferTo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(finalPath));<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>SpringMVC 中的拦截器用于拦截控制器方法的执行</p><p>SpringMVC 中的拦截器需要实现 HandlerInterceptor</p><p>SpringMVC 的拦截器必须在 SpringMVC 的配置文件中进行配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptors</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atfirtree.interceptor.FirstInterceptor&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;firstInterceptor&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!-- 以上两种配置方式都是对DispatcherServlet所处理的所有的请求进行拦截 --&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/**&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:exclude-mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/test/requestEntity&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;firstInterceptor&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        以上配置方式可以通过ref或bean标签设置拦截器</span><br><span class="hljs-comment">        通过mvc:mapping设置需要拦截的请求，/**表示所有请求</span><br><span class="hljs-comment">        通过mvc:exclude-mapping设置需要排除的请求，即不需要拦截的请求</span><br><span class="hljs-comment">    --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptors</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h3 id="拦截器的三个抽象方法"><a href="#拦截器的三个抽象方法" class="headerlink" title="拦截器的三个抽象方法"></a>拦截器的三个抽象方法</h3><p>SpringMVC 中的拦截器有三个抽象方法：</p><ul><li><p>preHandle：控制器方法执行之前执行 preHandle()，其 boolean 类型的返回值表示是否拦截或放行</p><ul><li>返回 true 为放行，即调用控制器方法</li><li>返回 false 表示拦截，即不调用控制器方法</li></ul></li><li><p>postHandle：控制器方法执行之后执行</p></li><li><p>afterCompletion：处理完视图和模型数据，渲染视图完毕之后执行</p></li></ul><br><h3 id="多个拦截器的执行顺序"><a href="#多个拦截器的执行顺序" class="headerlink" title="多个拦截器的执行顺序"></a>多个拦截器的执行顺序</h3><p>（1）若每个拦截器的 preHandle() 都返回 true</p><p>此时多个拦截器的执行顺序和拦截器在 SpringMVC 的配置文件的配置顺序有关：</p><p>preHandle() 会按照配置的顺序执行，而 postHandle() 和 afterCompletion() 会按照配置的反序执行</p><p>（2）若某个拦截器的 preHandle() 返回了 false</p><p>preHandle() 返回 false 和它之前的拦截器的 preHandle() 都会执行，postHandle() 都不执行，返回 false 的拦截器之前的拦截器的 afterCompletion() 会执行（仍然是倒序执行）</p><br><p>比如按照 FirstInterceptor、SecondInterceptor、ThirdInterceptor 的顺序配置</p><p>（1）若两个拦截器的 preHandle() 都返回 true，则会输出</p><blockquote><p>FirstInterceptor –&gt; preHandle</p><p>SecondInterceptor –&gt; preHandle</p><p>ThirdInterceptor –&gt; preHandle</p><p>ThirdInterceptor –&gt; postHandle</p><p>SecondInterceptor –&gt; postHandle</p><p>FirstInterceptor –&gt; postHandle</p><p>ThirdInterceptor –&gt; afterCompletion</p><p>SecondInterceptor –&gt; afterCompletion</p><p>FirstInterceptor –&gt; afterCompletion</p></blockquote><br><p>（2）若 ThirdInterceptor 返回 false，则会输出</p><blockquote><p>FirstInterceptor –&gt; preHandle</p><p>SecondInterceptor –&gt; preHandle</p><p>ThirdInterceptor –&gt; preHandle</p><p>SecondInterceptor –&gt; afterCompletion</p><p>FirstInterceptor –&gt; afterCompletion</p></blockquote><br><h2 id="异常处理器"><a href="#异常处理器" class="headerlink" title="异常处理器"></a>异常处理器</h2><h3 id="基于配置的异常处理"><a href="#基于配置的异常处理" class="headerlink" title="基于配置的异常处理"></a>基于配置的异常处理</h3><p>SpringMVC 提供了一个处理控制器方法执行过程中所出现的异常的接口：HandlerExceptionResolver</p><p>HandlerExceptionResolver 接口的实现类有：DefaultHandlerExceptionResolver 和 SimpleMappingExceptionResolver</p><p>SpringMVC 提供了自定义的异常处理器 SimpleMappingExceptionResolver，使用方式：</p><p><strong>springmvc.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;exceptionMappings&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">                properties的键表示处理器方法执行过程中出现的异常</span><br><span class="hljs-comment">                properties的值表示若出现指定异常时，要跳转的页面的逻辑视图</span><br><span class="hljs-comment">            --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;java.lang.ArithmeticException&quot;</span>&gt;</span>error<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        exceptionAttribute属性设置一个属性名，将出现的异常信息在请求域中进行共享</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;exceptionAttribute&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;ex&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h3 id="基于注解的异常处理"><a href="#基于注解的异常处理" class="headerlink" title="基于注解的异常处理"></a>基于注解的异常处理</h3><p>@ControllerAdvice 将当前类标记为异常处理的组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionController</span> &#123;<br>    <span class="hljs-comment">//@ExceptionHandler用于设置所标识方法处理的异常</span><br>    <span class="hljs-meta">@ExceptionHandler(ArithmeticException.class)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">handleArithmeticException</span><span class="hljs-params">(Exception ex, Model model)</span>&#123;<br>        <span class="hljs-comment">// ex表示当前请求处理中出现的异常对象</span><br>        model.addAttribute(<span class="hljs-string">&quot;ex&quot;</span>, ex);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;error&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><h2 id="注解配置springmvc"><a href="#注解配置SpringMVC" class="headerlink" title="注解配置SpringMVC"></a>注解配置SpringMVC</h2><p>使用配置类和注解代替 web.xml 和 SpringMVC 配置文件的功能</p><br><h3 id="创建初始化类代替webxml"><a href="#创建初始化类，代替web-xml" class="headerlink" title="创建初始化类，代替web.xml"></a>创建初始化类，代替web.xml</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebInit</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-comment">// 设置一个配置类来代替spring的配置文件</span><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;SpringConfig.class&#125;;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-comment">// 设置一个配置类来代替springmvc的配置文件</span><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;WebConfig.class&#125;;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-comment">// 设置springmvc的前端控制器DispatcherServlet的url-pattern</span><br>    <span class="hljs-keyword">protected</span> String[] getServletMappings() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;/&quot;</span>&#125;;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-comment">// 设置当前的过滤器</span><br>    <span class="hljs-keyword">protected</span> Filter[] getServletFilters() &#123;<br>        <span class="hljs-comment">// 创建编码过滤器</span><br>        <span class="hljs-type">CharacterEncodingFilter</span> <span class="hljs-variable">characterEncodingFilter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CharacterEncodingFilter</span>();<br>        characterEncodingFilter.setEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        characterEncodingFilter.setForceEncoding(<span class="hljs-literal">true</span>);<br><br>        <span class="hljs-comment">// 创建处理请求方式的过滤器</span><br>        <span class="hljs-type">HiddenHttpMethodFilter</span> <span class="hljs-variable">hiddenHttpMethodFilter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HiddenHttpMethodFilter</span>();<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Filter</span>[]&#123;characterEncodingFilter, hiddenHttpMethodFilter&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="创建springconfig类代替spring的配置文件"><a href="#创建SpringConfig类代替spring的配置文件" class="headerlink" title="创建SpringConfig类代替spring的配置文件"></a>创建SpringConfig类代替spring的配置文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><br><h4 id="创建webconfig类代替springmvc的配置文件"><a href="#创建WebConfig类，代替SpringMVC的配置文件" class="headerlink" title="创建WebConfig类，代替SpringMVC的配置文件"></a>创建WebConfig类，代替SpringMVC的配置文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.atfirtree.controller&quot;)</span> <span class="hljs-comment">// 扫描组件</span><br><span class="hljs-meta">@EnableWebMvc</span> <span class="hljs-comment">// 开启mvc注解驱动</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br>    <span class="hljs-comment">// 配置Thymeleaf视图解析器</span><br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-comment">// 配置生成模板解析器</span><br>    <span class="hljs-keyword">public</span> ITemplateResolver <span class="hljs-title function_">templateResolver</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">webApplicationContext</span> <span class="hljs-operator">=</span> ContextLoader.getCurrentWebApplicationContext();<br>        <span class="hljs-type">ServletContextTemplateResolver</span> <span class="hljs-variable">templateResolver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletContextTemplateResolver</span>(webApplicationContext.getServletContext());<br>        templateResolver.setPrefix(<span class="hljs-string">&quot;/WEB-INF/templates/&quot;</span>);<br>        templateResolver.setSuffix(<span class="hljs-string">&quot;.html&quot;</span>);<br>        templateResolver.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        templateResolver.setTemplateMode(TemplateMode.HTML);<br>        <span class="hljs-keyword">return</span> templateResolver;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-comment">// 生成模板引擎并为模板引擎注入模板解析器</span><br>    <span class="hljs-keyword">public</span> SpringTemplateEngine <span class="hljs-title function_">templateEngine</span><span class="hljs-params">(ITemplateResolver templateResolver)</span> &#123;<br>        <span class="hljs-type">SpringTemplateEngine</span> <span class="hljs-variable">templateEngine</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringTemplateEngine</span>();<br>        templateEngine.setTemplateResolver(templateResolver);<br>        <span class="hljs-keyword">return</span> templateEngine;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-comment">// 生成视图解析器并未解析器注入模板引擎</span><br>    <span class="hljs-keyword">public</span> ViewResolver <span class="hljs-title function_">viewResolver</span><span class="hljs-params">(SpringTemplateEngine templateEngine)</span> &#123;<br>        <span class="hljs-type">ThymeleafViewResolver</span> <span class="hljs-variable">viewResolver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThymeleafViewResolver</span>();<br>        viewResolver.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        viewResolver.setTemplateEngine(templateEngine);<br>        <span class="hljs-keyword">return</span> viewResolver;<br>    &#125;<br><br>    <span class="hljs-comment">// 文件上传解析器</span><br>    <span class="hljs-comment">// @Bean可以将标识的方法的返回值作为bean进行管理，bean的id就是方法的方法名</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> CommonsMultipartResolver <span class="hljs-title function_">multipartResolver</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonsMultipartResolver</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-comment">// 配置默认的servlet来处理静态资源</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configureDefaultServletHandling</span><span class="hljs-params">(DefaultServletHandlerConfigurer configurer)</span> &#123;<br>        configurer.enable();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-comment">// 配置视图控制器</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addViewControllers</span><span class="hljs-params">(ViewControllerRegistry registry)</span> &#123;<br>        registry.addViewController(<span class="hljs-string">&quot;/&quot;</span>).setViewName(<span class="hljs-string">&quot;index&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-comment">// 拦截器</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>        <span class="hljs-type">FirstInterceptor</span> <span class="hljs-variable">firstInterceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FirstInterceptor</span>();<br>        registry.addInterceptor(firstInterceptor).addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-comment">// 异常解析器</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configureHandlerExceptionResolvers</span><span class="hljs-params">(List&lt;HandlerExceptionResolver&gt; resolvers)</span> &#123;<br>        <span class="hljs-type">SimpleMappingExceptionResolver</span> <span class="hljs-variable">exceptionResolver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleMappingExceptionResolver</span>();<br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">prop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        prop.setProperty(<span class="hljs-string">&quot;java.lang.ArithmeticException&quot;</span>, <span class="hljs-string">&quot;error&quot;</span>);<br>        exceptionResolver.setExceptionMappings(prop);<br>        exceptionResolver.setExceptionAttribute(<span class="hljs-string">&quot;ex&quot;</span>);<br>        resolvers.add(exceptionResolver);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><h2 id="springmvc执行流程"><a href="#springmvc执行流程" class="headerlink" title="springmvc执行流程"></a>springmvc执行流程</h2><h3 id="springmvc常用组件"><a href="#SpringMVC常用组件" class="headerlink" title="SpringMVC常用组件"></a>SpringMVC常用组件</h3><ul><li>DispatcherServlet：前端控制器，由框架提供</li><li>HandlerMapping：处理器映射器，由框架提供，根据请求的 url、method 等信息查找 Handler，即控制器方法</li><li>Handler：处理器，需要工程师开发，在 DispatcherServlet 的控制下 Handler 对具体的用户请求进行处理</li><li>HandlerAdapter：处理器适配器，由框架提供， 对处理器（控制器方法）进行执行</li><li>ViewResolver：视图解析器，由框架提供，进行视图解析，得到相应的视图</li><li>View：视图，将模型数据通过页面展示给用户</li></ul><br><h3 id="dispatcherservlet初始化过程"><a href="#DispatcherServlet初始化过程" class="headerlink" title="DispatcherServlet初始化过程"></a>DispatcherServlet初始化过程</h3><p>DispatcherServlet 本质上是一个 Servlet，所以天然的遵循 Servlet 的生命周期</p><p>所以宏观上是 Servlet 生命周期来进行调度</p><br><h3 id="springmvc的执行流程"><a href="#SpringMVC的执行流程" class="headerlink" title="SpringMVC的执行流程"></a>SpringMVC的执行流程</h3><ol><li>用户向服务器发送请求，请求被 SpringMVC 前端控制器 DispatcherServlet 捕获</li><li>DispatcherServlet 对请求 URL 进行解析，得到请求资源标识符（URI），判断请求URI 对应的映射是否存在<ul><li>不存在<ul><li>再判断是否配置了mvc:default-servlet-handler</li><li>如果没配置，则控制台报映射查找不到，客户端展示404错误</li><li>如果有配置，则访问目标资源（一般为静态资源，如：JS, CSS, HTML），找不到客户端也会展示404 错误</li></ul></li><li>存在则执行下面的流程</li></ul></li><li>根据该 URI，调用 HandlerMapping 获得该 Handler 配置的所有相关的对象（包括 Handler 对象以及 Handler 对象对应的拦截器），最后以 HandlerExecutionChain 执行链对象的形式返回</li><li>DispatcherServlet 根据获得的 Handler，选择一个合适的 HandlerAdapter </li><li>如果成功获得 HandlerAdapter，此时将开始执行拦截器的 preHandler(…) 方法【正向】</li><li>提取 Request 中的模型数据，填充 Handler 入参，开始执行 Handler（Controller) 方法，处理请求。 在填充 Handler 的入参过程中，根据你的配置，Spring 将帮你做一些额外的工作：<ul><li>HttpMessageConveter： 将请求消息转换成一个对象，将对象转换为指定的响应信息</li><li>数据转换：对请求消息进行数据转换。如String转换成 Integer、Double 等</li><li>数据格式化：对请求消息进行数据格式化。 如将字符串转换成格式化数字或格式化日期等</li><li>数据验证： 验证数据的有效性（长度、格式等），验证结果存储到 BindingResult 或 Error 中</li></ul></li><li>Handler 执行完成后，向 DispatcherServlet 返回一个 ModelAndView 对象</li><li>此时将开始执行拦截器的 postHandle(…) 方法【逆向】</li><li>根据返回的 ModelAndView（此时会判断是否存在异常：如果存在异常，则执行  HandlerExceptionResolver 进行异常处理）选择一个适合的 ViewResolver 进行视图解析，根据 Model 和 View，来渲染视图</li><li>渲染视图完毕执行拦截器的 afterCompletion(…) 方法【逆向】</li><li>将渲染结果返回给客户端</li></ol><br></font>]]></content>
      
      
      <categories>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring</title>
      <link href="/post/6c92115f.html"/>
      <url>/post/6c92115f.html</url>
      
        <content type="html"><![CDATA[<font size="3"><meta name="referrer" content="no-referrer"><h1 id="spring-概述"><a href="#Spring-概述" class="headerlink" title="Spring 概述"></a>Spring 概述</h1><blockquote><p>Spring 是最受欢迎的企业级 Java 应用程序开发框架，数以百万的来自世界各地的开发人员使用 Spring 框架来创建性能好、易于测试、可重用的代码</p><p>Spring 框架是一个开源的 Java 平台，它最初是由 Rod Johnson 编写的，并且于 2003 年 6 月首次在 Apache 2.0 许可下发布</p><p>Spring 是轻量级的框架，其基础版本只有 2 MB 左右的大小</p><p>Spring 框架的核心特性是可以用于开发任何 Java 应用程序，但是在 Java EE 平台上构建 web 应 用程序是需要扩展的，Spring 框架的目标是使 J2EE 开发变得更容易使用，通过启用基于 POJO 编程模型来促进良好的编程实践。</p></blockquote><br><h2 id="spring-家族"><a href="#Spring-家族" class="headerlink" title="Spring 家族"></a>Spring 家族</h2><p>Spring 发展到今天已经形成了一种开发的生态圈，Spring 提供了若干个项目，每个项目用于完成特定的功能</p><p>比较常用的技术有以下：</p><ul><li>Spring Framework：是一个底层的设计层款框架</li><li>Spring Boot：提高开发的速度和效率</li><li>Spring Cloud：分布式开发相关的技术</li></ul><br><h2 id="spring-framework"><a href="#Spring-Framework" class="headerlink" title="Spring Framework"></a>Spring Framework</h2><p>Spring 基础框架，可以视为 Spring 基础设施，基本上任何其他 Spring 项目都是以 Spring Framework 为基础的</p><p><strong>Spring Framework 的特点：</strong></p><ul><li>非侵入式：使用 Spring Framework 开发应用程序时，Spring 对应用程序本身的结构影响非常小。对领域模型可以做到零污染；对功能性组件也只需要使用几个简单的注解进行标记，完全不会破坏原有结构，反而能将组件结构进一步简化。这就使得基于 Spring Framework 开发应用程序时结构清晰、简洁优雅</li><li>控制反转：IOC—— Inversion of Control，翻转资源获取方向。把自己创建资源、向环境索取资源变成环境将资源准备好，我们享受资源注入</li><li>面向切面编程：AOP —— Aspect Oriented Programming，在不修改源代码的基础上增强代码功能</li><li>容器：Spring IOC 是一个容器，因为它包含并且管理组件对象的生命周期。组件享受到了容器化的管理，替程序员屏蔽了组件创建过程中的大量细节，极大的降低了使用门槛，大幅度提高了开发效率，被创建或被管理的对象在 IoC 容器中被称为 Bean</li><li>组件化：Spring 实现了使用简单的组件配置组合成一个复杂的应用。在 Spring 中可以使用 XML 和 Java 注解组合这些对象。这使得我们可以基于一个个功能明确、边界清晰的组件有条不紊的搭建超大型复杂应用系统</li><li>声明式：很多以前需要编写代码才能实现的功能，现在只需要声明需求即可由框架代为实现</li><li>一站式：在 IOC 和 AOP 的基础上可以整合各种企业应用的开源框架和优秀的第三方类库。而且 Spring 旗下的项目已经覆盖了广泛领域，很多方面的功能性需求可以在 Spring Framework 的基础上全部使用 Spring 来实现</li></ul><br><h2 id="spring-framework-五大功能模块"><a href="#Spring-Framework-五大功能模块" class="headerlink" title="Spring Framework 五大功能模块"></a>Spring Framework 五大功能模块</h2><table><thead><tr><th>功能模块</th><th>功能介绍</th></tr></thead><tbody><tr><td>Core Container</td><td>核心容器，在 Spring 环境下使用任何功能都必须基于 IOC 容器</td></tr><tr><td>AOP&amp;Aspects</td><td>面向切面编程</td></tr><tr><td>Testing</td><td>提供了对 junit 或 TestNG 测试框架的整合</td></tr><tr><td>Data Access &#x2F; Integration</td><td>提供了对数据访问 &#x2F; 集成的功能</td></tr><tr><td>Spring MVC</td><td>提供了面向 Web 应用程序的集成功能</td></tr></tbody></table><br><h1 id="ioc"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h1><h2 id="ioc-容器"><a href="#IOC-容器" class="headerlink" title="IOC 容器"></a>IOC 容器</h2><p>IOC：Inversion of Control，翻译过来是反转控制</p><br><p>（1）获取资源的传统方式</p><p>在应用程序中的组件需要获取资源时，传统的方式是组件主动的从容器中获取所需要的资源，在这样的模式下开发人员往往需要知道在具体容器中特定资源的获取方式，增加了学习成本，同时降低了开发效率</p><br><p>（2）反转控制方式获取资源</p><p>反转控制的思想完全颠覆了应用程序组件获取资源的传统方式：反转了资源的获取方向——改由容器主动的将资源推送给需要的组件，开发人员不需要知道容器是如何创建资源对象的，只需要提供接收资源的方式即可，极大的降低了学习成本，提高了开发的效率。这种行为也称为查找的被动形式</p><br><p>（3）DI</p><p>DI：Dependency Injection，翻译过来是依赖注入</p><p>DI 是 IOC 的另一种表述方式：即组件以一些预先定义好的方式（例如：setter 方法）接受来自于容器的资源注入</p><p><strong>因此：IOC 就是一种反转控制的思想， 而 DI 是对 IOC 的一种具体实现</strong></p><br><h3 id="ioc-容器在-spring-中的实现"><a href="#IOC-容器在-Spring-中的实现" class="headerlink" title="IOC 容器在 Spring 中的实现"></a>IOC 容器在 Spring 中的实现</h3><p>Spring 的 IOC 容器就是 IOC 思想的一个落地的产品实现。IOC 容器中管理的组件也叫做 bean</p><p>在创建 bean 之前，首先需要创建 IOC 容器。Spring 提供了 IOC 容器的两种实现方式：</p><p><strong>（1）BeanFactory</strong></p><p>这是 IOC 容器的基本实现，是 Spring 内部使用的接口。面向 Spring 本身，不提供给开发人员使用</p><p><strong>（2）ApplicationContext</strong></p><p>BeanFactory 的子接口，提供了更多高级特性。面向 Spring 的使用者，几乎所有场合都使用 ApplicationContext 而不是底层的 BeanFactory</p><br><p>ApplicationContext 只是一个接口，我们需要使用它的实现类，常见的实现类有：</p><table><thead><tr><th>类型名</th><th>简介</th></tr></thead><tbody><tr><td>ClassPathXmlApplicationContext</td><td>通过读取类路径下的 XML 格式的配置文件创建 IOC 容器对象</td></tr><tr><td>FileSystemXmlApplicationContext</td><td>通过文件系统路径读取 XML 格式的配置文件创建 IOC 容 器对象</td></tr><tr><td>ConfigurableApplicationContext</td><td>ApplicationContext 的子接口，包含一些扩展方法 refresh() 和 close() <br>让 ApplicationContext 具有启动、 关闭和刷新上下文的能力</td></tr><tr><td>WebApplicationContext</td><td>专门为 Web 应用准备，基于 Web 环境创建 IOC 容器对 象，并将对象引入存入 ServletContext 域中</td></tr></tbody></table><br><h2 id="基于-xml-管理-bean"><a href="#基于-XML-管理-Bean" class="headerlink" title="基于 XML 管理 Bean"></a>基于 XML 管理 Bean</h2><p>（1）引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 基于Maven依赖传递性，导入spring-context依赖即可导入当前所需所有jar包 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- junit测试 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><br><p>（2）创建类 HelloWorld</p><p>（3）创建 Spring 的配置文件 [ applicationContext ]，在配置文件中配置 bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    bean：将对象交给IOC容器进行管理</span><br><span class="hljs-comment">    属性：</span><br><span class="hljs-comment">        id：bean 的唯一属性，不能重复</span><br><span class="hljs-comment">        class：设置bean对象所对应的类型</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;helloWorld&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atfirtree.spring.pojo.HelloWorld&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><br><p>（4）创建测试类进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSayHello</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 获取IOC容器</span><br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ioc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br><br>    <span class="hljs-comment">// 获取IOC容器中的bean</span><br>    <span class="hljs-type">HelloWorld</span> <span class="hljs-variable">helloWorld</span> <span class="hljs-operator">=</span> (HelloWorld) ioc.getBean(<span class="hljs-string">&quot;helloWorld&quot;</span>);<br>    helloWorld.sayHello();<br>&#125;<br></code></pre></td></tr></table></figure><br><p><strong>需要注意的是：</strong></p><p>Spring 底层默认通过反射技术调用组件类的无参构造器来创建组件对象，这一点需要注意。如果在需要无参构造器时，没有无参构造器，则会抛出异常</p><br><h3 id="获取-bean"><a href="#获取-Bean" class="headerlink" title="获取 Bean"></a>获取 Bean</h3><p>（1）方式一：根据 id 获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testIOC</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ioc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>    <span class="hljs-type">Student</span> <span class="hljs-variable">studentOne</span> <span class="hljs-operator">=</span> (Student) ioc.getBean(<span class="hljs-string">&quot;studentOne&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;结果：&quot;</span> + studentOne);<br>&#125;<br></code></pre></td></tr></table></figure><br><p>（2）方式二：根据类型获取</p><p>要求 IOC 容器中指定类型的 bean 有且只能有一个，否则会抛出异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testIOC</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ioc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>    <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> ioc.getBean(Student.class);<br>    System.out.println(<span class="hljs-string">&quot;结果：&quot;</span> + student);<br>&#125;<br></code></pre></td></tr></table></figure><br><p>（3）方式三：根据 id 和类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testIOC</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ioc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>    <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> ioc.getBean(<span class="hljs-string">&quot;studentOne&quot;</span>, Student.class);<br>    System.out.println(<span class="hljs-string">&quot;结果：&quot;</span> + student);<br>&#125;<br></code></pre></td></tr></table></figure><p>此时就不用担心 IOC 中可能会有多个同名的 bean</p><p>但是其实实际使用中，一个类型的 bean 基本上只会定义一次，所以我们最常用的获取 bean 的还是方式二</p><br><p>（4）扩展</p><ul><li>如果组件类实现了接口，根据接口类型可以获取 bean 吗？<ul><li>可以，前提是 bean 唯一</li></ul></li><li>如果一个接口有多个实现类，这些实现类都配置了 bean，根据接口类型可以获取 bean 吗<ul><li>不行，因为 bean 不唯一</li></ul></li></ul><p><strong>结论：</strong></p><p>根据类型来获取 bean 时，在满足 bean 唯一性的前提下，其实只是看：</p><ul><li>『对象 instanceof 指定的类型』的返回结果</li></ul><p>只要返回的是 true 就可以认定为和类型匹配，能够获取到</p><br><h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><p><strong>（1）setter注入</strong></p><p>在配置 bean 时为属性赋值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;studentOne&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atfirtree.spring.pojo.Student&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- property标签：通过组件类的setXxx()方法给组件对象设置属性 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- name属性：指定属性名（这个属性名是getXxx()方法定义的，和成员变量无关）--&gt;</span><br>    <span class="hljs-comment">&lt;!-- value属性：指定属性值 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sId&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1001&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;张三&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;23&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;男&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><br><p><strong>（2）构造器注入</strong></p><p>在需要配置的类中添加有参构造器，然后配置 bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;studentThree&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atfirtree.spring.pojo.Student&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1002&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;李四&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;25&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;男&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：</p><p>constructor-arg 标签还有两个属性可以进一步描述构造器参数：</p><p>index 属性：指定参数所在位置的索引（从0开始）</p><p>name属性：指定参数名</p></blockquote><br><h3 id="特殊值处理"><a href="#特殊值处理" class="headerlink" title="特殊值处理"></a>特殊值处理</h3><p>（1）字面量</p><p>使用 value 属性给 bean 的属性赋值时，Spring 会把 value 属性的值默认看做字面量</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;张三&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><br><p>（2）null 值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">null</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><p>需要注意的是：直接在属性的 value 中写 null，会被认为是字符串 null</p><br><p>（3）xml 实体 &#x2F; CDATA 节</p><p>小于号在 XML 文档中用来定义标签的开始，不能随便使用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 解决方案一：使用XML实体来代替 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;expression&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;a <span class="hljs-symbol">&amp;lt;</span> b&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!-- 解决方案二：使用CDATA节 --&gt;</span><br><span class="hljs-comment">&lt;!-- CDATA中的C代表Character，是文本、字符的含义，CDATA就表示纯文本数据 --&gt;</span><br><span class="hljs-comment">&lt;!-- XML解析器看到CDATA节就知道这里是纯文本，就不会当作XML标签或属性来解析 --&gt;</span><br><span class="hljs-comment">&lt;!-- 所以CDATA节中写什么符号都随意 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;expression&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>&lt;![CDATA[a &lt; b]]&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h3 id="为类的属性赋值"><a href="#为类的属性赋值" class="headerlink" title="为类的属性赋值"></a>为类的属性赋值</h3><p><strong>（1）引用外部已声明的 bean</strong></p><p>先将需要赋值的类单独配置，然后通过 “ref” 为 Student 中的 clazz 属性赋值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;clazzOne&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atfirtree.spring.pojo.Clazz&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cId&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1111&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;班级一号&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;studentSix&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atfirtree.spring.pojo.Student&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sId&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1006&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;小红&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;18&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;clazz&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;clazzOne&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><br><p><strong>（2）内部 bean</strong></p><p>在一个 bean 中再声明一个 bean 就是内部 bean</p><p>内部 bean 只能用于给属性赋值，不能在外部通过 IOC 容器获取，因此可以省略 id 属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--通过内部 bean 为类类型的属性赋值--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;studentClazzThree&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atfirtree.spring.pojo.Student&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sId&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2003&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;小紫&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;17&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;clazz&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atfirtree.spring.pojo.Clazz&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cId&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1113&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;班级三号&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><br><p><strong>（3）级联属性值</strong></p><p>通过类.属性名的方式赋值，但是在赋值前一定先引用某个 bean 为属性赋值</p><p>本质上就是通过级联的方式更新属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--通过级联为类类型的属性赋值--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;studentClazzTwo&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atfirtree.spring.pojo.Student&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sId&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2002&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;小兰&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;19&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;clazz&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;clazzOne&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;clazz.cId&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1112&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;clazz.cName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;班级二号&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h3 id="为数组类型属性赋值"><a href="#为数组类型属性赋值" class="headerlink" title="为数组类型属性赋值"></a>为数组类型属性赋值</h3><ul><li>当数组的类型为字面值时：使用 value 直接指定字面值</li><li>当数组的类型为类类型时：使用 ref 直接引入 bean</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>排球<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>足球<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>游泳<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h3 id="为集合类型属性赋值"><a href="#为集合类型属性赋值" class="headerlink" title="为集合类型属性赋值"></a>为集合类型属性赋值</h3><p><strong>（1）list 集合</strong></p><p>跟数组的规则相似，</p><ul><li>当 list 的类型为字面值时：使用 value 直接指定字面值</li><li>当 list 的类型为类类型时：使用 ref 直接引入 bean</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;students&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;studentOne&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ref</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;studentTwo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ref</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;studentThree&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ref</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><p>另外也可以直接引入一个 list 类型的 bean，配置一个 list 的 bean 需要使用 util 的约束</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">util:list</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;studentList&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;studentOne&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;studentTwo&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;studentThree&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">util:list</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;clazzOne&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atfirtree.spring.pojo.Clazz&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cId&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1111&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;班级一号&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;students&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;studentList&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>若为 Set 集合类型属性赋值，只需要将其中的 list 标签改为 set 标签即可</p></blockquote><br><p><strong>（2）map 集合</strong></p><p>第一种方式：直接赋值，根据键值的类型利用 <code>entry</code> 标签赋值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;teacherMap&quot;</span> &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;语文老师&quot;</span> <span class="hljs-attr">value-ref</span>=<span class="hljs-string">&quot;teacherOne&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><br><p>第二种方式：直接引入一个 map 类型的 bean，配置一个 map 的 bean 同样需要使用 util 的约束</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">util:map</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;teacherMap&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;语文老师&quot;</span> <span class="hljs-attr">value-ref</span>=<span class="hljs-string">&quot;teacherOne&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">util:map</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;teacherMap&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;teacherMap&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><br><h3 id="p-命名空间"><a href="#P-命名空间" class="headerlink" title="P 命名空间"></a>P 命名空间</h3><p>引入 p 命名空间后，可以通过以下方式为 bean 的各个属性赋值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;studentSeven&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atfirtree.spring.pojo.Student&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">p:sId</span>=<span class="hljs-string">&quot;1007&quot;</span> <span class="hljs-attr">p:sName</span>=<span class="hljs-string">&quot;小黄&quot;</span> <span class="hljs-attr">p:teacherMap-ref</span>=<span class="hljs-string">&quot;teacherMap&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h3 id="引入外部属性文件"><a href="#引入外部属性文件" class="headerlink" title="引入外部属性文件"></a>引入外部属性文件</h3><p>（1）加入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- MySQL驱动 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 数据源 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.31<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><br><p>（2）创建外部属性文件 jdbc.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">jdbc.driver</span> = <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">jdbc.username</span> = <span class="hljs-string">root</span><br><span class="hljs-attr">jdbc.password</span> = <span class="hljs-string">123456</span><br><span class="hljs-attr">jdbc.url</span> = <span class="hljs-string">jdbc:mysql://127.0.0.1:3306/myssm?serverTimezone=UTC</span><br></code></pre></td></tr></table></figure><br><p>（3）引入属性文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 引入外部属性文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><br><p>（3）配置 bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;druidDataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.user&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h3 id="bean-的作用域"><a href="#bean-的作用域" class="headerlink" title="bean 的作用域"></a>bean 的作用域</h3><p>在 Spring 中可以通过配置 bean 标签的 scope 属性来指定 bean 的作用域范围，各取值含义参加下：</p><table><thead><tr><th>取值</th><th>含义</th><th>创建对象的时机</th></tr></thead><tbody><tr><td>singleton（默认）</td><td>在 IOC 容器中，这个 bean 的对象始终为单实例</td><td>IOC 容器初始化时</td></tr><tr><td>prototype</td><td>这个 bean 在 IOC 容器中有多个实例</td><td>获取 bean 时</td></tr></tbody></table><p>如果是在WebApplicationContext环境下还会有另外两个作用域（但不常用）：</p><table><thead><tr><th>取值</th><th>含义</th></tr></thead><tbody><tr><td>request</td><td>在一个请求范围内有效</td></tr><tr><td>response</td><td>在一个会话范围内有效</td></tr></tbody></table><br><h3 id="bean-的声明周期"><a href="#bean-的声明周期" class="headerlink" title="bean 的声明周期"></a>bean 的声明周期</h3><ul><li>bean 对象创建（调用无参构造器）</li><li>给 bean 对象设置属性</li><li>bean 对象初始化之前操作（由 bean 的后置处理器负责）</li><li>bean 对象初始化（需在配置 bean 时通过<code>init-method</code>指定初始化方法）</li><li>bean 对象初始化之后操作（由bean的后置处理器负责）</li><li>bean 对象就绪可以使用</li><li>bean 对象销毁（需在配置 bean 时提供<code>destory-method</code>指定销毁方法）</li><li>IOC 容器关闭</li></ul><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atfirtree.spring.pojo.User&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;initMethod&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;destroyMethod&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;xiao&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;19&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><br><p>bean 的作用域对生命周期也有影响</p><ul><li>当 bean 是单例时，一旦获取了 IOC 就会直接创建并初始化</li><li>当 bean 是多例时，在使用到（获取 bean）时才创建，且销毁方法不由 IOC 容器管理</li></ul><br><p><strong>bean 的后置处理器</strong></p><p>bean 的后置处理器会在生命周期的初始化前后添加额外的操作，需要实现   BeanPostProcessor 接口， 且配置到 IOC 容器中</p><p>需要注意的是，bean 后置处理器不是单独针对某一个 bean 生效，而是针对 IOC 容器中所有 bean 都会执行</p><p><strong>创建后置处理器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBeanProcessor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanPostProcessor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">postProcessBeforeInitialization</span><span class="hljs-params">(Object bean, String beanName)</span><br>            <span class="hljs-keyword">throws</span> BeansException &#123;<br>        System.out.println(<span class="hljs-string">&quot;☆☆☆&quot;</span> + beanName + <span class="hljs-string">&quot; = &quot;</span> + bean);<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">postProcessAfterInitialization</span><span class="hljs-params">(Object bean, String beanName)</span><br>            <span class="hljs-keyword">throws</span> BeansException &#123;<br>        System.out.println(<span class="hljs-string">&quot;★★★&quot;</span> + beanName + <span class="hljs-string">&quot; = &quot;</span> + bean);<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>在 IOC 容器中配置后置处理器</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xnl">&lt;bean id=&quot;myBeanProcessor&quot; class=&quot;com.atfirtree.spring.process.MyBeanProcessor&quot;&gt;<br>&lt;/bean&gt;<br></code></pre></td></tr></table></figure><br><h3 id="factorybean"><a href="#FactoryBean" class="headerlink" title="FactoryBean"></a>FactoryBean</h3><p>FactoryBean 是 Spring 提供的一种整合第三方框架的常用机制</p><p>和普通的 bean 不同，配置一个 FactoryBean 类型的 bean，在获取 bean 的时候得到的并不是 class 属性中配置的这个类的对象，而是 getObject() 方法的返回值，通过这种机制，Spring 可以帮我们把复杂组件创建的详细过程和繁琐细节都屏蔽起来，只把最简洁的使用界面展示给我们</p><p> 将来我们整合 Mybatis 时，Spring 就是通过 FactoryBean 机制来帮我们创建 SqlSessionFactory 对象的</p><p>FactoryBean 是一个接口，需要创建一个类实现该接口，其中有三个方法：</p><ul><li>getObject()：将一个对象交给 IOC 容器管理</li><li>getObjectType()：设置所提供对象的类型</li><li>isSingleton()：所提供的对象是否是单例</li></ul><p>当把 FactoryBean 的实现类配置为 bean 时，会将当前类中 getObject() 所返回的对象交给 IOC 容器进行管理</p><br><p>（1）创建一个 FactoryBean 的实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserFactoryBean</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FactoryBean</span>&lt;User&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Class&lt;?&gt; getObjectType() &#123;<br>        <span class="hljs-keyword">return</span> User.class;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><p>（2）配置 bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atfirtree.spring.factory.UserFactoryBean&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><br><p>（3）可以通过 FactoryBean 直接获得 User 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FactoryBeanTest</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testFactoryBean</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ioc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;spring-factory.xml&quot;</span>);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> ioc.getBean(User.class);<br><br>        System.out.println(user);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="基于-xml-的自动装配"><a href="#基于-xml-的自动装配" class="headerlink" title="基于 xml 的自动装配"></a>基于 xml 的自动装配</h3><p>自动装配：</p><p>根据指定的策略，在 IOC 容器中匹配某一个 bean，自动为指定的 bean 中所依赖的类类型或接口类型属性赋值</p><p>（1）传统方式设置依赖关系</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userController&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atfirtree.spring.controller.UserController&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userService&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atfirtree.spring.service.impl.UserServiceImpl&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userDao&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atfirtree.spring.dao.impl.UserDaoImpl&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><br><p>（2）使用 bean 标签的 autowire 属性设置自动装配效果</p><p>需要在类中提供 setXxx() 方法</p><p>自动匹配：根据指定的策略，在 IOC 容器中匹配某个 bean，自动为 bean 中的类类型的属性或接口类型的属性赋值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userController&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byName&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atfirtree.spring.controller.UserController&quot;</span> /&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byName&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atfirtree.spring.service.impl.UserServiceImpl&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atfirtree.spring.dao.impl.UserDaoImpl&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>自动装配方式：</p><ul><li><p>no &#x2F; default：表示不装配，此时属性使用默认值</p></li><li><p>byName：将自动装配的属性的属性名，作为 bean 的 id 在 IOC 容器中匹配相对应的 bean 进行赋值</p></li><li><p>byType：根据类型匹配 IOC 容器中的某个兼容类型的 bean，为属性自动赋值</p><ul><li>若在 IOC 中，没有任何一个兼容类型的 bean 能够为属性赋值，则该属性不装配，即值为默认值 null</li><li>若在 IOC 中，有多个兼容类型的 bean 能够为属性赋值，则抛出异常</li></ul></li></ul><br><h2 id="基于注解管理-bean"><a href="#基于注解管理-bean" class="headerlink" title="基于注解管理 bean"></a>基于注解管理 bean</h2><h3 id="标记与扫描"><a href="#标记与扫描" class="headerlink" title="标记与扫描"></a>标记与扫描</h3><p>（1）注解</p><p>和 XML 配置文件一样，注解本身并不能执行，注解本身仅仅只是做一个标记，具体的功能是框架检测到注解标记的位置，然后针对这个位置按照注解标记的功能来执行具体操作</p><p>（2）扫描</p><p>Spring 为了知道程序员在哪些地方标记了什么注解，就需要通过扫描的方式，来进行检测。然后根据注解进行后续操作</p><br><p><strong>标识组件的常用注解</strong></p><blockquote><p>@Component：将类标识为普通组件</p><p>@Controller：将类标识为控制层组件</p><p>@Service：将类标识为业务层组件</p><p>@Repository：将类标识为持久层组件</p></blockquote><p>功能上没有区别，只是给开发人员看的，让我们能够便于分辨组件的作用。虽然它们本质上一样，但是为了代码的可读性，为了程序结构严谨我们肯定不能随便胡乱标记</p><br><p><strong>扫描组件：</strong></p><p>（1）最基本的扫描方式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atfirtree&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br></code></pre></td></tr></table></figure><br><p>（2）指定要排除的组件</p><p>使用 <code>context:exclude-filter</code> 来指定不想要扫描的组件</p><p>type：设置排除或包含的依据</p><ul><li>type&#x3D;”annotation”，根据注解排除，expression 中设置要排除的注解的全类名</li><li>type&#x3D;”assignable”，根据类型排除，expression 中设置要排除的类型的全类名</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atfirtree&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:exclude-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:exclude-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;assignable&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;com.atfirtree.spring.controller.UserController&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br></code></pre></td></tr></table></figure><br><p>（3）仅扫描指定组件</p><p>使用 <code>context:include-filter</code> 来指定想要扫描的组件，其余组件均不被扫描</p><p>需要设置 <code>use-default-filters=&quot;false&quot;</code>，因为默认情况下是全部都扫描的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atfirtree&quot;</span> <span class="hljs-attr">use-default-filters</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:include-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:include-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;assignable&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;com.atfirtree.spring.controller.UserController&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br></code></pre></td></tr></table></figure><br><p>总结：</p><ul><li>在设置 context:include-filter 时，必须设置 <code>use-default-filters=&quot;false&quot;</code></li><li>context:include-filter 和 context:exclude-filter 各自可以存在多个，但是不能同时出现</li></ul><br><p><strong>组件所对应的 bean 的 id</strong></p><p>在我们使用 XML 方式管理 bean 的时候，每个 bean 都有一个唯一标识，便于在其他地方引用。现在使用注解后，每个组件仍然应该有一个唯一标识</p><p>（1）默认情况</p><p>类名首字母小写就是 bean 的 id</p><p>例如：UserController 类对应的 bean 的 id 就是 userController</p><p>（2）自定义 bean 的 id</p><p>可通过标识组件的注解的 value 属性设置自定义的 bean 的 id</p><p>@Service(“userService”)  &#x2F;&#x2F; 默认为 userServiceImpl  public  class  UserServiceImpl  implements  UserService {}</p><br><h3 id="基于注解的自动装配"><a href="#基于注解的自动装配" class="headerlink" title="基于注解的自动装配"></a>基于注解的自动装配</h3><p><strong>@Autowired 注解</strong></p><p>在成员变量上直接标记 @Autowired 注解即可完成自动装配，不需要提供 setXxx() 方法</p><p>以后我们在项目中的正式用法就是这样</p><br><p><strong>@Autowired 可以标识的位置：</strong></p><ul><li>成员变量上</li><li>成员变量的 setXxx 方法上</li><li>为当前成员变量赋值的有参构造上</li></ul><br><p><strong>@Autowired 的工作原理</strong></p><p><img src="https://gitee.com/Greedy_firtree/picture/raw/master/blog/image-20230919171220293.png" alt="image-20230919171220293"></p><ul><li>首先根据所需要的组件类型到 IOC 容器中查找<ul><li>能够找到唯一的 bean：直接执行装配</li><li>如果完全找不到匹配这个类型的 bean：装配失败</li><li>和所需类型匹配的 bean 不止一个<ul><li><p>没有 @Qualifier 注解：根据 @Autowired 标记位置成员变量的变量名作为 bean 的 id 进行匹配</p><ul><li>能够找到：执行装配</li><li>找不到：装配失败</li></ul></li><li><p>使用 @Qualifier 注解：根据 @Qualifier 注解中指定的名称作为 bean 的 id 进行匹配</p><ul><li>能够找到：执行装配</li><li>找不到：装配失败</li></ul></li></ul></li></ul></li></ul><br><p>@Autowired 中有属性 required，默认值为 true</p><ul><li>true：表示必须至少有一个可以装配的 bean，否则抛出异常</li><li>false：表示不强制要求有可以装配的 bean，若没有则为默认值（null）</li></ul><p>但是实际开发时，基本上所有需要装配组件的地方都是必须装配的，用不上这个属性 </p><br><h1 id="aop"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p><strong>代理模式：</strong></p><p>二十三种设计模式中的一种，属于结构型模式</p><p>它的作用就是通过提供一个代理类，让我们在调用目标方法的时候，不再是直接对目标方法进行调用，而是通过代理类间接调用</p><p>让不属于目标方法核心逻辑的代码从目标方法中剥离出来——<strong>解耦</strong></p><p>调用目标方法时先调用代理对象的方法，减少对目标方法的调用和打扰，同时让附加功能能够集中在一起也有利于统一维护</p><ul><li>代理：将非核心逻辑剥离出来以后，封装这些非核心逻辑的类、对象、方法。</li><li>目标：被代理“套用”了非核心逻辑代码的类、对象、方法。</li></ul><p><img src="https://gitee.com/Greedy_firtree/picture/raw/master/blog/image-20230924162659971.png" alt="image-20230924162659971"></p><br><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>特点：一对一、一个代理类就对应一个目标类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CalculatorStaticProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Calculator</span>&#123;<br><br>    <span class="hljs-comment">// 将被代理的目标对象声明为成员变量</span><br>    <span class="hljs-keyword">private</span> CalculatorImpl target;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CalculatorStaticProxy</span><span class="hljs-params">(CalculatorImpl target)</span> &#123;<br>        <span class="hljs-built_in">this</span>.target = target;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;日志，方法：add，参数：&quot;</span> + i + <span class="hljs-string">&quot;, &quot;</span> + j);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> target.add(i, j);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>但是静态代理灵活性太差，需要声明多个静态代理类，会产生大量重复的代码没有实现统一管理</p><br><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>动态：会自动为目标类生成所需要的代理类</p><p><strong>生成代理对象的工厂类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 通过这个类帮助我们动态的生成目标类的代理类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyFactory</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Object target;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ProxyFactory</span><span class="hljs-params">(Object target)</span> &#123;<br>        <span class="hljs-built_in">this</span>.target = target;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getProxy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * ClassLoader loader：指定加载动态生成的代理类的类加载器</span><br><span class="hljs-comment">         * Class[] interfaces：获取目标对象实现的所有的接口的class对象</span><br><span class="hljs-comment">         * InvocationHandler：设置代理类中的抽象方法该如何重写</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> ProxyFactory.class.getClassLoader();<br>        Class&lt;?&gt;[] interfaces = target.getClass().getInterfaces();<br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvocationHandler</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                System.out.println(<span class="hljs-string">&quot;日志，方法：&quot;</span> + method.getName() + <span class="hljs-string">&quot;, &quot;</span> + Arrays.toString(args));<br>                <span class="hljs-comment">/**</span><br><span class="hljs-comment">                 * proxy：表示代理对象</span><br><span class="hljs-comment">                 * method：表示要执行的方法</span><br><span class="hljs-comment">                 * args：要执行的方法的参数列表</span><br><span class="hljs-comment">                 */</span><br>                <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> method.invoke(target, args);<br>                <span class="hljs-keyword">return</span> result;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-keyword">return</span> Proxy.newProxyInstance(classLoader, interfaces, h);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><p><strong>测试类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testProxy</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ProxyFactory</span> <span class="hljs-variable">proxyFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProxyFactory</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CalculatorImpl</span>());<br>    <span class="hljs-type">Calculator</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> (Calculator) proxyFactory.getProxy();<br>    proxy.add(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>);<br>&#125;<br></code></pre></td></tr></table></figure><br><ul><li><p>jdk 动态代理，要求必须有接口，最终生成的代理类和目标类实现相同的接口，生成在<code>com.sun.proxy</code>包下，类名为<code>$proxy2</code></p></li><li><p>cglib 动态代理，最终生成的代理类会继承目标类，并且和目标类再相同的包下</p></li></ul><br><h2 id="aop-概念"><a href="#AOP-概念" class="headerlink" title="AOP 概念"></a>AOP 概念</h2><p>AOP（Aspect Oriented Programming）是一种设计思想，是软件设计领域中的面向切面编程，它是面向对象编程的一种补充和完善，它以通过预编译方式和运行期动态代理方式实现在不修改源代码的情况下给程序动态统一添加额外功能的一种技术</p><br><h3 id="相关术语"><a href="#相关术语" class="headerlink" title="相关术语"></a>相关术语</h3><p><strong>（1）横切关注点</strong></p><p>从每个方法中抽取出来的同一类非核心业务。在同一个项目中，我们可以使用多个横切关注点对相关方法进行多个不同方面的增强，有十个附加功能，就有十个横切关注点</p><br><p><strong>（2）通知</strong></p><p>每一个横切关注点上要做的事情都需要写一个方法来实现，这样的方法就叫通知方法</p><ul><li>前置通知：在被代理的目标方法前执行</li><li>返回通知：在被代理的目标方法成功结束后执行</li><li>异常通知：在被代理的目标方法异常结束后执行</li><li>后置通知：在被代理的目标方法最终结束后执行</li><li>环绕通知：使用try…catch…finally 结构围绕整个被代理的目标方法，包括上面四种通知对应的所有位置</li></ul><br><p><strong>（3）切面：封装通知方法的类</strong></p><p><strong>（4）目标：被代理的目标对象</strong></p><p><strong>（5）代理：向目标对象应用通知之后创建的代理对象</strong></p><p><strong>（6）连接点：就是抽取横切关注点的位置</strong></p><p><strong>（7）切入点</strong></p><p>定位连接点的方式</p><p>每个类的方法中都包含多个连接点，所以连接点是类中客观存在的事物（从逻辑上来说）</p><p>Spring 的 AOP 技术可以通过切入点定位到特定的连接点。 切点通过 org.springframework.aop.Pointcut 接口进行描述，它使用类和方法作为连接点的查询条件</p><br><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li>简化代码：把方法中固定位置的重复的代码抽取出来，让被抽取的方法更专注于自己的核心功能， 提高内聚性</li><li>代码增强：把特定的功能封装到切面类中，看哪里有需要，就往上套，被套用了切面逻辑的方法就被切面给增强了</li></ul><br><h2 id="基于注解的aop"><a href="#基于注解的AOP" class="headerlink" title="基于注解的AOP"></a>基于注解的AOP</h2><p><img src="https://gitee.com/Greedy_firtree/picture/raw/master/blog/image-20230922182105940.png" alt="image-20230922182105940"></p><ul><li>动态代理：JDK 原生的实现方式，需要被代理的目标类必须实现接口。因为这个技术要求代理对象和目标对象实现同样的接口</li><li>cglib：通过继承被代理的目标类实现代理，所以不需要目标类实现接口</li><li>AspectJ：本质上是静态代理，将代理逻辑 “织入” 被代理的目标类编译得到的字节码文件，所以最终效果是动态的。weaver 就是织入器。Spring 只是借用了 AspectJ 中的注解</li></ul><br><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a><strong>添加依赖</strong></h3><p>在 IOC 所需要依赖的基础上添加以下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- spring-aspects会帮我们传递过来aspectjweaver --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aspects<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h3 id="创建切面类并配置"><a href="#创建切面类并配置" class="headerlink" title="创建切面类并配置"></a>创建切面类并配置</h3><p>关于 Spring 配置文件</p><ul><li>切面类和目标类都需要交给 IOC 容器来管理</li><li>切面类必须通过 @Aspect 标识为一个切面</li><li>在 spring 的配置文件中开启基于注解的 AOP 功能</li></ul><p><strong>aop-annotation.xml 配置类</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--扫描IOC基于注释的装配--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atfirtree.spring.aop.annotation&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!--开启基于注解的AOP功能--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span> /&gt;</span><br></code></pre></td></tr></table></figure><p><strong>LoggerAspect 切面类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span> <span class="hljs-comment">// 通过注释配置IOC</span><br><span class="hljs-meta">@Aspect</span> <span class="hljs-comment">// 将当前组件标识为切面</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoggerAspect</span> &#123;<br><br>    <span class="hljs-comment">// 切入点的复用，声明一个公共的切入点表达式</span><br>    <span class="hljs-meta">@Pointcut(&quot;execution(* com.atfirtree.spring.aop.annotation.Calculator.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pointCut</span><span class="hljs-params">()</span> &#123;&#125;<br><br><br>    <span class="hljs-meta">@Before(&quot;pointCut()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeAdviceMethod</span><span class="hljs-params">(JoinPoint joinPoint)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;目标函数之前执行的前置通知&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@After(&quot;pointCut()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterAdviceMethod</span><span class="hljs-params">(JoinPoint joinPoint)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;目标函数之后执行的后置通知&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// returning属性：设置接受目标对象方法返回值的参数名</span><br>    <span class="hljs-meta">@AfterReturning(value = &quot;pointCut()&quot;, returning = &quot;result&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterReturningAdviceMethod</span><span class="hljs-params">(JoinPoint joinPoint, Object result)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;目标函数之后执行的返回通知&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;结果为：&quot;</span> + result);<br><br>    &#125;<br><br>    <span class="hljs-comment">// throwing属性：设置接受目标对象方法出现的异常的参数名</span><br>    <span class="hljs-meta">@AfterThrowing(value = &quot;pointCut()&quot;, throwing = &quot;ex&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterThrowingAdviceMethod</span><span class="hljs-params">(JoinPoint joinPoint, Throwable ex)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;目标函数异常执行的异常通知&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;异常为：&quot;</span> + ex);<br>    &#125;<br><br>    <span class="hljs-comment">// 一定要将环绕通知的返回类型与目标方法的返回类型一致</span><br>    <span class="hljs-meta">@Around(value = &quot;pointCut()&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">aroundAdviceMethod</span><span class="hljs-params">(ProceedingJoinPoint joinPoint)</span> &#123;<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>AOPTest 测试类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AOPTest</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAOPByAnnotation</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ioc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;aop-annotation.xml&quot;</span>);<br>        <span class="hljs-comment">// 使用目标类实现的接口，CalculatorImpl.class不可以</span><br>        <span class="hljs-type">Calculator</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> ioc.getBean(Calculator.class);<br>        bean.div(<span class="hljs-number">12</span>, <span class="hljs-number">4</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="各种通知"><a href="#各种通知" class="headerlink" title="各种通知"></a>各种通知</h3><p>在切面中，需要通过指定的注解将方法标识为通知方法</p><ul><li>@Before：前置通知，在目标方法执行前执行</li><li>@After：后置通知，在程序最终结束后执行，相当于写在 finally 块中</li><li>@AfterReturning：返回通知，是程序正常结束后执行</li><li>@AfterThrowing：异常通知，当程序出现异常时执行</li><li>@Around：环绕通知</li></ul><br><h3 id="切入点表达式"><a href="#切入点表达式" class="headerlink" title="切入点表达式"></a>切入点表达式</h3><p>切入点表达式，设置在标识通知的注释的 value 属性中</p><p><code>&quot;execution(* com.atfirtree.spring.aop.annotation.Calculator.*(..))&quot;</code></p><ul><li>第一个*表示任意的访问修饰符和返回类型</li><li>第二个*表示指定类中的任意方法</li><li>..表示参数列表是可变的</li></ul><p><img src="https://gitee.com/Greedy_firtree/picture/raw/master/blog/image-20230922203833216.png" alt="image-20230922203833216"></p><p><strong>切入点表达式复用</strong></p><p>声明一个公共的切入点表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Pointcut(&quot;execution(* com.atfirtree.spring.aop.annotation.Calculator.*(..))&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pointCut</span><span class="hljs-params">()</span> &#123;&#125;  <span class="hljs-comment">// 方法的参数列表和主体都为空</span><br></code></pre></td></tr></table></figure><p>然后就可以通过方法的名字直接使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Before(&quot;pointCut()&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeAdviceMethod</span><span class="hljs-params">(JoinPoint joinPoint)</span> &#123;<br><span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="获取通知的相关信息"><a href="#获取通知的相关信息" class="headerlink" title="获取通知的相关信息"></a>获取通知的相关信息</h3><p><strong>（1）获取连接点的信息</strong></p><p>在通知方法的参数中设置  JoinPoint 类型的形参</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Before(&quot;pointCut()&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeAdviceMethod</span><span class="hljs-params">(JoinPoint joinPoint)</span> &#123;<br>    <span class="hljs-comment">// 参数列表中的 joinPoint 来获取连接点信息</span><br><br>    <span class="hljs-comment">// getSignature 获取方法的签名信息</span><br>    <span class="hljs-type">Signature</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> joinPoint.getSignature();<br>    <span class="hljs-comment">// getArgs 获取方法的实参信息</span><br>    Object[] args = joinPoint.getArgs();<br>    System.out.println(<span class="hljs-string">&quot;目标函数之前执行的前置通知为：&quot;</span>+signature.getName()<br>            +<span class="hljs-string">&quot; -- 参数为：&quot;</span> + Arrays.toString(args));<br>&#125;<br></code></pre></td></tr></table></figure><br><p><strong>（2）获取目标方法的返回值</strong></p><p>@AfterReturning 中的 returning 属性：设置接受目标对象方法返回值的参数名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AfterReturning(value = &quot;pointCut()&quot;, returning = &quot;result&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterReturningAdviceMethod</span><span class="hljs-params">(JoinPoint joinPoint, Object result)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;结果为：&quot;</span> + result);<br>&#125;<br></code></pre></td></tr></table></figure><br><p><strong>（3）获取目标方法的异常</strong></p><p>@AfterThrowing 的 throwing 属性：设置接受目标对象方法出现的异常的参数名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AfterThrowing(value = &quot;pointCut()&quot;, throwing = &quot;ex&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterThrowingAdviceMethod</span><span class="hljs-params">(JoinPoint joinPoint, Throwable ex)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;异常为：&quot;</span> + ex);<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="环绕通知"><a href="#环绕通知" class="headerlink" title="环绕通知"></a>环绕通知</h3><p>相当于将四种通知结合在一起，有点像手写动态代理，需要特别注意的是</p><ul><li>joinPoint.proceed() 表示目标对象方法的执行位置</li><li>一定要将环绕通知的返回类型与目标方法的返回类型一致</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Around(value = &quot;pointCut()&quot;)</span>  <span class="hljs-comment">// 一定要将环绕通知的返回类型与目标方法的返回类型一致</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">aroundAdviceMethod</span><span class="hljs-params">(ProceedingJoinPoint joinPoint)</span> &#123;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;环绕通知 --&gt; 前置通知&quot;</span>);<br><br>        <span class="hljs-comment">// 目标对象方法的执行</span><br>        result = joinPoint.proceed();<br>        System.out.println(<span class="hljs-string">&quot;环绕通知 --&gt; 返回通知&quot;</span>);<br><br>    &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>        e.printStackTrace();<br>        System.out.println(<span class="hljs-string">&quot;环绕通知 --&gt; 异常通知&quot;</span>);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;环绕通知 --&gt; 后置通知&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="切面的优先级"><a href="#切面的优先级" class="headerlink" title="切面的优先级"></a>切面的优先级</h3><ul><li>可以通过 @Order 注解的 value 属性设置优先级，默认为 Integer 的最大值</li><li>@Order 注解的 value 属性越小，优先级越高</li></ul><p><img src="https://gitee.com/Greedy_firtree/picture/raw/master/blog/image-20230922205012827.png" alt="image-20230922205012827"></p><br><h2 id="基于xml的aop"><a href="#基于XML的AOP" class="headerlink" title="基于XML的AOP"></a>基于XML的AOP</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--设置一个公共的切入点表达式--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pointCut&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.atfirtree.spring.aop.xml.CalculatorImpl.*(..))&quot;</span>/&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--将IOC容器中的某个bean设置为切面--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;loggerAspect&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;beforeAdviceMethod&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointCut&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:after</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;afterAdviceMethod&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointCut&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:after-returning</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;afterReturningAdviceMethod&quot;</span> <span class="hljs-attr">returning</span>=<span class="hljs-string">&quot;result&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointCut&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:after-throwing</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;afterThrowingAdviceMethod&quot;</span> <span class="hljs-attr">throwing</span>=<span class="hljs-string">&quot;ex&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointCut&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:around</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;aroundAdviceMethod&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointCut&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h1 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h1><h2 id="jdbctemplate"><a href="#JdbcTemplate" class="headerlink" title="JdbcTemplate"></a>JdbcTemplate</h2><p>Spring 框架对 JDBC 进行封装，使用 JdbcTemplate 方便实现对数据库操作</p><br><p><strong>（1）加入依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 基于Maven依赖传递性，导入spring-context依赖即可导入当前所需所有jar包 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Spring 持久化层支持jar包 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- Spring 在执行持久化层操作、与持久化层技术进行整合过程中，需要使用orm、jdbc、tx三个</span><br><span class="hljs-comment">    jar包 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 导入 orm 包就可以通过 Maven 的依赖传递性把其他两个也导入 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-orm<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Spring 测试相关 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- junit测试 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- MySQL驱动 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 数据源 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.31<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><br><p><strong>（2）创建 jdbc.properties</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">jdbc.driver</span> = <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">jdbc.username</span> = <span class="hljs-string">root</span><br><span class="hljs-attr">jdbc.password</span> = <span class="hljs-string">123456</span><br><span class="hljs-attr">jdbc.url</span> = <span class="hljs-string">jdbc:mysql://127.0.0.1:3306/myssm?serverTimezone=UTC</span><br></code></pre></td></tr></table></figure><br><p><strong>（3）配置 Spring 的配置文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--引入数据库参数--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><br><p><strong>（3）测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 指定当前测试类在spring的测试环境中执行，此时可以通过注入的方式直接获取IOC容器中的bean</span><br><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="hljs-comment">// 设置spring测试环境的配置文件</span><br><span class="hljs-meta">@ContextConfiguration(&quot;classpath:spring-jdbc.xml&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdbcTemplateTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JdbcTemplate jdbcTemplate;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsert</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into t_user values(null, ?, ?, ?, ?, ?)&quot;</span>;<br>        jdbcTemplate.update(sql, <span class="hljs-string">&quot;xiao&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>, <span class="hljs-number">25</span>, <span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-string">&quot;123456@qq.com&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetUserById</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from t_user where id = ?&quot;</span>;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> jdbcTemplate.queryForObject(sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanPropertyRowMapper</span>&lt;&gt;(User.class), <span class="hljs-number">2</span>);<br>        System.out.println(user);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetAllUsers</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from t_user&quot;</span>;<br>        List&lt;User&gt; list = jdbcTemplate.query(sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanPropertyRowMapper</span>&lt;&gt;(User.class));<br>        list.forEach(System.out::println);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetCount</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select count(*) from t_user&quot;</span>;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> jdbcTemplate.queryForObject(sql, Integer.class);<br>        System.out.println(count);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><h2 id="声明式事务概念"><a href="#声明式事务概念" class="headerlink" title="声明式事务概念"></a>声明式事务概念</h2><p><strong>编程式事务：事务功能的相关操作全部通过自己编写代码来实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> ...;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// 开启事务：关闭事务的自动提交</span><br>conn.setAutoCommit(<span class="hljs-literal">false</span>);<br><span class="hljs-comment">// 核心操作</span><br><span class="hljs-comment">// 提交事务</span><br>conn.commit();<br>&#125; <span class="hljs-keyword">catch</span>(Exception e) &#123;<br><span class="hljs-comment">// 回滚事务</span><br>conn.rollBack();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-comment">// 释放数据库连接</span><br>conn.close();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>细节没有被屏蔽：具体操作过程中，所有细节都需要程序员自己来完成，比较繁琐</li><li>代码复用性不高：如果没有有效抽取出来，每次实现功能都需要自己编写代码，代码就没有得到复用</li></ul><br><p><strong>声明式事务</strong></p><p>通过框架将固定模式的代码抽取出来，进行相关的封装。 封装起来后，我们只需要在配置文件中进行简单的配置即可完成操作</p><ul><li>好处1：提高开发效率</li><li>好处2：消除了冗余的代码</li><li>好处3：框架会综合考虑相关领域中在实际开发环境下有可能遇到的各种问题，进行了健壮性、性能等各个方面的优化</li></ul><br><h2 id="基于注解的声明式事务"><a href="#基于注解的声明式事务" class="headerlink" title="基于注解的声明式事务"></a>基于注解的声明式事务</h2><h3 id="加入依赖"><a href="#加入依赖" class="headerlink" title="加入依赖"></a>加入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 基于Maven依赖传递性，导入spring-context依赖即可导入当前所需所有jar包 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- Spring 持久化层支持jar包 --&gt;</span><br><span class="hljs-comment">&lt;!-- Spring 在执行持久化层操作、与持久化层技术进行整合过程中，需要使用orm、jdbc、tx三个</span><br><span class="hljs-comment">jar包 --&gt;</span><br><span class="hljs-comment">&lt;!-- 导入 orm 包就可以通过 Maven 的依赖传递性把其他两个也导入 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-orm<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- Spring 测试相关 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- junit测试 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- MySQL驱动 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 数据源 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.31<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h3 id="创建组件"><a href="#创建组件" class="headerlink" title="创建组件"></a>创建组件</h3><p><strong>BookController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> BookService bookService;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buyBook</span><span class="hljs-params">(Integer bookId, Integer userId)</span>&#123;<br>        bookService.buyBook(bookId, userId);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><p><strong>BookService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookService</span> &#123;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">buyBook</span><span class="hljs-params">(Integer bookId, Integer userId)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><p><strong>BookServiceImp</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> BookDao bookDao;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buyBook</span><span class="hljs-params">(Integer bookId, Integer userId)</span> &#123;<br>        <span class="hljs-comment">//查询图书的价格</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> bookDao.getPriceByBookId(bookId);<br>        <span class="hljs-comment">//更新图书的库存</span><br>        bookDao.updateStock(bookId);<br>        <span class="hljs-comment">//更新用户的余额</span><br>        bookDao.updateBalance(userId, price);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><p><strong>BookDao</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookDao</span> &#123;<br>    Integer <span class="hljs-title function_">getPriceByBookId</span><span class="hljs-params">(Integer bookId)</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateStock</span><span class="hljs-params">(Integer bookId)</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateBalance</span><span class="hljs-params">(Integer userId, Integer price)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><p><strong>BookDaoImpl</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    JdbcTemplate jdbcTemplate;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getPriceByBookId</span><span class="hljs-params">(Integer bookId)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select price from t_book where book_id = ?&quot;</span>;<br>        <span class="hljs-keyword">return</span> jdbcTemplate.queryForObject(sql, Integer.class, bookId);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateStock</span><span class="hljs-params">(Integer bookId)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update t_book set stock = stock - 1 where book_id = ?&quot;</span>;<br>        jdbcTemplate.update(sql, bookId);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateBalance</span><span class="hljs-params">(Integer userId, Integer price)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update t_user set balance = balance - ? where user_id = ?&quot;</span>;<br>        jdbcTemplate.update(sql, price, userId);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><p><strong>TxByAnnotationTest</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="hljs-meta">@ContextConfiguration(&quot;classpath:tx-annotation.xml&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TxByAnnotationTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> BookController bookController;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testBuyBook</span><span class="hljs-params">()</span>&#123;<br>        bookController.buyBook(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时我们可以发现，当用户的余额不足以买下一本书时就会导致错误，此时我们应该添加事务来管理</p><br><h3 id="添加事务"><a href="#添加事务" class="headerlink" title="添加事务"></a>添加事务</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置事务管理器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--开启事务的注解驱动--&gt;</span><br><span class="hljs-comment">&lt;!--将使用@Transactional注解所标识的方法就类中所有的方法使用事务进行管理--&gt;</span><br><span class="hljs-comment">&lt;!--注意：导入的名称空间需要 tx 结尾的那个--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:annotation-driven</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>PS：导入的名称空间需要 tx 结尾的那个</p><p><img src="https://gitee.com/Greedy_firtree/picture/raw/master/blog/image-20230924163751627.png" alt="image-20230924163751627"></p><br><p>因为 service 层表示业务逻辑层，一个方法表示一个完成的功能，因此处理事务一般在 service 层处理，在 BookServiceImpl 的 buybook() 添加注解 @Transactiona</p><br><p><strong>@Transactional注解标识的位置</strong></p><ul><li>@Transactional 标识在方法上，只会影响该方法</li><li>@Transactional 标识的类上，则会影响类中所有的方法</li></ul><br><h4 id="事务属性只读"><a href="#事务属性：只读" class="headerlink" title="事务属性：只读"></a>事务属性：只读</h4><p>对一个查询操作来说，如果我们把它设置成只读，就能够明确告诉数据库，这个操作不涉及写操作。这样数据库就能够针对查询操作来进行优化，我们一般只在仅有查询操作的方法中设置成只读</p><p><code>@Transactional(readOnly = true)</code></p><p><strong>PS：对增删改操作设置只读会抛出异常</strong></p><br><h4 id="事务属性超时"><a href="#事务属性：超时" class="headerlink" title="事务属性：超时"></a>事务属性：超时</h4><p>事务在执行过程中，有可能因为遇到某些问题，导致程序卡住，从而长时间占用数据库资源。而长时间占用资源，大概率是因为程序运行出现了问题</p><p>此时这个很可能出问题的程序应该被回滚，撤销它已做的操作，事务结束，把资源让出来，让其他正常程序可以执行</p><p><code>@Transactional(timeout = 3)</code></p><br><h4 id="事务属性回滚策略"><a href="#事务属性：回滚策略" class="headerlink" title="事务属性：回滚策略"></a>事务属性：回滚策略</h4><p>声明式事务默认只针对运行时异常回滚，编译时异常不回滚</p><p>可以通过 @Transactional 中相关属性设置回滚策略</p><ul><li>rollbackFor 属性：需要设置一个 Class 类型的对象</li><li>rollbackForClassName属性：需要设置一个字符串类型的全类名</li><li>noRollbackFor 属性：需要设置一个 Class 类型的对象</li><li>rollbackFor 属性：需要设置一个字符串类型的全类名</li></ul><p><code>@Transactional(noRollbackFor = ArithmeticException.class)</code></p><br><h4 id="事务属性事务隔离级别"><a href="#事务属性：事务隔离级别" class="headerlink" title="事务属性：事务隔离级别"></a>事务属性：事务隔离级别</h4><p>数据库系统必须具有隔离并发运行各个事务的能力，使它们不会相互影响，避免各种并发问题。一个事务与其他事务隔离的程度称为隔离级别。SQL 标准中规定了多种事务隔离级别，不同隔离级别对应不同的干扰程度，隔离级别越高，数据一致性就越好，但并发性越弱</p><p><strong>使用方式</strong></p><p><code>@Transactional(isolation = Isolation.DEFAULT)</code></p><br><p>隔离级别一共有四种：</p><ul><li>读未提交：READ UNCOMMITTED、允许 Transaction01 读取 Transaction02 未提交的修改</li><li>读已提交：READ COMMITTED、 要求 Transaction01 只能读取 Transaction02 已提交的修改</li><li>可重复读：REPEATABLE READ、确保 Transaction01 可以多次从一个字段中读取到相同的值，即 Transaction01 执行期间禁止其它事务对这个字段进行更新</li><li>串行化：SERIALIZABLE、确保 Transaction01 可以多次从一个表中读取到相同的行，在 Transaction01 执行期间，禁止其它事务对这个表进行添加、更新、删除操作。可以避免任何并发问题，但性能十分低下。 各个隔离级别解决并发问题的能力见下表：</li></ul><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>READ UNCOMMITTED</td><td>有</td><td>有</td><td>有</td></tr><tr><td>READ COMMITTED</td><td>无</td><td>有</td><td>有</td></tr><tr><td>REPEATABLE READ</td><td>无</td><td>无</td><td>有</td></tr><tr><td>SERIALIZABLE</td><td>无</td><td>无</td><td>无</td></tr></tbody></table><br><h4 id="事务属性事务传播行为"><a href="#事务属性：事务传播行为" class="headerlink" title="事务属性：事务传播行为"></a>事务属性：事务传播行为</h4><p>当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。例如：方法可能继续在现有事务中运行，也可能开启一个新事务，并在自己的事务中运行</p><p>可以通过 @Transactional 中的 propagation 属性设置事务传播行为</p><br><p>比如当同时购买两本书时，修改 BookServiceImpl 中 buyBook() 的注解 @Transactional 的 propagation 属性</p><p>（1）@Transactional(propagation &#x3D; Propagation.REQUIRED)，默认情况，表示如果当前线程上有已经开启的事务可用，那么就在这个事务中运行。经过观察，购买图书的方法 buyBook() 在 checkout() 中被调用，checkout() 上有事务注解，因此在此事务中执行。即只要有一本书买不 了，就都买不了</p><p>（2）@Transactional(propagation &#x3D; Propagation.REQUIRES_NEW)，表示不管当前线程上是否有已经开启的事务，都要开启新事务。同样的场景，能买几本就买几本</p><br><h3 id="基于xml的声明式事务"><a href="#基于XML的声明式事务" class="headerlink" title="基于XML的声明式事务"></a>基于XML的声明式事务</h3><p>基于 xml 实现的声明式事务，必须引入 aspectJ 的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置事务管理器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--基于 xml 实现的声明式事务--&gt;</span><br><span class="hljs-comment">&lt;!--配置事务通知和切入点表达式--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;tx&quot;</span> <span class="hljs-attr">pointcut</span>=<span class="hljs-string">&quot;execution(* com.atfirtree.spring.service.impl.*.*(..))&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br><br><br><span class="hljs-comment">&lt;!--配置事务通知--&gt;</span><br><span class="hljs-comment">&lt;!-- id属性：给事务通知标签设置唯一标识，便于引用 --&gt;</span><br><span class="hljs-comment">&lt;!-- transaction-manager属性：关联事务管理器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tx&quot;</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- tx:method标签：配置具体的事务方法 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- name属性：指定方法名，可以使用星号代表多个字符 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;get*&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;save*&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">rollback-for</span>=<span class="hljs-string">&quot;java.lang.Exception&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRES_NEW&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>read-only 属性：设置只读属性</li><li>rollback-for 属性：设置回滚的异常</li><li>no-rollback-for 属性：设置不回滚的异常</li><li>isolation 属性：设置事务的隔离级别</li><li>timeout 属性：设置事务的超时属性</li><li>propagation 属性：设置事务的传播行为</li></ul><br></font>]]></content>
      
      
      <categories>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis</title>
      <link href="/post/1bff3c65.html"/>
      <url>/post/1bff3c65.html</url>
      
        <content type="html"><![CDATA[<font size="2"><meta name="referrer" content="no-referrer"><p>MyBits 是一个基于 java 的持久层框架，封装了 JDBC，作用是连接数据库</p><br><p><strong>特性：</strong></p><ul><li>MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架</li><li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集</li><li>MyBatis 可以使用简单的 XML 或注解用于配置和原始映射，将接口和 Java 的 POJO 映射成数据库中的记录</li><li>MyBatis 是一个 半自动的 ORM（Object Relation Mapping）框架</li></ul><br><p><strong>与其他持久化层技术的比较：</strong></p><ul><li>JDBC<ul><li>SQL 夹杂在 Java 代码中耦合度高，导致硬编码内伤</li><li>维护不易且实际开发需求中 SQL 有变化，频繁修改的情况多见</li><li>代码冗长，开发效率低</li></ul></li><li>Hibernate 和 JPA（是全自动的 持久化框架）<ul><li>操作简便，开发效率高</li><li>程序中的长难复杂 SQL 需要绕过框架</li><li>内部自动生产的 SQL，不容易做特殊优化</li><li>基于全映射的全自动框架，大量字段的 POJO 进行部分映射时比较困难</li><li>反射操作太多，导致数据库性能下降</li></ul></li><li>MyBatis 轻量级，性能出色<ul><li>SQL 和 Java 编码分开，功能边界清晰</li><li>Java 代码专注业务、SQL语句专注数据</li><li>开发效率稍逊于 HIbernate，但是完全能够接受</li></ul></li></ul><br><h1 id="搭建mybatis"><a href="#搭建MyBatis" class="headerlink" title="搭建MyBatis"></a>搭建MyBatis</h1><p>MySQL不同版本的注意事项</p><p>1、驱动类driver-class-name</p><ul><li><p>MySQL 5版本使用 jdbc5 驱动，驱动类使用：com.mysql.jdbc.Driver</p></li><li><p>MySQL 8版本使用 jdbc8 驱动，驱动类使用：com.mysql.cj.jdbc.Driver</p></li></ul><p>2、连接地址url</p><ul><li>MySQL 5版本的 url： jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;ssm</li><li>MySQL 8版本的url： jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;ssm?serverTimezone&#x3D;UTC</li></ul><br><p>（1）修改 Maven 工程的打包方式为 jar</p><p>（2）引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Mybatis核心 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- junit测试 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- MySQL驱动 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h2 id="创建-mybatis-的核心配置文件"><a href="#创建-MyBatis-的核心配置文件" class="headerlink" title="创建 MyBatis 的核心配置文件"></a>创建 MyBatis 的核心配置文件</h2><p>习惯上命名为  mybatis-config.xml</p><p>将来整合Spring 之后，这个配置文件可以省略，核心配置文件主要用于配置连接数据库的环境以及 MyBatis 的全局配置信息</p><p>核心配置文件存放的位置是 src&#x2F;main&#x2F;resources 目录下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--设置连接数据库的环境--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br><br>            <span class="hljs-comment">&lt;!-- 数据源，连接数据库  --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/myssm?</span></span><br><span class="hljs-string"><span class="hljs-tag">serverTimezone=UTC&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--引入映射文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mappers/UserMapper.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h2 id="创建-mapper-接口"><a href="#创建-Mapper-接口" class="headerlink" title="创建 Mapper 接口"></a>创建 Mapper 接口</h2><p>MyBatis 中的 mapper 接口相当于以前的 dao</p><p>但是区别在于，mapper 仅仅是接口，我们不需要提供实现类，会通过”代理模式“创建一个实例，并调用相关方法</p><br><p><strong>UserMapper.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 添加数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 是否成功</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">insertUser</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><h2 id="创建-mybatis-的映射文件"><a href="#创建-MyBatis-的映射文件" class="headerlink" title="创建 MyBatis 的映射文件"></a>创建 MyBatis 的映射文件</h2><p><strong>（1）映射文件的命名规则：</strong></p><p>表所对应的实体类的类名 + Mapper.xml</p><p>例如：表 t_user，映射的实体类为 User，所对应的映射文件为 UserMapper.xml</p><p>因此一个映射文件对应一个实体类，对应一张表的操作</p><p>MyBatis 映射文件用于编写 SQL，访问以及操作表中的数据</p><p>MyBatis 映射文件存放的位置是 src&#x2F;main&#x2F;resources&#x2F;mappers 目录下</p><br><p><strong>（2）MyBatis中可以面向接口操作数据，要保证两个一致：</strong></p><ul><li>mapper 接口的全类名和映射文件的命名空间（namespace）保持一致</li><li>mapper 接口中方法的方法名和映射文件中编写 SQL 的标签的 id 属性保持一致</li></ul><br><p><strong>UserMapper.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.atfirtree.mybatis.mapper.UserMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--int insertUser();--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertUser&quot;</span>&gt;</span><br>        insert into t_user values(null, &#x27;admin&#x27;, &#x27;123456&#x27;, 23, &#x27;男&#x27;, &#x27;12345@qq.com&#x27;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h2 id="通过-junit-测试"><a href="#通过-junit-测试" class="headerlink" title="通过 junit 测试"></a>通过 junit 测试</h2><p><strong>MyBatisTest.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBatisTest</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsertUser</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 读取 MyBatis 的核心配置文件</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>);<br><br>        <span class="hljs-comment">// 创建SqlSessionFactoryBuilder对象</span><br>        <span class="hljs-type">SqlSessionFactoryBuilder</span> <span class="hljs-variable">sqlSessionFactoryBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>();<br><br>        <span class="hljs-comment">// 通过核心配置文件所对应的字节输入流创建工厂类SqlSessionFactory，生产SqlSession对象</span><br>        <span class="hljs-comment">// SqlSession对象，是 mybatis 提供的操作数据库的对象</span><br>        <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> sqlSessionFactoryBuilder.build(is);<br><br>        <span class="hljs-comment">// 创建SqlSession对象，此时通过SqlSession对象所操作的sql都必须手动提交或回滚事务</span><br>        <span class="hljs-comment">// SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><br>        <span class="hljs-comment">// 创建SqlSession对象，此时通过SqlSession对象所操作的sql都会自动提交</span><br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession(<span class="hljs-literal">true</span>);<br><br>        <span class="hljs-comment">// 通过“代理模式”创建UserMapper接口的代理实现类对象，传入对象类型返回一个实例对象</span><br>        <span class="hljs-type">UserMapper</span> <span class="hljs-variable">userMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br><br>        <span class="hljs-comment">//调用UserMapper接口中的方法，就可以根据UserMapper的全类名匹配元素文件，通过调用的方法名匹配</span><br>        <span class="hljs-comment">// 映射文件中的SQL标签，并执行标签中的SQL语句</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> userMapper.insertUser();<br><br><br>        <span class="hljs-comment">//sqlSession.commit();</span><br>        System.out.println(<span class="hljs-string">&quot;结果：&quot;</span> + result);<br><br>        <span class="hljs-comment">// 关闭会话</span><br>        sqlSession.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><h2 id="加入-log4j-日志功能"><a href="#加入-log4j-日志功能" class="headerlink" title="加入 log4j 日志功能"></a>加入 log4j 日志功能</h2><p><strong>（1）加入依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- log4j日志 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><br><p><strong>（2）加入 log4j 的配置文件</strong></p><p>log4j 的配置文件必须命名为 log4j.xml，存放的位置为：src &#x2F; main &#x2F; resources 目录下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-comment">&lt;!--&lt;!DOCTYPE log4j:configuration SYSTEM &quot;log4j.dtd&quot;&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--&lt;log4j:configuration xmlns:log4j=&quot;http://jakarta.apache.org/log4j/&quot;&gt;--&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">log4j</span>:configuration <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/xml/doc-files/log4j.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">log4j:configuration</span> <span class="hljs-attr">debug</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.log4j.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Encoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">layout</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ConversionPattern&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;%-5p %d&#123;MM-dd HH:mm:ss,SSS&#125;</span></span><br><span class="hljs-string"><span class="hljs-tag">%m (%F:%L) \n&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">layout</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;java.sql&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">level</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;debug&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.apache.ibatis&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">level</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;info&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">level</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;debug&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">log4j:configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><br><p><strong>解决 log4j.xml 的 uri 显示没有注册问题</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">log4j</span>:configuration <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;log4j.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">log4j:configuration</span> <span class="hljs-attr">xmlns:log4j</span>=<span class="hljs-string">&quot;http://jakarta.apache.org/log4j/&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>​    在对 log4j.xml 配置文件进行上述配置时出现 http&#x2F;&#x2F;jakarta.apache.org&#x2F;log4j&#x2F; 爆红，IDEA提示 uri is not registered</p><p>​    是因为原官网的 URL 地址进行了更换，所以需将配置地址进行相应修改（只修改URL也是会报错的，需要将上方所述代码全部替换成下方代码）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">log4j</span>:configuration <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/xml/doc-files/log4j.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">log4j:configuration</span> <span class="hljs-attr">debug</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><br><p><strong>日志的级别</strong></p><p>FATAL(致命) &gt; ERROR(错误) &gt; WARN(警告) &gt; INFO(信息) &gt; DEBUG(调试)</p><p>从左到右打印的内容越来越详细</p><br><h2 id="查询操作时-mapper-的配置"><a href="#查询操作时-mapper-的配置" class="headerlink" title="查询操作时 mapper 的配置"></a>查询操作时 mapper 的配置</h2><p>在普通的增删改时，mapper 的配置文件中只需设置 id 属性，其属性值为对应的方法名，如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--int deleteUser();--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteUser&quot;</span>&gt;</span><br>    delete from t_user where id=1<br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure><br><p>但是在查找操作时，我们要设置结果类型</p><ul><li>resultType：设置结果类型，即查询的结果要转换的 java 类型，写全类名</li><li>resultMap：自定义映射，处理一对多或多对一的情况</li></ul><p><strong>以上两个属性在查询时必须指定一个，并且只能二选一</strong></p><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--User getUserById(@Param(&quot;id&quot;) Integer id);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.atfirtree.mybatis.pojo.User&quot;</span>&gt;</span><br>    select * from t_user where id=2<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--List&lt;User&gt; getAllUsers();--&gt;</span><br><span class="hljs-comment">&lt;!--此时返回类型为 User 的集合类，但 resultType 的值为 User--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getAllUsers&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.atfirtree.mybatis.pojo.User&quot;</span>&gt;</span><br>    select * from t_user;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><br><p><strong>需要注意的是：</strong></p><p>（1）若查询的数据为多条时，不能使用实体类作为返回值，否则会抛出异常 TooManyResultsException</p><p>（2）若查询的数据只有一条，可以使用实体类或集合作为返回值</p><br><h1 id="核心配置文件详解"><a href="#核心配置文件详解" class="headerlink" title="核心配置文件详解"></a>核心配置文件详解</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        MyBatis核心配置文件中，标签的顺序：</span><br><span class="hljs-comment">        properties?,settings?,typeAliases?,typeHandlers?,</span><br><span class="hljs-comment">        objectFactory?,objectWrapperFactory?,reflectorFactory?,</span><br><span class="hljs-comment">        plugins?,environments?,databaseIdProvider?,mappers?</span><br><span class="hljs-comment">    --&gt;</span><br><br>    <span class="hljs-comment">&lt;!--引入properties文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;jdbc.properties&quot;</span> /&gt;</span><br><br><br>    <span class="hljs-comment">&lt;!--设置类型别名--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            typeAlias：设置某个类型的别名</span><br><span class="hljs-comment">            属性：</span><br><span class="hljs-comment">                type：设置需要设置别名的类型</span><br><span class="hljs-comment">                alias：设置某个类型的别名，若不设置该属性，那么该类型拥有默认的别名，即类名，且不区分大小写</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;typeAlias type=&quot;com.atguigu.mybatis.pojo.User&quot;&gt;&lt;/typeAlias&gt;--&gt;</span><br>        <span class="hljs-comment">&lt;!--以包为单位，将包下所有的类型设置默认的类型别名，即类名且不区分大小写--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.atfirtree.mybatis.pojo&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        environments：配置多个连接数据库的环境</span><br><span class="hljs-comment">        属性：</span><br><span class="hljs-comment">            default：设置默认使用的环境的id</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            environment：配置某个具体的环境</span><br><span class="hljs-comment">            属性：</span><br><span class="hljs-comment">                id：表示连接数据库的环境的唯一标识，不能重复</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">                transactionManager：设置事务管理方式</span><br><span class="hljs-comment">                属性：</span><br><span class="hljs-comment">                    type=&quot;JDBC|MANAGED&quot;</span><br><span class="hljs-comment">                    JDBC：表示当前环境中，执行SQL时，使用的是JDBC中原生的事务管理方式，事务的提交或回滚需要手动处理</span><br><span class="hljs-comment">                    MANAGED：被管理，例如Spring</span><br><span class="hljs-comment">            --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">                dataSource：配置数据源</span><br><span class="hljs-comment">                属性：</span><br><span class="hljs-comment">                    type：设置数据源的类型</span><br><span class="hljs-comment">                    type=&quot;POOLED|UNPOOLED|JNDI&quot;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">                    POOLED：表示使用数据库连接池缓存数据库连接</span><br><span class="hljs-comment">                    UNPOOLED：表示不使用数据库连接池</span><br><span class="hljs-comment">                    JNDI：表示使用上下文中的数据源</span><br><span class="hljs-comment">            --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--设置连接数据库的驱动--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-comment">&lt;!--设置连接数据库的连接地址--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-comment">&lt;!--设置连接数据库的用户名--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-comment">&lt;!--设置连接数据库的密码--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><br><br>    <span class="hljs-comment">&lt;!--引入映射文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;mapper resource=&quot;mappers/UserMapper.xml&quot;/&gt;--&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            以包为单位引入映射文件</span><br><span class="hljs-comment">            要求：</span><br><span class="hljs-comment">                1、mapper接口所在的包要和映射文件所在的包一致</span><br><span class="hljs-comment">                2、mapper接口要和映射文件的名字一致</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.atfirtree.mybatis.mapper&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>引入外部 properties 文件</strong></p><p>与 JDBC 相似，可以将数据库的配置信息都放在 jdbc.properties 文件中</p><p>然后通过 <code>prorerties</code> 标签将外部的 properties 文件引入配置文件中，这样配置文件可以采用 <code>$&#123;&#125;</code> 的形式取值</p><p><code>&lt;properties resource=&quot;jdbc.properties&quot; /&gt;</code></p><br><h1 id="mybatis-获取参数"><a href="#MyBatis-获取参数" class="headerlink" title="MyBatis 获取参数"></a>MyBatis 获取参数</h1><p>MyBatis 获取参数值的两种方式：${} 和 #{}</p><br><ul><li>${} 的本质就是字符串拼接：#{} 的本质就是占位符赋值</li><li>${} 使用字符串拼接的方式拼接 sql，若为字符串类型或日期类型的字段进行赋值时，<strong>需要手动加单引号</strong></li><li>#{}使用占位符赋值的方式拼接 sql，此时为字符串类型或日期类型的字段进行赋值时， 可以自动添加单引号</li></ul><br><h2 id="单个字面量类型的参数"><a href="#单个字面量类型的参数" class="headerlink" title="单个字面量类型的参数"></a>单个字面量类型的参数</h2><p>若 mapper 接口中的方法参数为单个的字面量类型</p><p>此时可以使用 ${} 和 #{} 以任意的名称获取参数的值，注意 ${} 需要手动加单引号</p><p>这里 #{} 中的参数名没有意义，只是按参数个数接收，任意内容都可以接收</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.atfirtree.mybatis.mapper.UserMapper&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--User getUserByUsername(String username);--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserByUsername&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.atfirtree.mybatis.pojo.User&quot;</span>&gt;</span><br>        select * from t_user where username = #&#123;username&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h2 id="多个字面量类型的参数"><a href="#多个字面量类型的参数" class="headerlink" title="多个字面量类型的参数"></a>多个字面量类型的参数</h2><p>若 mapper 接口中的方法参数为多个</p><p>此时 MyBatis 会自动将这些参数放在一个 map 集合中，以 arg0, arg1… 为键，以参数为值</p><p>以 param1, param2… 为键，以参数为值；因此只需要通过 ${} 和 #{} 访问 map 集合的键就可以获取相对应的值，注意 ${} 需要手动加单引号</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--User checkLogin(String username, String password);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkLogin&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.atfirtree.mybatis.pojo.User&quot;</span>&gt;</span><br>    select * from t_user where username = &#x27;$&#123;param1&#125;&#x27; and password = #&#123;param2&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h2 id="map集合类型的参数"><a href="#map集合类型的参数" class="headerlink" title="map集合类型的参数"></a>map集合类型的参数</h2><p>若 mapper 接口中的方法需要的参数为多个时，此时可以手动创建 map 集合，将这些数据放在 map 中只需要通过 ${} 和 #{} 访问 map 集合的键就可以获取相对应的值，注意 ${} 需要手动加单引号</p><p><strong>test测试类中的测试方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCheckLoginByMap</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br><br>    Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();<br>    map.put(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;admin&quot;</span>);<br>    map.put(<span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>);<br><br>    <span class="hljs-type">User</span> <span class="hljs-variable">admin</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class).checkLoginByMap(map);<br>    System.out.println(<span class="hljs-string">&quot;结果是：&quot;</span> + admin);<br>&#125;<br></code></pre></td></tr></table></figure><br><p><strong>UserMapper.xml</strong></p><p>可以直接通过我们手动设置的属性名来访问，增强了可读性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--User checkLoginByMap(Map&lt;String, Object&gt; map);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkLoginByMap&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.atfirtree.mybatis.pojo.User&quot;</span>&gt;</span><br>    select * from t_user where username = &#x27;$&#123;username&#125;&#x27; and password = #&#123;password&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h2 id="实体类类型的参数"><a href="#实体类类型的参数" class="headerlink" title="实体类类型的参数"></a>实体类类型的参数</h2><p>若 mapper 接口中的方法参数为实体类对象时</p><p>此时可以使用 ${} 和 #{}，通过访问实体类对象中的属性名获取属性值，注意 ${} 需要手动加单引号</p><p>PS：属性名 – 将 get &#x2F; set 方法去掉后 get &#x2F; set 剩下的部分就是属性名，大部分情况下和成员变量名一致</p><br><h2 id="使用-param-标识参数"><a href="#使用-Param-标识参数" class="headerlink" title="使用 @Param 标识参数"></a>使用 @Param 标识参数</h2><p>可以通过 @Param 注解标识 mapper 接口中的方法参数，会将这些参数放在 map 集合中，有两种获取的方式</p><ul><li><p>以 @Param 注解的 value 属性值为键，以参数为值</p></li><li><p>以 param1, param2… 为键，以参数为值</p></li></ul><p>只需要通过 ${} 和 #{} 访问 map 集合的键就可以获取相对应的值， 注意 ${} 需要手动加单引号</p><p><strong>UserMapper.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 利用 param 注释检查登录</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> username 用户名</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> password 用户密码</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 查找到的用户对象</span><br><span class="hljs-comment"> */</span><br>User <span class="hljs-title function_">checkLoginByParam</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;username&quot;)</span> String username, <span class="hljs-meta">@Param(&quot;password&quot;)</span> String password)</span>;<br></code></pre></td></tr></table></figure><br><p><strong>UserMapper.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--User checkLoginByParam(@Param(&quot;username&quot;) String username, @Param(&quot;password&quot;) String password);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkLoginByParam&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.atfirtree.mybatis.pojo.User&quot;</span>&gt;</span><br>    select * from t_user where username = &#x27;$&#123;username&#125;&#x27; and password = #&#123;password&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h1 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h1><h2 id="把查询的一条数据转换为-map-集合"><a href="#把查询的一条数据转换为-map-集合" class="headerlink" title="把查询的一条数据转换为 map 集合"></a>把查询的一条数据转换为 map 集合</h2><p>查询结果为空的字段不会放入 map 集合中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Map&lt;String, Object&gt; getUserByIdToMap(@Param(&quot;id&quot;) Integer id);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserByIdToMap&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>    select * from t_user where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h2 id="查询多条数据转为-map-集合"><a href="#查询多条数据转为-map-集合" class="headerlink" title="查询多条数据转为 map 集合"></a>查询多条数据转为 map 集合</h2><p><strong>（1）方式一</strong></p><p>将表中的数据以 map 集合的方式查询，一条数据对应一个 map；</p><p>若有多条数据，就会产生多个 map 集合，此时可以将这些 map 放在一个 list 集合中获取</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--List&lt;Map&lt;String, Object&gt;&gt; getAllUsersToMap();--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getAllUsersToMap&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>    select * from t_user<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><br><p><strong>（2）方式二</strong></p><p>将表中的数据以 map 集合的方式查询，一条数据对应一个 map，并且最终要以一个 map 的方式返回数据：本质上查询类型为 <code>Map&lt; Key, Map&lt;String, Object&gt; &gt;</code></p><p>@MapKey() 指定查找出来的一条数据中的某个字段作为键，查找出每条数据对应的 map 作为值</p><p><strong>SelectMapper.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查找全部用户，封装为集合</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 全部用户的集合</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">// List&lt;Map&lt;String, Object&gt;&gt; getAllUsersToMap();</span><br><span class="hljs-meta">@MapKey(&quot;id&quot;)</span><br>Map&lt;String, Object&gt; <span class="hljs-title function_">getAllUsersToMap</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><br><p><strong>SelectMapper.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Map&lt;String, Object&gt; getAllUsersToMap();--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getAllUsersToMap&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>    select * from t_user<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h1 id="特殊-sql-的执行"><a href="#特殊-SQL-的执行" class="headerlink" title="特殊 SQL 的执行"></a>特殊 SQL 的执行</h1><h2 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h2><p>有三种书写方式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--List&lt;Map&lt;String, Object&gt;&gt; getUserByLike(@Param(&quot;mohu&quot;) String mohu);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserByLike&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.atfirtree.mybatis.pojo.User&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--select * from t_user where username like &#x27;%$&#123;mohu&#125;%&#x27;--&gt;</span><br>    <span class="hljs-comment">&lt;!--select * from t_user where username like concat(&#x27;%&#x27;, &#x27;a&#x27;, &#x27;%&#x27;)--&gt;</span><br>    select * from t_user where username like  &quot;%&quot;#&#123;mohu&#125;&quot;%&quot;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h2 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h2><p>只能使用 <code>$&#123;&#125;</code> 的获取参数方式，因为 <code>#&#123;&#125;</code> 会自动加上引号导致错误</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--public void deleteMoreUsers(@Param(&quot;ids&quot;) System ids);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteMoreUsers&quot;</span>&gt;</span><br>    delete from t_user where id in($&#123;ids&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h2 id="设置动态表名"><a href="#设置动态表名" class="headerlink" title="设置动态表名"></a>设置动态表名</h2><p>也只能使用 <code>$&#123;&#125;</code> 的获取参数方式，因为 <code>#&#123;&#125;</code> 会自动加上引号，而 sql 语句中表名不能加引号</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--List&lt;User&gt; getUserList(String tableName);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserList&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.atfirtree.mybatis.pojo.User&quot;</span>&gt;</span><br>    select * from $&#123;tableName&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h2 id="添加功能获取自增的主键"><a href="#添加功能获取自增的主键" class="headerlink" title="添加功能获取自增的主键"></a>添加功能获取自增的主键</h2><ul><li><p>useGeneratedKeys：设置使用自增的主键</p></li><li><p>keyProperty：因为增删改有统一的返回值是受影响的行数，因此只能将获取的自增的主键放在传输的参数 user 对象的某个属性中</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--void insertUser(User user);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertUser&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><br>    insert into t_user values(null, #&#123;username&#125;, #&#123;password&#125;, #&#123;age&#125;, #&#123;gender&#125;, #&#123;email&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><p>执行了该方法后 User 的 id 属性就会被赋值为 自增的主键</p><br><h1 id="自定义映射-resultmap"><a href="#自定义映射-resultMap" class="headerlink" title="自定义映射 resultMap"></a>自定义映射 resultMap</h1><h2 id="字段和属性不一致的处理"><a href="#字段和属性不一致的处理" class="headerlink" title="字段和属性不一致的处理"></a>字段和属性不一致的处理</h2><p>（1）若字段名和实体类中的属性名不一致，则可以通过在 sql 语句中为字段添加别名的方式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Emp getEmpByEmpId(@Param(&quot;empId&quot;) Integer empId);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByEmpId&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.atfirtree.mybatis.pojo.Emp&quot;</span>&gt;</span><br>    select emp_id empId, emp_name empName, age, gender from t_emp where emp_id = #&#123;empId&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><br><p>（2）当字段符合 mySql 的要求使用下划线，而属性符合 java 的要求使用驼峰</p><p>此时可以在 MyBatis 的核心配置文件中设置全局变量，能自动将下划线映射为驼峰</p><p><strong>mybatis-config.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在 MyBatis 的核心配置文件（mybatis-config.xml）中设置一个全局配置信息 mapUnderscoreToCamelCase</p><p>可以在查询表中数据时，自动将_类型的字段名转换为驼峰，例如：字段名 user_name，设置了 mapUnderscoreToCamelCase，此时字段名就会转换为 userName</p><br><p>（3）使用 resultMap 设置自定义映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.atfirtree.mybatis.pojo.Emp&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empId&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empName&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;age&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;gender&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--Emp getEmpByEmpId(@Param(&quot;empId&quot;) Integer empId);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByEmpId&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;empResultMap&quot;</span>&gt;</span><br>    select * from t_emp where emp_id = #&#123;empId&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>resultMap：设置自定义映射</p><p>属性：</p><ul><li>id：表示自定义映射的唯一标识</li><li>type：查询的数据要映射的实体类的类型</li></ul><p>子标签： </p><ul><li>id：设置主键的映射关系</li><li>result：设置普通字段的映射关系</li><li>association：设置多对一的映射关系</li><li>collection：设置一对多的映射关系</li></ul><p>子标签的属性：</p><ul><li>property：设置映射关系中实体类中的属性名</li><li>column：设置映射关系中表中的字段名</li></ul><br><h2 id="多对一映射处理"><a href="#多对一映射处理" class="headerlink" title="多对一映射处理"></a>多对一映射处理</h2><p>场景模拟：查询员工信息以及员工所对应的部门信息</p><h3 id="级联方式处理映射关系"><a href="#级联方式处理映射关系" class="headerlink" title="级联方式处理映射关系"></a>级联方式处理映射关系</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empAndDeptResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.atfirtree.mybatis.pojo.Emp&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empId&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empName&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;age&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;gender&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--多对一映射--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dept.deptId&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dept.deptName&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--Emp getEmpAndDeptByEmpId(@Param(&quot;empId&quot;) Integer empId);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpAndDeptByEmpId&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;empAndDeptResultMap&quot;</span>&gt;</span><br>    select * from t_emp left join t_dept on t_emp.dept_id = t_dept.dept_id where t_emp.emp_id = #&#123;empId&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>将查询出来的职位信息（职位id、职位name）跟用户对象的 dept 属性的属性映射</p><br><h3 id="使用-association-处理映射关系"><a href="#使用-association-处理映射关系" class="headerlink" title="使用 association 处理映射关系"></a>使用 association 处理映射关系</h3><p>association 专门用来处理多对一的映射关系（处理实体类型的映射）</p><ul><li>property：当前要处理的实体类里的属性</li><li>javaType：property 设置的属性的类型</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empAndDeptResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.atfirtree.mybatis.pojo.Emp&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empId&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empName&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;age&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;gender&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--多对一映射--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;com.atfirtree.mybatis.pojo.Dept&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deptId&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deptName&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--Emp getEmpAndDeptByEmpId(@Param(&quot;empId&quot;) Integer empId);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpAndDeptByEmpId&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;empAndDeptResultMap&quot;</span>&gt;</span><br>    select * from t_emp left join t_dept on t_emp.dept_id = t_dept.dept_id where t_emp.emp_id = #&#123;empId&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h3 id="分布查询-多对一"><a href="#分布查询-–-多对一" class="headerlink" title="分布查询 – 多对一"></a>分布查询 – 多对一</h3><p>假设想根据用户 id 查询到用户及职位信息，可以通过以下两个步骤分步查询：</p><ol><li>先根据用户 id 查询到用户的信息，此时得到了职位 id</li><li>再根据查到的职位 id 得到具体的职位信息，放在用户的 dept 对象中</li></ol><br><p>可以发现第二步是根据职位信息返回职位对象，所以我们在创建一个 <code>DeptMapper</code> 来管理 dept 类的相关操作</p><p>这里已经在 mybatis-config.xml 中配置了 mapUnderscoreToCamelCase，所以字段 dept_id 可以与属性 deptId 正确映射</p><p><strong>DeptMapper.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Dept getEmpAndDeptByStepTwo(@Param(&quot;deptId&quot;) Integer deptId);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpAndDeptByStepTwo&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.atfirtree.mybatis.pojo.Dept&quot;</span>&gt;</span><br>    select * from t_dept where dept_id = #&#123;deptId&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><br><p>然后在 <code>EmpMapper</code> 中将两步操作联系在一起</p><p><strong>EmpMapper.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empAndDeptByStepResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.atfirtree.mybatis.pojo.Emp&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empId&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empName&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;age&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;gender&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--多对一映射--&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        property：设置需要处理映射关系的属性的属性名</span><br><span class="hljs-comment">        select：目标sql语句的唯一表示（定义方法的接口的全类名 + 方法名）</span><br><span class="hljs-comment">        column：把第一步查询出来的某个字段作为第二部查询的条件</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dept&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;com.atfirtree.mybatis.mapper.DeptMapper.getEmpAndDeptByStepTwo&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_id&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--Emp getEmpAndDeptByStepOne(@Param(&quot;empId&quot;) Integer empId);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpAndDeptByStepOne&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;empAndDeptByStepResultMap&quot;</span>&gt;</span><br>    select * from t_emp where emp_id = #&#123;empId&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h4 id="分布查询的优点"><a href="#分布查询的优点" class="headerlink" title="分布查询的优点"></a>分布查询的优点</h4><p>可以实现延迟加载（懒加载）</p><p>但是必须在核心配置文件中设置全局配置信息：</p><ul><li>lazyLoadingEnabled：延迟加载的全局开关，默认 false，一般 true<ul><li>当开启时，所有关联对象都会延迟加载</li></ul></li><li>aggressiveLazyLoading，默认 false，一般 false<ul><li>当开启时，任何方法的调用都会加载该对象的所有属性</li><li>否则，每个属性会按需加载</li></ul></li></ul><p>此时就可以实现按需加载，获取的数据是什么，就只会执行相应的sql</p><p>可通过 association 和 collection 中的 fetchType 属性设置当前的分步查询是否使用延迟加载</p><ul><li>fetchType&#x3D;”lazy”（延迟加载）</li><li>etchType&#x3D;”lager”（立即加载）</li></ul><br><h2 id="一对多映射处理"><a href="#一对多映射处理" class="headerlink" title="一对多映射处理"></a>一对多映射处理</h2><p>场景模拟：查询员工信息以及员工所对应的部门信息</p><p>与多对一相似，但是没有级联的方式，仅有两种方式：collection 和 分步查询</p><br><h3 id="使用-collection-处理映射关系"><a href="#使用-collection-处理映射关系" class="headerlink" title="使用 collection 处理映射关系"></a>使用 collection 处理映射关系</h3><p>collection：设置一对多的映射关系（处理集合类型的映射）</p><ul><li>property：当前要处理的实体类里的属性</li><li>ofType：property 设置的属性存放的数据类型</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deptAndEmpResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.atfirtree.mybatis.pojo.Dept&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deptId&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deptName&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!--一对多映射--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;emps&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;com.atfirtree.mybatis.pojo.Emp&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empId&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empName&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;age&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;gender&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--Dept getDeptAndEmpByDeptId(@Param(&quot;deptId&quot;) Integer deptId);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getDeptAndEmpByDeptId&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;deptAndEmpResultMap&quot;</span>&gt;</span><br>    select * from t_dept left join t_emp on t_dept.dept_id = t_emp.dept_id where t_dept.dept_id = #&#123;deptId&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h3 id="分步查询-一对多"><a href="#分步查询-–-一对多" class="headerlink" title="分步查询 – 一对多"></a>分步查询 – 一对多</h3><p>假设想根据职位 id 查询到职位信息及该职位的用户信息，可以通过以下两个步骤分步查询：</p><ol><li>先根据职位 id 查询到职位信息</li><li>再根据职位 id 得到该职位的用户信息，放在职位的 emps 对象中</li></ol><br><p>可以发现第二步是根据职位 id 返回用户对象集合，所以我们在 <code>EmpMapper</code> 来管理</p><p><strong>EmpMapper.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--List&lt;Map&gt; getDeptAndEmpByStepTwo(@Param(&quot;deptId&quot;) Integer deptId);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getDeptAndEmpByStepTwo&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.atfirtree.mybatis.pojo.Emp&quot;</span>&gt;</span><br>    select * from t_emp where dept_id = #&#123;deptId&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><br><p>然后在 <code>DeptMapper</code> 中将两步操作联系在一起</p><p><strong>DeptMapper.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deptAndEmpByStepResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.atfirtree.mybatis.pojo.Dept&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deptId&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deptName&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!--一对多映射--&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        property：设置需要处理映射关系的属性的属性名</span><br><span class="hljs-comment">        select：目标sql语句的唯一表示（定义方法的接口的全类名 + 方法名）</span><br><span class="hljs-comment">        column：把第一步查询出来的某个字段作为第二部查询的条件</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;emps&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;com.atfirtree.mybatis.mapper.EmpMapper.getDeptAndEmpByStepTwo&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_id&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><br><span class="hljs-comment">&lt;!--Dept getDeptAndEmpByStepOne(@Param(&quot;deptId&quot;) Integer deptId);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getDeptAndEmpByStepOne&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;deptAndEmpByStepResultMap&quot;</span>&gt;</span><br>    select * from t_dept where dept_id = #&#123;deptId&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h1 id="动态-sql"><a href="#动态-SQL" class="headerlink" title="动态 SQL"></a>动态 SQL</h1><p>Mybatis 框架的动态 SQL 技术是一种根据特定条件动态拼装 SQL 语句的功能，它存在的意义是为了解决拼接 SQL 语句字符串时的痛点问题</p><br><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><p>if 标签可通过 test 属性的表达式进行判断，若表达式的结果为 true，则标签中的内容会执行；反之不执行</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--List&lt;Emp&gt; getEmpByCondition(Emp emp);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByCondition&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.atfirtree.mybatis.pojo.Emp&quot;</span>&gt;</span><br>    select * from t_emp where 1 = 1<br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span><br>        and emp_name = #&#123;empName&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span><br>        and age = #&#123;age&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>selet 语句中的 where 1 &#x3D; 1 只是为了防止 where 后没有内容而导致报错，也可以通过 where 标签来解决该问题</p><br><h2 id="where"><a href="#where" class="headerlink" title="where"></a>where</h2><p>where 和 if 一般结合使用：</p><ul><li>若 where 标签中的 if 条件都不满足，则 where 标签没有任何功能，即不会添加 where 关键字</li><li>若 where 标签中的 if 条件满足，则 where 标签会自动添加 where 关键字，并将条件最前方多余的 and 去掉，但最后面出现多余的 and 不能去掉</li></ul><br><p><strong>只能去掉多余的 and，而不能自动加上所需要的 and，所以可以在每条 if 前都加上 and</strong></p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--List&lt;Emp&gt; getEmpByCondition(Emp emp);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByCondition&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.atfirtree.mybatis.pojo.Emp&quot;</span>&gt;</span><br>    select * from t_emp<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span><br>            and emp_name = #&#123;empName&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span><br>            and age = #&#123;age&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;gender != null and gender != &#x27;&#x27;&quot;</span>&gt;</span><br>            and gender = #&#123;gender&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h2 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h2><p>trim 用于去掉或添加标签中的内容</p><p>常用属性： </p><ul><li>prefix：在 trim 标签中的内容的前面添加某些内容</li><li>prefixOverrides：在 trim 标签中的内容的前面去掉某些内容</li><li>suffix：在 trim 标签中的内容的后面添加某些内容</li><li>suffixOverrides：在 trim 标签中的内容的后面去掉某些内容</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--List&lt;Emp&gt; getEmpByCondition(Emp emp);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByCondition&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.atfirtree.mybatis.pojo.Emp&quot;</span>&gt;</span><br>    select * from t_emp<br>    <span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;where&quot;</span> <span class="hljs-attr">suffixOverrides</span>=<span class="hljs-string">&quot;and&quot;</span> &gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span><br>            emp_name = #&#123;empName&#125; and<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span><br>            age = #&#123;age&#125; and<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;gender != null and gender != &#x27;&#x27;&quot;</span>&gt;</span><br>            gender = #&#123;gender&#125; and<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h2 id="choose-when-otherwise"><a href="#choose、when、otherwise" class="headerlink" title="choose、when、otherwise"></a>choose、when、otherwise</h2><p>choose 是父标签，when 和 otherwise 都要写在 choose 中，作用相当与 switch 结构</p><p>when 相当于 case，otherwise 相当于 default</p><br><h2 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h2><p>适用场景：批量添加、批量删除</p><ul><li>collection：要访问的对象</li><li>item：循环集合中的每一项</li><li>separator：每次循环数据间的分隔符（会自动在分隔符前后加上空格）</li><li>open：循环以什么开始</li><li>close：循环以什么结束</li></ul><p><strong>批量增加</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--void insertMoreEmp(@Param(&quot;emps&quot;) List&lt;Emp&gt; emps);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertMoreEmp&quot;</span>&gt;</span><br>    insert into t_emp values<br>    <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;emps&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;emp&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span><br>        (null, #&#123;emp.empName&#125;, #&#123;emp.age&#125;, #&#123;emp.gender&#125;, null)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>批量删除（方法一）</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--void deleteMoreEmp(@Param(&quot;empIds&quot;)Integer[] empIds);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteMoreEmp&quot;</span>&gt;</span><br>    delete from t_emp where emp_id in<br>        <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;empIds&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;empId&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span>&gt;</span><br>            #&#123;empId&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>批量删除（方法二）</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--void deleteMoreEmp(@Param(&quot;empIds&quot;)Integer[] empIds);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteMoreEmp&quot;</span>&gt;</span><br>    delete from t_emp where<br>    <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;empIds&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;empId&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;or&quot;</span>&gt;</span><br>        emp_id = #&#123;empId&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h2 id="sql片段"><a href="#SQL片段" class="headerlink" title="SQL片段"></a>SQL片段</h2><p>sql 片段，可以记录一段公共 sql 片段，在使用的地方通过 include 标签进行引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empColumns&quot;</span>&gt;</span><br>empId, empName, age, gender, depyId<br><span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span><br>select <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;empColumns&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span> from t_emp<br></code></pre></td></tr></table></figure><br><h1 id="mybatis-的缓存"><a href="#MyBatis-的缓存" class="headerlink" title="MyBatis 的缓存"></a>MyBatis 的缓存</h1><p>MyBatis 的缓存分为一级缓存和二级缓存</p><br><h2 id="mybatis-的一级缓存"><a href="#MyBatis-的一级缓存" class="headerlink" title="MyBatis 的一级缓存"></a>MyBatis 的一级缓存</h2><p>MyBatis 的一级缓存默认开启，它是 SqlSession 级别的，通过同一个 SqlSession 查询的数据会被缓存，下次查询相同的数据，就会从缓存中直接获取，不会从数据库重新访问</p><p>使一级缓存失效的四种情况：</p><ul><li>不同的 SqlSession 对应不同的一级缓存</li><li>同一个 SqlSession 但是查询条件不同</li><li>同一个 SqlSession 两次查询期间执行了任何一次增删改操作</li><li>同一个 SqlSession 两次查询期间手动清空了缓存 <code>sqlSession.clearCache();</code></li></ul><br><h2 id="mybatis-的二级缓存"><a href="#MyBatis-的二级缓存" class="headerlink" title="MyBatis 的二级缓存"></a>MyBatis 的二级缓存</h2><p>二级缓存是 SqlSessionFactory 级别，通过同一个 SqlSessionFactory 创建的 SqlSession 查询的结果会被缓存；此后若再次执行相同的查询语句，结果就会从缓存中获取</p><p>MyBatis 二级缓存开启的条件：</p><ol><li>在核心配置文件中，设置全局配置属性 cacheEnabled&#x3D;”true”，默认为 true，不需要设置</li><li>在映射文件中设置标签&lt;cache&#x2F;&gt;</li><li>二级缓存必须在 SqlSession 关闭或提交之后有效</li><li>查询的数据所转换的实体类类型必须实现序列化的接口</li></ol><p>使二级缓存失效的情况：</p><p>两次查询之间执行了任意的增删改，会使一级和二级缓存同时失效</p><br><h3 id="二级缓存的相关配置"><a href="#二级缓存的相关配置" class="headerlink" title="二级缓存的相关配置"></a>二级缓存的相关配置</h3><p>在 mapper 配置文件中添加的 cache 标签可以设置一些属性：</p><ul><li>eviction 属性：缓存回收策略，默认的是 LRU<ul><li>LRU（Least Recently Used） – 最近最少使用的：移除最长时间不被使用的对象</li><li>FIFO（First in First out） – 先进先出：按对象进入缓存的顺序来移除它们</li><li>SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象</li><li>WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象</li></ul></li><li>flushInterval 属性：刷新间隔，单位毫秒<ul><li>默认情况是不设置，也就是没有刷新间隔，缓存仅仅调用语句时刷新</li></ul></li><li>size性：引用数目，正整数<ul><li>代表缓存最多可以存储多少个对象，太大容易导致内存溢出</li></ul></li><li>readOnly 属性：只读， true &#x2F; false，默认是 false<ul><li>true：只读缓存；会给所有调用者返回缓存对象的相同实例。因此这些对象不能被修改</li><li>false：读写缓存；会返回缓存对象的拷贝（通过序列化）</li></ul></li></ul><br><h2 id="mybatis-缓存查询的顺序"><a href="#MyBatis-缓存查询的顺序" class="headerlink" title="MyBatis 缓存查询的顺序"></a>MyBatis 缓存查询的顺序</h2><ul><li><p>先查询二级缓存，因为二级缓存中可能会有其他程序已经查出来的数据，可以拿来直接使用</p></li><li><p>如果二级缓存没有命中，再查询一级缓存</p></li><li><p>如果一级缓存也没有命中，则查询数据库</p></li><li><p>SqlSession 关闭之后，一级缓存中的数据会写入二级缓存</p></li></ul><br><h2 id="整合第三方缓存-ehcache"><a href="#整合第三方缓存-EHCache" class="headerlink" title="整合第三方缓存 EHCache"></a>整合第三方缓存 EHCache</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Mybatis EHCache整合包 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.caches<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-ehcache<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- slf4j日志门面的一个具体实现 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h3 id="各-jar-包功能"><a href="#各-jar-包功能" class="headerlink" title="各 jar 包功能"></a>各 jar 包功能</h3><table><thead><tr><th>jar包名称</th><th>作用</th></tr></thead><tbody><tr><td>mybatis-ehcache</td><td>Mybatis 和 EHCache 的整合包</td></tr><tr><td>ehcache</td><td>EHCache 核心包</td></tr><tr><td>slf4j-api</td><td>SLF4J 日志门面包</td></tr><tr><td>logback-classic</td><td>支持 SLF4J 门面接口的一个具体实现</td></tr></tbody></table><br><h3 id="创建-ehcache-的配置文件-ehcachexml"><a href="#创建-EHCache-的配置文件-ehcache-xml" class="headerlink" title="创建 EHCache 的配置文件 ehcache.xml"></a>创建 EHCache 的配置文件 ehcache.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span> ?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ehcache</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xsi:noNamespaceSchemaLocation</span>=<span class="hljs-string">&quot;../config/ehcache.xsd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 磁盘保存路径 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">diskStore</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;D:\atguigu\ehcache&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">defaultCache</span></span><br><span class="hljs-tag">        <span class="hljs-attr">maxElementsInMemory</span>=<span class="hljs-string">&quot;1000&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">maxElementsOnDisk</span>=<span class="hljs-string">&quot;10000000&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">eternal</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">overflowToDisk</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">timeToIdleSeconds</span>=<span class="hljs-string">&quot;120&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">timeToLiveSeconds</span>=<span class="hljs-string">&quot;120&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">diskExpiryThreadIntervalSeconds</span>=<span class="hljs-string">&quot;120&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">memoryStoreEvictionPolicy</span>=<span class="hljs-string">&quot;LRU&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">defaultCache</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ehcache</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h3 id="设置二级缓存的类型"><a href="#设置二级缓存的类型" class="headerlink" title="设置二级缓存的类型"></a>设置二级缓存的类型</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">cache</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><br><h3 id="加入-logback-日志"><a href="#加入-logback-日志" class="headerlink" title="加入 logback 日志"></a>加入 logback 日志</h3><p>存在 SLF4J 时，作为简易日志的 log4j 将失效，此时我们需要借助 SLF4J 的具体实现logback 来打印日志。 创建 logback 的配置文件 logback.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span> <span class="hljs-attr">debug</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 指定日志输出的位置 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 日志输出的格式 --&gt;</span><br>            <span class="hljs-comment">&lt;!-- 按照顺序分别是： 时间、日志级别、线程名称、打印日志的类、日志主体内容、换行</span><br><span class="hljs-comment">            --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>[%d&#123;HH:mm:ss.SSS&#125;] [%-5level] [%thread] [%logger]<br>                [%msg]%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 设置全局日志级别。日志级别按顺序分别是： DEBUG、INFO、WARN、ERROR --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 指定任何一个日志级别都只打印当前级别和后面级别的日志。 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 指定打印日志的appender，这里通过“STDOUT”引用了前面配置的appender --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 根据特殊需求指定局部日志级别 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.atfirtree.mybatis.mapper&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h1 id="mybatis-的逆向工程"><a href="#MyBatis-的逆向工程" class="headerlink" title="MyBatis 的逆向工程"></a>MyBatis 的逆向工程</h1><p>正向工程：先创建 Java 实体类，由框架负责根据实体类生成数据库表。 Hibernate 是支持正向工程的</p><p>逆向工程：先创建数据库表，由框架负责根据数据库表，反向生成如下资源：</p><ul><li>Java 实体类</li><li>Mapper 接口</li><li>Mapper 映射文件</li></ul><br><h2 id="创建逆向工程的步骤"><a href="#创建逆向工程的步骤" class="headerlink" title="创建逆向工程的步骤"></a>创建逆向工程的步骤</h2><h3 id="添加依赖和插件"><a href="#添加依赖和插件" class="headerlink" title="添加依赖和插件"></a>添加依赖和插件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 控制Maven在构建过程中相关配置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 构建过程中用到的插件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 具体插件，逆向工程的操作是以构建过程中插件形式出现的 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 插件的依赖 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 逆向工程的核心依赖 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- MySQL驱动 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h3 id="创建逆向工程的配置文件"><a href="#创建逆向工程的配置文件" class="headerlink" title="创建逆向工程的配置文件"></a>创建逆向工程的配置文件</h3><p>文件名必须是：generatorConfig.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">generatorConfiguration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">generatorConfiguration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    targetRuntime: 执行生成的逆向工程的版本</span><br><span class="hljs-comment">    MyBatis3Simple: 生成基本的CRUD（清新简洁版）</span><br><span class="hljs-comment">    MyBatis3: 生成带条件的CRUD（奢华尊享版）</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;DB2Tables&quot;</span> <span class="hljs-attr">targetRuntime</span>=<span class="hljs-string">&quot;MyBatis3&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 数据库的连接信息 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jdbcConnection</span> <span class="hljs-attr">driverClass</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">connectionURL</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mybatis?</span></span><br><span class="hljs-string"><span class="hljs-tag">serverTimezone=UTC&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">userId</span>=<span class="hljs-string">&quot;root&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;123456&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">jdbcConnection</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- javaBean的生成策略--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaModelGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.atguigu.mybatis.pojo&quot;</span></span><br><span class="hljs-tag">                            <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;.\src\main\java&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;trimStrings&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaModelGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- SQL映射文件的生成策略 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">sqlMapGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.atguigu.mybatis.mapper&quot;</span></span><br><span class="hljs-tag">                         <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;.\src\main\resources&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">sqlMapGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- Mapper接口的生成策略 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaClientGenerator</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;XMLMAPPER&quot;</span></span><br><span class="hljs-tag">                             <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.atguigu.mybatis.mapper&quot;</span> <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;.\src\main\java&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaClientGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 逆向分析的表 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- tableName设置为*号，可以对应所有表，此时不写domainObjectName --&gt;</span><br>        <span class="hljs-comment">&lt;!-- domainObjectName属性指定生成出来的实体类的类名 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">&quot;t_emp&quot;</span> <span class="hljs-attr">domainObjectName</span>=<span class="hljs-string">&quot;Emp&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">&quot;t_dept&quot;</span> <span class="hljs-attr">domainObjectName</span>=<span class="hljs-string">&quot;Dept&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">generatorConfiguration</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h3 id="执行-mbg-插件的-generate-目标"><a href="#执行-MBG-插件的-generate-目标" class="headerlink" title="执行 MBG 插件的 generate 目标"></a>执行 MBG 插件的 generate 目标</h3><p><img src="https://gitee.com/Greedy_firtree/picture/raw/master/blog/image-20230917194126710.png" alt="image-20230917194126710"></p><p>然后就会自动根据数据库中的表创建 实体类和 mapper 以及配置文件</p><br><h2 id="qbc-查询"><a href="#QBC-查询" class="headerlink" title="QBC 查询"></a>QBC 查询</h2><p>普通Xxx方法：当某些字段设置为了 null，对应的表中数据也会直接设置为 null</p><p>选择性Xxx方法：如果某些字段设置为了 null，对应的表中数据会设置为该字段的默认值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testMBG</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>    <span class="hljs-type">EmpMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(EmpMapper.class);<br><br>    <span class="hljs-comment">// 根据id查询数据</span><br>    <span class="hljs-comment">// Emp emp = mapper.selectByPrimaryKey(1);</span><br>    <span class="hljs-comment">// System.out.println(&quot;结果：&quot; + emp);</span><br><br>    <span class="hljs-comment">// 查询所有数据</span><br>    <span class="hljs-comment">// List&lt;Emp&gt; list = mapper.selectByExample(null);</span><br>    <span class="hljs-comment">// list.forEach(System.out::println);</span><br><br>    <span class="hljs-comment">// 以员工姓名为条件查询</span><br>    <span class="hljs-comment">// EmpExample example = new EmpExample();</span><br>    <span class="hljs-comment">// example.createCriteria().andEmpNameEqualTo(&quot;张三&quot;);</span><br>    <span class="hljs-comment">// List&lt;Emp&gt; emps = mapper.selectByExample(example);</span><br>    <span class="hljs-comment">// emps.forEach(System.out::println);</span><br><br>    <span class="hljs-comment">// 有or的条件查询</span><br>     <span class="hljs-type">EmpExample</span> <span class="hljs-variable">example</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EmpExample</span>();<br>     example.createCriteria().andEmpNameEqualTo(<span class="hljs-string">&quot;张三&quot;</span>);<br>     example.or().andEmpNameEqualTo(<span class="hljs-string">&quot;王五&quot;</span>);<br>     List&lt;Emp&gt; emps = mapper.selectByExample(example);<br>     emps.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><br><h1 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h1><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs tex">imit index, pageSize<br><br>pageSize：每页显示的条数<br>pageNum：当前页的页码<br>index：当前页的起始索引，index = ( pageNum - 1 ) * pageSize<br>count：总记录数<br>totalPage：总页数<br>totalPage = count / pageSize;<br><br>if (count <span class="hljs-comment">% pageSize != 0) &#123;</span><br>totalPage += 1;<br>&#125;<br><br>pageSize=4，pageNum=1，index=0 limit 0,4<br>pageSize=4，pageNum=3，index=8 limit 8,4<br>pageSize=4，pageNum=6，index=20 limit 8,4<br></code></pre></td></tr></table></figure><br><h2 id="分页插件的使用步骤"><a href="#分页插件的使用步骤" class="headerlink" title="分页插件的使用步骤"></a>分页插件的使用步骤</h2><h3 id="添加依赖"><a href="#添加依赖-1" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h3 id="配置分页插件"><a href="#配置分页插件" class="headerlink" title="配置分页插件"></a>配置分页插件</h3><p>在 MyBatis 的核心配置文件中配置插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--设置分页插件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span> <span class="hljs-attr">interceptor</span>=<span class="hljs-string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h3 id="分页插件的使用"><a href="#分页插件的使用" class="headerlink" title="分页插件的使用"></a>分页插件的使用</h3><p><strong>（1）在查询功能之前使用 PageHelper.startPage(int pageNum, int pageSize) 开启分页功能</strong></p><ul><li>pageNum：当前页的页码</li><li>pageSize：每页显示的条数</li></ul><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testPage</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>    <span class="hljs-type">EmpMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(EmpMapper.class);<br><br>    <span class="hljs-comment">// 查询功能之前开启插件</span><br>    PageHelper.startPage(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>);<br>    List&lt;Emp&gt; list = mapper.selectByExample(<span class="hljs-literal">null</span>);<br>    list.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><br><p><strong>（2）在查询获取 list 集合之后</strong></p><p>使用 PageInfo&lt;T&gt; pageInfo &#x3D; new PageInfo&lt;&gt;(List&lt;T&gt; list,  int navigatePages) 获取分页相关数据</p><ul><li>list：分页之后的数据</li><li>navigatePages：导航分页的页码数</li></ul><br><p>（3）分页相关数据</p><blockquote><p>PageInfo {</p><p>​pageNum&#x3D;8, pageSize&#x3D;4, size&#x3D;2, startRow&#x3D;29, endRow&#x3D;30, total&#x3D;30, pages&#x3D;8,</p><p>​list&#x3D;Page{count&#x3D;true, pageNum&#x3D;8, pageSize&#x3D;4, startRow&#x3D;28, endRow&#x3D;32, total&#x3D;30,</p><p>​pages&#x3D;8, reasonable&#x3D;false, pageSizeZero&#x3D;false},</p><p>​prePage&#x3D;7, nextPage&#x3D;0, isFirstPage&#x3D;false, isLastPage&#x3D;true, hasPreviousPage&#x3D;true,</p><p>​hasNextPage&#x3D;false, navigatePages&#x3D;5, navigateFirstPage4, navigateLastPage8,</p><p>​navigatepageNums&#x3D;[4, 5, 6, 7, 8]</p><p>}</p><p>pageNum：当前页的页码</p><p>pageSize：每页显示的条数</p><p>size：当前页显示的真实条数</p><p>total：总记录数</p><p>pages：总页数</p><p>prePage：上一页的页码</p><p>nextPage：下一页的页码</p><p>isFirstPage&#x2F;isLastPage：是否为第一页 &#x2F; 最后一页</p><p>hasPreviousPage&#x2F;hasNextPage：是否存在上一页 &#x2F; 下一页</p><p>navigatePages：导航分页的页码数</p><p>navigatepageNums：导航分页的页码，[ 1, 2, 3, 4, 5]</p></blockquote><br></font>]]></content>
      
      
      <categories>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven</title>
      <link href="/post/7273cdc.html"/>
      <url>/post/7273cdc.html</url>
      
        <content type="html"><![CDATA[<font size="3"><meta name="referrer" content="no-referrer"><p>Maven 是一款专门为 java 项目提供构建和依赖管理支持的工具</p><p><strong>Maven 的作用：</strong></p><ul><li>管理规模庞大的 jar 包，需要专门工具</li><li>脱离 IDE 环境执行构建操作，需要专门工具</li></ul><br><p><strong>构建过程包含的主要的环节：</strong></p><ul><li>清理：删除上一次构建的结果，为下一次构建做好准备</li><li>编译：Java 源程序编译成 *.class 字节码文件</li><li>测试：运行提前准备好的测试程序</li><li>报告：针对刚才测试的结果生成一个全面的信息</li><li>打包<ul><li>Java工程：jar 包</li><li>Web工程：war 包</li></ul></li><li>安装：把一个 Maven 工程经过打包操作生成的 jar 包或 war 包存入 Maven 仓库</li><li>部署<ul><li>部署 jar 包：把一个 jar 包部署到 Nexus 私服服务器上</li><li>部署 war 包：借助相关 Maven 插件（例如cargo），将 war 包部署到 Tomcat 服务器上</li></ul></li></ul><br><p><strong>依赖：</strong></p><p>如果 A 工程里面用到了 B 工程的类、接口、配置文件等等这样的资源，那么我们就可以说 A 依赖 B</p><br><h1 id="maven-的下载和配置">Maven 的下载和配置</h1><p>先在官网下载 Maven 并解压</p><p>解压后，我们需要重点关注的核心配置文件就是：conf / settings.xml</p><br><h2 id="指定本地仓库">指定本地仓库</h2><p>本地仓库默认值：用户家目录 /.m2/repository。</p><p>由于本地仓库的默认位置是在用户的家目录下，而家目录往往是在系统盘。将来 Maven 仓库中 jar 包越来越多，仓库体积越来越大，可能会拖慢 C 盘运行速度，影响系统性能。</p><p>所以建议将 Maven 的本地仓库放在其他盘符下。配置方式如下（setting.xml）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- localRepository</span><br><span class="hljs-comment">   | The path to the local repository maven will use to store artifacts.</span><br><span class="hljs-comment">   |</span><br><span class="hljs-comment">   | Default: $&#123;user.home&#125;/.m2/repository</span><br><span class="hljs-comment">  &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</span><br><span class="hljs-comment">  --&gt;</span><br>  <span class="hljs-comment">&lt;!-- 在运行时会自动创建 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>d:\maven-repo<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h2 id="配置镜像仓库">配置镜像仓库</h2><p>Maven 下载 jar 包默认访问境外的中央仓库，而国外网站速度很慢。改成阿里云提供的镜像仓库访问国内网站，可以让 Maven 下载 jar 包的时候速度更快。</p><p>配置的方式是将下面 mirror 标签整体复制到 settings.xml 文件的 mirrors 标签的内部</p><p><strong>（1）将文件中原有的例子配置注释掉</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>maven-default-http-blocker<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>external:http:*<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Pseudo repository to mirror external repositories initially using HTTP.<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://0.0.0.0/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">blocked</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">blocked</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>（2）加入新的配置信息</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus-aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Nexus aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h2 id="配置-maven-工程的-jdk-版本">配置 Maven 工程的 JDK 版本</h2><p>将 jdk 的版本配置为 1.8 及以上</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>jdk-1.8<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">activation</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">activeByDefault</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">activeByDefault</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">jdk</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">jdk</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">activation</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.compilerVersion</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h2 id="创建-maven-项目">创建 Maven 项目</h2><p>（1）先创建一个项目所在的文件夹，此处命名为 space01</p><p>（2）利用 <code>mvn archetype:generate</code> 命令生成 Maven 工程</p><p>（3）调整新建的 maven 项目的配置信息</p><p>1、在 pom.xml 文件中，将版本号改为 4.12</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2、移除自动创建的 AppTest.java 和 App.java 两个文件</p><br><h1 id="pomxml-配置文件">pom.xml 配置文件</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- project 标签，表示对当前工程进行配置、管理 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>  <br>  <span class="hljs-comment">&lt;!-- modelVersion 代表当前 pom.xml 所使用的标签结构 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- gav 代表当前工程的坐标 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atfirtree.maven<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pro01-maven-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 表示当前工程默认的打包方式： --&gt;</span><br>  <span class="hljs-comment">&lt;!-- jar：说明是一个 java 工程 --&gt;</span><br>  <span class="hljs-comment">&lt;!-- war：说明是一个 web 工程 --&gt;</span><br>  <span class="hljs-comment">&lt;!-- pom：说明是一个用于管理其他工程的工程--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>pro01-maven-java<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.apache.org<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- properties：定义属性值，可以自定义，标签是属性名，里面是属性值 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- dependencies：配置工程的依赖信息 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- dependency：配置一个具体的依赖信息 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- gav 定位依赖的位置 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <br>      <span class="hljs-comment">&lt;!-- 配置当前依赖的范围 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h1 id="maven-目录结构q">Maven 目录结构q</h1><p><strong>（1）Java 工程的目录结构</strong><img src="https://gitee.com/Greedy_firtree/picture/raw/master/blog/image-20230912151743150.png" alt="image-20230912151743150"></p><br><p><strong>（2）web 工程的目录结构</strong></p><p><img src="https://gitee.com/Greedy_firtree/picture/raw/master/blog/image-20230912160537345.png" alt="image-20230912160537345"></p><br><p><strong>约定大于配置</strong></p><p>Maven 对于目录结构这个问题，没有采用配置的方式，而是基于约定。这样会让我们在开发过程中非常方便</p><p>目前开发领域的技术发展趋势就是：约定大于配置，配置大于编码</p><br><h1 id="执行-maven-的构建命令">执行 Maven 的构建命令</h1><p>运行 Maven 中和构建操作相关的命令时，必须进入到 pom.xml 所在的目录</p><br><h2 id="清理操作">清理操作</h2><p><code>mvn clean</code></p><p>效果：删除 target 目录</p><br><h2 id="编译操作">编译操作</h2><p>主程序编译：mvn compile</p><p>测试程序编译：mvn test-compile</p><p>主体程序编译结果存放的目录：target / classes</p><p>测试程序编译结果存放的目录：target / test-classes</p><br><h2 id="测试操作">测试操作</h2><p><code>mvn test</code></p><p>测试的报告存放的目录：target / surefile-reports</p><br><h2 id="打包命令">打包命令</h2><p><code>mvn package</code></p><p>打包的结果 —— jar 包，存放的目录：target</p><p>PS：在进行打包操作前，会先进行一个 test 测试，只有测试成功了才会打包</p><p>打包的时候也不包含测试程序</p><br><h2 id="安装操作">安装操作</h2><p><code>mvn install</code></p><p>安装的效果是将本地构建过程中生成的 jar 包存入 Maven 本地仓库。这个 jar 包在 Maven 仓库中的路径是根据它的坐标生成的</p><p>eg. 当坐标信息如下时：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atfirtree.maven<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pro01-maven-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在 Maven 仓库中生成的路径就是</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">D:\maven-repo\com\atfirtree\maven\pro01-maven-java\1.0-SNAPSHOT\pro01-maven-java-1.0-SNAPSHOT.jar<br></code></pre></td></tr></table></figure><br><h1 id="创建一个-web-工程">创建一个 web 工程</h1><h2 id="手动设置目录结构">手动设置目录结构</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">mvn archetype:generate -DarchetypeGroupId=org.apache.maven.archetypes -DarchetypeArtifactId=maven-archetype-webapp -DarchetypeVersion=1.4<br></code></pre></td></tr></table></figure><br><h2 id="创建-servlet">创建 Servlet</h2><p>（1）在 main 目录下创建 java 目录</p><p>（2）在 java 目录下创建 Servlet 类所在的包的目录</p><p>（3）在包下创建 Servlet 类，并在 web.xml 进行配置</p><br><h2 id="编译">编译</h2><p>此时直接编译会导致报错，因为 web 工程使用到了 HttpServlet 这个类，而这个类需要导包</p><br><p><strong>配置 Servlet-api.jar 包的依赖</strong></p><p>可以在 <code>https://mvnrepository.com</code> 查找需要的 jar 包的下载地址</p><p>然后在 pom.xml 中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><br><p>此时直接 <code>mvn compile</code> 编译即可</p><h2 id="打包">打包</h2><p><code>mvn package</code></p><p>将 web 工程打包为 war 包，同样也生成在 target 目录下</p><br><h2 id="将-war-包部署到-tomcat">将 war 包部署到 Tomcat</h2><p>将 war 包复制到 Tomcat / webapps 目录下</p><p>然后启动 tomcat（bin / startup.bat）</p><p>最后访问查看效果</p><br><h1 id="让-web-工程依赖-java-工程">让 Web 工程依赖 java 工程</h1><p>明确一个意识：从来只有 Web 工程依赖 Java 工程，没有反过来 Java 工程依赖 Web 工程。本质上来说，Web 工程依赖的 Java 工程其实就是 Web 工程里导入的 jar 包</p><p>最终 Java 工程会变成 jar 包，放在 Web 工程的 WEB-INF / lib 目录下</p><br><p><strong>比如我们想另 pro02-maven-web 依赖 pro01-maven-java，则需要：</strong></p><h2 id="在-pro02-maven-web-的-pomxml-中配置">在 pro02-maven-web 的 pom.xml 中配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 配置 java 工程的 gav 坐标 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atfirtree.maven<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pro01-maven-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h2 id="在-web-工程中编写测试代码">在 web 工程中，编写测试代码</h2><p>（1）补充创建目录，并添加测试类</p><p>pro02-maven-web \ src \ test \ java \ com \ atfirtree \ maven</p><br><h2 id="执行-maven-命令">执行 Maven 命令</h2><p>先执行 mvn test，发现测试类可以正常执行并输出结果</p><p>然后再 mvn package 打包，通过查看 war 包内的结构，我们看到被 Web 工程依赖的 Java 工程确实是会变成 Web 工程的 WEB-INF / lib 目录下的 jar 包</p><br><h1 id="依赖管理">依赖管理</h1><p>配置依赖范围的标签是 <code>scope</code> 标签</p><p>标签的可选值有：compile / test / proviede / system / runtime / import</p><br><h2 id="compile-amp-test">compile &amp; test</h2><table><thead><tr><th></th><th>main目录（空间）</th><th>test目录（空间）</th><th>开发过程（时间）</th><th>部署到服务器（时间）</th></tr></thead><tbody><tr><td>compile</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>test</td><td>×</td><td>√</td><td>√</td><td>×</td></tr></tbody></table><p>test 只能在有关测试的方面有效（比如 test 目录以及开发过程中），只要 不需要测试时就无效</p><p>凡是主体功能需要用得到的 jar 包都需要设置为 compile，它的有效范围比较大，默认值就是 compile</p><br><h2 id="compile-amp-provided">compile &amp; provided</h2><table><thead><tr><th></th><th>main目录（空间）</th><th>test目录（空间）</th><th>开发过程（时间）</th><th>部署到服务器（时间）</th></tr></thead><tbody><tr><td>compile</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>provided</td><td>√</td><td>√</td><td>√</td><td>×</td></tr></tbody></table><p>provided 表示已提供，就是 tomcat 服务器已经提供了的，不需要再次加入 war 包中。否则可能会与服务器自带的版本产生冲突而导致错误，比如 servlet-api.jar 就是 tomcat 自带的，我们在引入时只需要设置为 provided 即可</p><br><h2 id="依赖的传递性">依赖的传递性</h2><p>假设有A、B、C 三个依赖，A 依赖 B， B 依赖 C，即 A -&gt; B -&gt; C，那么 C 是否可以直接传递给 A 呢？</p><p>答案是取决于 B 和 C 之间的传递关系，如果 BC 之间是 compile 就可以，如果是 test / provided 就不能直接传递</p><br><h2 id="依赖的排除">依赖的排除</h2><p>假设一个工程同时依赖两个工程，这两个工程同时含有一个相同的 jar 包，但是这个 jar 包的版本可能不相同，那么就会造成冲突，此时我们就需要阻断依赖的传递性，即依赖的排除</p><br><p>eg. 我们要在 pro02-maven-web 工程在依赖 pro01-maven-java 工程的时候，阻碍 pro01-maven-java 对 commons-logging 这个 jar 包的依赖传递</p><p>那么我们需要在 pro02-maven-web 的 pom.xml 文件中修改配置信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置对 java 工程的依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atfirtree.maven<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pro01-maven-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 阻断 commons-logging 的依赖传递 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-logging<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-logging<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h1 id="继承">继承</h1><p>Maven 工程之间，A 工程继承了 B 工程，本质上是 A 工程的 pom.xml 中的配置继承了 B 工程中 pom.xml 的配置</p><p>eg. 使用 Spring 时要求所有 Spring 自己的 jar 包版本必须一致</p><p>为了能够对这些 jar 包的版本进行统一管理， 我们使用继承这个机制，将所有版本信息统一在父工程中进行管理</p><br><h2 id="1-创建父工程">1. 创建父工程</h2><p>创建的过程与上面一样</p><p>只有打包方式为 pom 的 Maven 工程能够管理其他 Maven 工程</p><p>打包方式为 pom 的 Maven 工程中不写业务代码，它是专门管理其他 Maven 工程的工程</p><p>创建完成后：</p><ul><li>修改他的打包方式为 pom</li><li>将原来默认自带的依赖删除</li></ul><br><h2 id="2-创建模块工程">2. 创建模块工程</h2><p>模块工程类似于 IDEA 中的 module，所以需要进入 pro03-maven-parent 工程的根目录</p><p>然后运行<code>mvn archetype:generate</code> 命令来创建模块工程</p><p>a. 当创建好模块工程后，就会自动完成聚合的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>pro04-maven-module<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>pro05-maven-module<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>pro06-maven-module<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br></code></pre></td></tr></table></figure><br><p>b. 创建好的模块工程也会自动完成对父工程的配置，通过 <code>parent</code> 标签指定 gav 坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atfirtree.maven<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pro03-maven-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>子工程的 groupId、version 如果和父工程一样，就可以省略不写</strong></p><br><h2 id="3-在父工程中配置依赖的统一管理">3. 在父工程中配置依赖的统一管理</h2><p>准确来说是管理依赖的版本信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 在父工程中统一管理依赖信息 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.0.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-beans<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.0.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.0.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-expression<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.0.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.0.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h2 id="子工程中引用那些被父工程管理的依赖">子工程中引用那些被父工程管理的依赖</h2><p>子工程在使用依赖时仍然要手动的添加依赖，但是可以省略版本号</p><ul><li>确实省略了 version 标签：子工程采纳的就是父工程管理的版本</li><li>没有省略 version 标签：子工程配置的版本会覆盖父工程管理的版本并最终采纳</li></ul><p><strong>在父工程中修改后子工程会直接跟着修改</strong></p><br><h2 id="在父工程中声明自定义属性">在父工程中声明自定义属性</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 通过自定义属性，统一指定Spring的版本 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 自定义标签，维护Spring版本数据 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">atguigu.spring.version</span>&gt;</span>4.3.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">atguigu.spring.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在需要的地方使用 ${} 的形式来引用自定义的属性名</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;atguigu.spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h1 id="聚合">聚合</h1><p><strong>聚合的好处：</strong></p><ul><li><p>一键执行 Maven 命令：很多构建命令都可以在 “总工程” 中一键执行</p></li><li><pre><code class="language-tex">  以 mvn install 命令为例：  Maven 要求有父工程时先安装父工程；有依赖的工程时，先安装被依赖的工程  我们自己考虑这些规则会很麻烦。但是工程聚合之后，在总工程执行 mvn install 可以一键完成安装  而且会自动按照正确的顺序执行  <figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>* 配置聚合之后，各个模块工程会在总工程中展示一个列表，让项目中的各个模块一目了然<br><br>## 聚合的配置<br><br>在总工程中配置 modules 即可<br><br>```xml<br>&lt;modules&gt;<br>    &lt;<span class="hljs-keyword">module</span>&gt;pro04-maven-<span class="hljs-keyword">module</span>&lt;/<span class="hljs-keyword">module</span>&gt;<br>    &lt;<span class="hljs-keyword">module</span>&gt;pro05-maven-<span class="hljs-keyword">module</span>&lt;/<span class="hljs-keyword">module</span>&gt;<br>    &lt;<span class="hljs-keyword">module</span>&gt;pro06-maven-<span class="hljs-keyword">module</span>&lt;/<span class="hljs-keyword">module</span>&gt;<br>&lt;/modules&gt;<br></code></pre></td></tr></table></figure></code></pre></li></ul><br><h2 id="依赖循环问题">依赖循环问题</h2><p>如果 A 工程依赖 B 工程，B 工程依赖 C 工程，C 工程又反过来依赖 A 工程，那么在执行构建操作时会报错：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tex">DANGER<br>[ERROR] [ERROR] The projects in the reactor contain a cyclic reference:<br></code></pre></td></tr></table></figure><p>这个错误的含义是：循环引用</p><br><h1 id="idea-中的使用">Idea 中的使用</h1><p>在设置中配置 maven 的本地地址和仓库地址</p><p><img src="https://gitee.com/Greedy_firtree/picture/raw/master/blog/image-20230913081353238.png" alt="image-20230913081353238"></p><br><h2 id="如何创建一个-web-工程">如何创建一个 web 工程</h2><p>先创建一个 maven 工程，然后打开模块设置，添加 web 支持</p><p><img src="https://gitee.com/Greedy_firtree/picture/raw/master/blog/image-20230913083814414.png" alt="image-20230913083814414"></p><br><p>添加 web 框架后的目录结构为：</p><p><img src="https://gitee.com/Greedy_firtree/picture/raw/master/blog/image-20230913083934628.png" alt="image-20230913083934628"></p><br><h2 id="其他操作">其他操作</h2><h3 id="运行">运行</h3><p>可以通过右侧的 ”Maven“ 标签：</p><ul><li>第一种：直接选定想要的工程，点击对应生命周期下的方法</li><li>第二种：点击上面的 ”执行Maven目标“按钮，手动输入想要完成的操作</li><li>第三种：右键工程的 pom.xml 选择 ”打开于终端“，即可在命令行执行操作</li></ul><br><p>PS：当我们选择一个操作时，会自动将该操作生命周期前的所有操作都执行一次，此时我们可以通过 -D 选择跳过一些操作，-D 与其后的参数是紧挨的</p><p><code>mvn clean install -Dmaven.test.skip=true</code></p><p>上述命令则表示跳过了 test 这个环节</p><br><h3 id="查看工程的依赖信息">查看工程的依赖信息</h3><ol><li>点击右侧的 ”Maven“ 标签</li><li>选中想要查看的工程目录下的 ”Dependence“ 即可看到依赖信息</li></ol><br><h3 id="工程导入">工程导入</h3><p>Maven 工程除了自己创建的，还有很多情况是别人创建的。而为了参与开发或者是参考学习，我们都需要导入到 IDEA 中。下面我们分几种不同情况来说明：</p><p>（1）工程压缩包</p><p>假设别人发给我们一个 Maven 工程的 zip 压缩包：maven-rest-demo.zip</p><p>可以从码云或 GitHub 上以 ZIP 压缩格式对项目代码打包下载</p><br><p>（2）来自工程目录</p><p>只要我们确认在解压目录下可以直接看到 pom.xml，那就能证明这个解压目录就是我们的工程目录。那么直接用 IDEA 打开这个目录就可以了</p><br><p>（3）设置 Maven 核心程序的位置</p><p>打开一个新的 Maven 工程，和新创建一个 Maven 工程是一样的，此时 IDEA 的 settings 配置中关于 Maven 仍然是默认值，需要再次设置</p><br><h1 id="其他核心概念">其他核心概念</h1><h2 id="生命周期">生命周期</h2><p>作用：</p><p>为了让构建过程自动化完成，Maven 设定了三个生命周期，生命周期中的每一个环节对应应构建过程中的一个操作</p><br><p><strong>Maven 有三个主要的生命周期</strong></p><table><thead><tr><th>生命周期</th><th>作用</th><th>各个环节</th></tr></thead><tbody><tr><td>Clean</td><td>清 理操作相关</td><td>pre-clean<br>clean<br>post-clean</td></tr><tr><td>Site</td><td>生成站点相关</td><td>pre-site<br> site<br>post-site<br>deploy-site</td></tr><tr><td>Default</td><td>主要构建过程</td><td>validate基础语法检查<br>generate-sources<br>process-sources<br>generate-resources<br>processresources 复制并处理资源文件，至目标目录，准备打包<br> compile 编译项目 main 目录下的源代码<br>process-classes<br>generate-test-sources<br>process-test-sources<br>generate-test-resources<br>process-test-resources 复制并处理资源文件，至目标测试目录<br>test-compile 编译测试源代码<br>process-test-classes<br>test 使用合适的单元测试框架运行测试。这些测试代码不会被打包或部署<br>prepare-package<br>package 接受编译好的代码，打包成可发布的格式，如JAR<br>pre-integration-test<br>integration-test<br>post-integration-test<br>verify<br>install将包 安装至本地仓库，以让其它项目依赖<br>deploy将最终的包复制到远程的仓库， 以让其它开发人员共享；或者部署到服务器上运行</td></tr></tbody></table><p><strong>特点：</strong></p><ul><li>前面三个生命周期彼此是独立的</li><li>在任何一个生命周期内部，<strong>执行任何一个具体环节的操作，都是从本周期最初的位置开始执行，直到指定的地方</strong></li></ul><p>Maven 之所以这么设计其实就是<strong>为了提高构建过程的自动化程度</strong>：让使用者只关心最终要干的即可，过程中的各个环节是自动执行的</p><br><h2 id="插件和目标">插件和目标</h2><p><strong>插件：</strong></p><p>Maven 的核心程序仅仅负责宏观调度，不做具体工作。具体工作都是由 Maven 插件完成的</p><p><strong>目标：</strong></p><p>一个插件可以对应多个目标，而每一个目标都和生命周期中的某一个环节对应</p><p>PS：其实可以<strong>把目标理解为一个插件的某个功能</strong></p><p>Default 生命周期中有 compile 和 test-compile 两个和编译相关的环节，这两个环节对应 compile 和 test-compile 两个目标，而这两个目标都是由 maven-compiler-plugin-3.1.jar 插件来执行</p><br><h2 id="仓库">仓库</h2><ul><li>本地仓库：在当前电脑上，为电脑上所有 Maven 工程服务</li><li>远程仓库：需要联网</li><li>局域网：我们自己搭建的 Maven 私服，例如使用 Nexus 技术<ul><li>Internet</li><li>中央仓库 -&gt; 镜像仓库：内容和中央仓库保持一致，但是能够分担中央仓库的负载，同时让用户能够就近访问，提高下载速度，例如：Nexus aliyun</li></ul></li></ul><p>PS：不要中央仓库和阿里云镜像混用，否则 jar 包来源不纯，彼此冲突</p><p><strong>本地仓库的设置：</strong></p><p>在核心程序 setting.xml 中的 localRepository 标签中 修改</p></font>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cookie/Session</title>
      <link href="/post/7516ee1e.html"/>
      <url>/post/7516ee1e.html</url>
      
        <content type="html"><![CDATA[<font size="3"><meta name="referrer" content="no-referrer"><h1 id="cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><p>是服务器通知客户端保存键值对的一种技术，每个 Cookie 的大小不能超过 4k</p><p>Cookie 不支持中文和一些特殊符号，需要经过 Base64 编码</p><h2 id="cookie-的创建"><a href="#Cookie-的创建" class="headerlink" title="Cookie 的创建"></a>Cookie 的创建</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">creatCookie</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;<br>    <span class="hljs-comment">// 创建 Cookie 对象</span><br>    <span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;key1&quot;</span>, <span class="hljs-string">&quot;value1&quot;</span>);<br><br>    <span class="hljs-comment">// 通知客户端保存 cookie</span><br>    response.addCookie(cookie);<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        response.getWriter().write(<span class="hljs-string">&quot;Cookie 创建成功s&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>客户端创建 Cookie 对象，然后通知客户端保存 Cookie</li><li>通过响应头 Set-Cookie 通知客户端保存 Cookie</li><li>客户端接到响应头后发现有 Set-Cookie，就会检查有没有这个 Cookie，没有就创建，有就修改</li></ul><br><h2 id="服务器如何获取-cookie"><a href="#服务器如何获取-Cookie" class="headerlink" title="服务器如何获取 Cookie"></a>服务器如何获取 Cookie</h2><p>通过 request.getCookies() 方法，返回一个 Cookie[] 数组</p><p>只能获取全部的 Cookie，不能指定，如果想要知道特定的 Cookie，只能通过循环判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getCookie</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;<br>    Cookie[] cookies = request.getCookies();<br><br>    <span class="hljs-keyword">for</span> (Cookie cookie : cookies) &#123;<br>        <span class="hljs-comment">// getName -- 获取 Cookie 的 key</span><br>        <span class="hljs-comment">// getValue -- 获取 Cookie 的 value</span><br><br>        <span class="hljs-keyword">try</span> &#123;<br>            response.getWriter().write(<span class="hljs-string">&quot;cookie[&quot;</span> + cookie.getName() + <span class="hljs-string">&quot;] = &quot;</span> + cookie.getValue() + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 指定 Cookie 的查找</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CookieUtils</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Cookie <span class="hljs-title function_">findCookie</span><span class="hljs-params">(String name, Cookie[] cookies)</span> &#123;<br>        <span class="hljs-keyword">if</span> (name == <span class="hljs-literal">null</span> || cookies == <span class="hljs-literal">null</span> || cookies.length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (Cookie cookie : cookies) &#123;<br>            <span class="hljs-keyword">if</span> (name.equals(cookie.getName())) <span class="hljs-keyword">return</span> cookie;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><h2 id="cookie-值的修改"><a href="#Cookie-值的修改" class="headerlink" title="Cookie 值的修改"></a>Cookie 值的修改</h2><p>（1）方法一</p><ul><li>先创建一个要修改的同名的 Cookie 对象</li><li>在构造器同时赋予新的 Cookie</li><li>调用 response.addCookie( Cookie )</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateCookie</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;<br>    <span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;key1&quot;</span>, <span class="hljs-string">&quot;newValue&quot;</span>);<br><br>    response.addCookie(cookie);<br>&#125;<br></code></pre></td></tr></table></figure><br><p>（2）方法二</p><ul><li>先查找到需要的 Cookie 对象</li><li>调用 setValue() 方法赋予新的 Cookie 值</li><li>调用 response.addCookie( Cookie )</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateCookie</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;<br>    <span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> CookieUtils.findCookie(<span class="hljs-string">&quot;key1&quot;</span>, request.getCookies());<br><br>    <span class="hljs-keyword">if</span> (cookie != <span class="hljs-literal">null</span>) &#123;<br>        cookie.setValue(<span class="hljs-string">&quot;newValue111&quot;</span>);<br>        response.addCookie(cookie);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><h2 id="cookie的生命控制"><a href="#Cookie的生命控制" class="headerlink" title="Cookie的生命控制"></a>Cookie的生命控制</h2><p>管理 Cookie 什么时候被销毁，即存活范围，通过 setMaxAge() 方法，默认值为 -1</p><ul><li>正数  –  表示在指定的秒数后删除</li><li>负数  –  表示浏览器在关闭时立即被删除</li><li>0  –  表示立即删除</li></ul><br><h2 id="cookie有效路径-path"><a href="#Cookie有效路径-Path" class="headerlink" title="Cookie有效路径 Path"></a>Cookie有效路径 Path</h2><p>Cookie 的 Path 属性可以有效的过滤需要发送给服务器的 Cookie</p><p>通过 getPath() 方法设置，用请求的地址来进行有效的过滤，默认是到工程路径</p><ul><li><p>CookieA  path&#x3D;&#x2F;工程路径</p></li><li><p>CookieB  path&#x3D;&#x2F;工程路径&#x2F;abc</p></li></ul><p>请求地址如下</p><ol><li><a href="http://localhost:port/工程路径/a.html">http://localhost:port/工程路径/a.html</a><ul><li>CookieA 发送</li><li>CookieB 不发送</li></ul></li><li><a href="http://localhost:port/工程路径/abc/a.html">http://localhost:port/工程路径/abc/a.html</a><ul><li>CookieA 和 CookieB 都发送</li></ul></li></ol><br><h2 id="利用-cookie-实现无输入登录"><a href="#利用-Cookie-实现无输入登录" class="headerlink" title="利用 Cookie 实现无输入登录"></a>利用 Cookie 实现无输入登录</h2><ol><li>先创建 LoginServlet，实现登录的业务操作，并且把用户名存储到 Cookie 中</li><li>在登陆页面 login.jsp 中为 username 设置为 Cookie 的值</li></ol><br><p><strong>LoginServlet.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        doPost(req, resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;yishan&quot;</span>.equals(username) &amp;&amp; <span class="hljs-string">&quot;123456&quot;</span>.equals(password)) &#123;<br>            <span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;username&quot;</span>, username);<br>            <br>            <span class="hljs-comment">// 必须将 Cookie 的存活范围设置为 7 天</span><br>            <span class="hljs-comment">// 否则默认情况下 浏览器页面关闭就会销毁 Cookie</span><br>            cookie.setMaxAge(<span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span> * <span class="hljs-number">7</span>);<br><br>            resp.addCookie(cookie);<br>            System.out.println(<span class="hljs-string">&quot;登陆成功&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;登陆失败&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>login.jsp</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;body&gt;<br>    &lt;form action=<span class="hljs-string">&quot;loginServlet&quot;</span>&gt;<br>        用户名：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span> value=<span class="hljs-string">&quot;$&#123;cookie.username.value&#125;&quot;</span>&gt; &lt;br&gt;<br>        密码：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;password&quot;</span>&gt; &lt;br&gt;<br>        &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;登录&quot;</span>&gt;<br>    &lt;/form&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><br><h1 id="session"><a href="#Session" class="headerlink" title="Session"></a>Session</h1><p>1、Session 就是一个接口（HttpSession）</p><p>2、Session 就是会话。它是用来维护一个客户端和服务器之间关联的一种技术</p><p>3、每个客户端都有自己的一个 Session 会话</p><br><p><strong>经常使用 Session 来保存用户登录之后的信息</strong></p><ul><li>Cookie 保存在客户端（浏览器端）</li><li>Session 则是保存在服务器端</li></ul><br><h2 id="创建-x2f-获取"><a href="#创建-x2F-获取" class="headerlink" title="创建 &#x2F; 获取"></a>创建 &#x2F; 获取</h2><p>创建和获取 Session 的API是一样的，都是 request.getSession()</p><p>第一次调用是：创建 Session 会话</p><p>之后调用都是：获取前面创建好的 Session 会话对象</p><p><strong>判断是否是初次创建：isNew()</strong></p><p>true  –  表示刚创建</p><p>false  –  表示在获取之前已经创建</p><br><p>每个会话都有一个唯一的 id，通过 getId() 方法获取 Session 会话的 id 值</p><br><h2 id="session-生命周期控制"><a href="#Session-生命周期控制" class="headerlink" title="Session 生命周期控制"></a>Session 生命周期控制</h2><ul><li>setMaxInactiveInterval()：设置 Session 的超时时间，超过指定的时长，Session 就会被销毁</li><li>getMaxInactiveInterval()：获取 Session 的超时时长</li></ul><p>Session 的默认时长为 30 分钟，可以在 Tomcat 服务器的配置文件 web.xml 中修改配置信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">session-config</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">session-timeout</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">session-timeout</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">session-config</span>&gt;</span><br></code></pre></td></tr></table></figure><br><p><strong>session 的超时时间指的是，客户端两次请求的最大间隔时长</strong></p><p><strong>负数表示永不超时</strong></p><p>invalidate()  –  表示设置为立即超时无效</p><h1 id="cookie-和-session"><a href="#Cookie-和-Session" class="headerlink" title="Cookie 和 Session"></a>Cookie 和 Session</h1><p>服务器每次创建一个 Session 会话的时候，都会创建一个 Cookie 对象</p><p>这个对象的 key 为 JSESSIONID，value 为 新创建出来的 Session 的 id</p><br><p>之后有了 Cookie 之后，每次请求客户端都会把 Session 的 id 以 Cookie 的形式发送给服务器</p><p>有了 Session 的唯一标识 id，就可以在内存中找到相应的 Session 并获取信息</p><br><p>当删除掉 Session 的 Cookie 后，服务器因为无法得到 id 值，所以会再次创建一个新的 Session 会话对象，就算没有超过超时时间也会创建一个新的 Session</p><br><h1 id="filter-过滤器"><a href="#Filter-过滤器" class="headerlink" title="Filter 过滤器"></a>Filter 过滤器</h1><p>是 JavaWeb 的三大组件之一，作用是拦截请求、过滤响应</p><p><strong>使用步骤</strong></p><ul><li>先创建一个类实现 Filter 接口，并完成相应方法<ul><li>其中 doFilter() 方法是用来完成拦截，进行权限检查</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br><br>    <span class="hljs-comment">// 简单的业务处理，进行拦截检查</span><br>    <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> (HttpServletRequest) servletRequest;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> request.getSession().getAttribute(<span class="hljs-string">&quot;user&quot;</span>);<br><br>    <span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 没有登陆，进行拦截</span><br>        request.getRequestDispatcher(<span class="hljs-string">&quot;/login.jsp&quot;</span>).forward(servletRequest, servletResponse);<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 让程序继续访问</span><br>        filterChain.doFilter(servletRequest, servletResponse);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>再在 web.xml 中进行配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>FilterTest<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>com.firtree.Filter.FilterTest<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>FilterTest<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--表示对 http://ip:port/工程路径/admin 下的全部内容进行过滤拦截--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/admin/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>包含几个方法</p><ol><li><p>构造器方法</p></li><li><p>init 初始化方法</p></li><li><p>doFilter 过滤方法</p></li><li><p>destory 销毁</p></li></ol><p>第一和第二步在 web 工程启动的时候执行</p><p>第三步在每次拦截到请求时都会执行</p><p>第四步在 web 工程关闭时执行，同时也会被销毁</p><br><h2 id="filterconfig"><a href="#FilterConfig" class="headerlink" title="FilterConfig"></a>FilterConfig</h2><p>是 Filter 过滤器的配置文件类，每次在创建 Filter 时都会同时创建一个 FilterConfih 类</p><p>包含了配置文件的配置信息，主要作用：</p><ul><li>获取 Filter 的名称</li><li>获取在 Filter 中配置的 init-param 初始化参数</li><li>获取 ServletContext 对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>    System.out.println(<span class="hljs-string">&quot;Filter 的名称为&quot;</span> + filterConfig.getFilterName());<br><br>    <span class="hljs-comment">// 获取 初始化参数 bookName</span><br>    System.out.println(<span class="hljs-string">&quot;bookName = &quot;</span> + filterConfig.getInitParameter(<span class="hljs-string">&quot;bookName&quot;</span>));<br><br>    <span class="hljs-comment">// 获取 ServletContext 方法</span><br>    <span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> filterConfig.getServletContext();<br><br>&#125;<br></code></pre></td></tr></table></figure><br><h2 id="filterchain-过滤器链"><a href="#FilterChain-过滤器链" class="headerlink" title="FilterChain 过滤器链"></a>FilterChain 过滤器链</h2><p>FilterChain.doFilter() 方法的作用</p><ol><li>执行下一个 Filter 过滤器（如果有的话）</li><li>执行目标资源（没有更进一步的拦截检查）</li></ol><br><p><img src="https://gitee.com/Greedy_firtree/picture/raw/master/blog/image-20230908111316425.png" alt="image-20230908111316425"></p><p>上图的执行顺序实际上为：</p><p>前置代码1  –&gt;  前置代码2  –&gt;  执行目标资源  –&gt;  后置代码2  –&gt; 后置代码1</p><br><p><strong>多个过滤器的执行顺序：</strong></p><ul><li>注解配置：按照类名的字符串比较规则比较，值小的先执行<ul><li>如 AFilter 和 BFilter, AFilter 就先执行了</li></ul></li><li>web.xml 配置：谁定义在上边，谁先执行</li></ul><br><p><strong>多个过滤器的执行特点：</strong></p><ol><li>所有 filter 和目标资源默认都执行在同一个线程中</li><li>多个 filter 共同执行时（包括目标资源），共用一个 request 对象</li></ol><br><h2 id="filter-拦截路径"><a href="#Filter-拦截路径" class="headerlink" title="Filter 拦截路径"></a>Filter 拦截路径</h2><p><strong>（1）精确匹配</strong></p><p><code>&lt;url-pattern&gt;/target.jsp&lt;/url-pattern&gt; </code></p><p>表示请求地址必须为 <a href="http://ip:port/工程路径/target.jsp">http://ip:port/工程路径/target.jsp</a></p><br><p><strong>（2）目录匹配</strong></p><p><code>&lt;url-pattern&gt;/admin/*&lt;/url-pattern&gt;</code></p><p>表示请求地址为 <a href="http://ip:port/工程路径/admin">http://ip:port/工程路径/admin</a> 目录下的所有内容</p><br><p><strong>（3）后缀名匹配</strong></p><p><code>&lt;url-pattern&gt;*.jsp&lt;/url-pattern&gt;</code></p><p>表示请求地址必须以 .jsp 结尾，不能以斜杠开始，且后缀可以是任何字符串，比如 .abc 也可以</p><p><strong>Filter 只关心地址是否正确，不关心资源是否存在</strong></p><br><h1 id="threadlocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h1><p>该类提供了线程局部变量，可以解决多线程的安全问题</p><p>具体地说，ThreadLocal 可以给当前线程关联一个数据（可以是变量、对象、数组、集合等）</p><p><strong>特点：</strong></p><ol><li>可以为当前线程绑定一个数据（就像 Map 一样可以存取数据，但是 key 为当前线程</li><li>每一个 ThreadLocal 都只能为当前线程关联一个数据</li><li>每个 ThreadLocal 对象创建的时候，一般都是 static 类型</li><li>ThreadLocal 中保存的数据，在线程结束后，由 JVM 自动释放</li></ol><br><h1 id="json"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><p>是一种轻量级的数据交换格式</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>是一种由键值对组成，并且由大括号包围</p><p>每个键由引号引起来，键和值之间用冒号进行分割，多组键值对之间用逗号分隔</p></font>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cookie </tag>
            
            <tag> Session </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSP</title>
      <link href="/post/78b18e67.html"/>
      <url>/post/78b18e67.html</url>
      
        <content type="html"><![CDATA[<font size="3"><meta name="referrer" content="no-referrer"><h1 id="jsp"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h1><p>JSP 是一种动态网页技术，主要的作用是 替代 servlet 程序 回传 HTML 页面</p><p>JSP 页面主要是由 HTML 和 JSP 代码组成的，JSP 代码通过 <code>&lt;% %&gt;</code> 加入到 HTML 代码中</p><p>本质上，jsp 就是一个 servlet 程序</p><br><h2 id="jsp-基本元素"><a href="#JSP-基本元素" class="headerlink" title="JSP 基本元素"></a>JSP 基本元素</h2><h3 id="jsp-脚本元素"><a href="#JSP-脚本元素" class="headerlink" title="JSP 脚本元素"></a>JSP 脚本元素</h3><p>JSP 脚本元素包括 JSP 声明、JSP 表达式、JSP 代码块，在页面初始化时被初始化</p><p><strong>JSP 声明</strong></p><p><code>&lt;%! 声明变量、方法、类 %&gt;</code></p><p>可以只声明变量，也可以在声明的同时提供初始值</p><br><p><strong>JSP 表达式脚本</strong></p><p><code>&lt;%=表达式%&gt;</code></p><p>是由变量、常量组成的算式，将数值转化为字符串嵌入 html 页面，并直接输出</p><p>注意事项：</p><ul><li>不能用分号结尾 </li><li>标签内部不能有空格</li><li>表达式脚本都会被翻译成为 out.print() 输出到页面上</li><li>表达式脚本会被翻译到 _jspService() 方法中，所以该方法中的对象（request, response）都可以直接调用</li></ul><br><p><strong>JSP 代码块</strong></p><p><code>&lt;% 符合 Java 语法的代码块 %&gt;</code></p><p>代码块脚本也会被翻译到 _jspService() 方法中，所以该方法中的对象（request, response）也可以直接调用</p><p>代码脚本也可以跟表达式脚本一起组合使用 </p><br><h4 id="jsp-指令元素"><a href="#JSP-指令元素" class="headerlink" title="JSP 指令元素"></a>JSP 指令元素</h4><p>JSP 指令的语法格式：</p><p><code>&lt;% 指令名称 属性1=&quot;属性值1&quot; 属性2=&quot;属性值2&quot; ... %&gt;</code></p><br><p>JSP 指令包括：page 指令、include 指令和 taglib 指令</p><ul><li>page 指令：定义整个页面的全局属性</li><li>include 指令：用于包含一个文本或代码的文件</li><li>taglib 指令：用来引用自定义的标签或第三方标签库</li></ul><br><h4 id="page-指令"><a href="#page-指令" class="headerlink" title="page 指令"></a>page 指令</h4><p>用来定义 jsp 页面中的全局属性，描述了与页面相关的一些信息</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>language</td><td>指定用到的脚本语言，默认是 java</td></tr><tr><td>import</td><td>用于导入 Java包和 Java 类</td></tr><tr><td>pageEncoding</td><td>指定页面所用编码</td></tr></tbody></table><p>注意事项：</p><ol><li>在每个页面中可以使用多个 <code>&lt;%@ page %&gt;</code>指令，分别描述不同的属性</li><li>除了 import，每个属性仅能使用一次</li><li>区分大小写</li></ol><br><h4 id="include-指令"><a href="#include-指令" class="headerlink" title="include 指令"></a>include 指令</h4><p>称为文件加载指令，将其他的文件插入 JSP 页面，被插入的文件必须保证插入后形成的新文件符合 JSP 页面的语法规则</p><p><code>&lt;%@ include file=&quot;&quot; %&gt;</code></p><p>file 属性指定你要包含的 jsp 页面的路径，地址中第一个斜杠 &#x2F; 表示为 <a href="http://ip:port/工程路径/，映射到代码的">http://ip:port/工程路径/，映射到代码的</a> web 目录</p><ol><li>静态包含不会翻译被包含的 jsp 页面</li><li>静态包含其实是把被包含的 jsp 页面的代码拷贝到包含的位置执行输出</li></ol><br><h3 id="jsp-动作元素"><a href="#JSP-动作元素" class="headerlink" title="JSP 动作元素"></a>JSP 动作元素</h3><p>用来控制 JSP 引擎的行为，主要有以下六个动作元素</p><ul><li><code>&lt;jsp:include&gt;</code>：在页面得到请求时动态包含另一个网页</li><li><code>&lt;jsp:forward&gt;</code>：转向</li><li><code>&lt;jsp:plugin&gt;</code>：连接客户端的 Applet 或者 Bean 组件</li><li><code>&lt;jsp:useBean&gt;</code>：应用 JavaBean 组件</li><li><code>&lt;jsp:serProperty&gt;</code>：设置 JavaBean 的属性值</li><li><code>&lt;jsp:getProperty&gt;</code>：获取 JavaBean 的属性值并输出</li></ul><br><h4 id="jspinclude"><a href="#jsp-include" class="headerlink" title="jsp:include"></a>jsp:include</h4><p><code>&lt;jsp:include page=&quot;&quot; /&gt;</code></p><p>动态包含另一个页面</p><ul><li>当前页面和被包含的页面是各自独立被翻译的</li><li>当执行到该动作标签时，才加载执行被包含文件</li></ul><br><h4 id="jspforward"><a href="#jsp-forward" class="headerlink" title="jsp:forward"></a>jsp:forward</h4><p><code>&lt;jsp:forward page=&quot;&quot; /&gt;</code></p><p>页面的转向：停止当前页面的执行，转向另一个页面，浏览器的地址栏不会跳转</p><br><h4 id="jspparam"><a href="#jsp-param" class="headerlink" title="jsp:param"></a>jsp:param</h4><p>param不能单独使用，而是作为 jsp:include 或 jsp:forward 的子标签使用，用于传递数据</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;jsp:include page=<span class="hljs-string">&quot;&quot;</span>&gt;<br>&lt;jsp:param name=<span class="hljs-string">&quot;变量名1&quot;</span> value=<span class="hljs-string">&quot;变量值1&quot;</span> /&gt;<br>&lt;jsp:param name=<span class="hljs-string">&quot;变量名2&quot;</span> value=<span class="hljs-string">&quot;变量值2&quot;</span> /&gt;<br>...<br>&lt;/jsp:include&gt;<br></code></pre></td></tr></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>（1）html 注释</p><p><code>&lt;!-- 注释 --&gt;</code></p><p>html 注释会被翻译到 java 源代码中。在 _ jspService 方法里，以 out.writer 输出到客户端</p><br><p>（2）Java 注释</p><p><code>&lt;%  // 注释  %&gt;</code></p><p>java 注释会被翻译到 java 源代码中</p><br><p>（3）jsp 注释</p><p><code>&lt;%-- 注释 --&gt;</code></p><p>jsp 注释可以注掉 jsp 页面中所有代码</p><br><h2 id="jsp-内置对象"><a href="#JSP-内置对象" class="headerlink" title="JSP 内置对象"></a>JSP 内置对象</h2><p>九大内置对象</p><table><thead><tr><th>对象名称</th><th>有效范围</th><th>说明</th></tr></thead><tbody><tr><td>application</td><td>application</td><td>表示应用程序上下文</td></tr><tr><td>config</td><td>page</td><td>允许将初始化数据传递给一个 jsp 页面</td></tr><tr><td>exception</td><td>page</td><td>异常处理</td></tr><tr><td>out</td><td>page</td><td>提供对输出流的访问</td></tr><tr><td>page</td><td>page</td><td>代表 jsp 页面对应的 Servlet 类实例</td></tr><tr><td>pageContext</td><td>page</td><td>是 jsp 页面本身的上下文</td></tr><tr><td>request</td><td>request</td><td>提供对请求数据的访问</td></tr><tr><td>response</td><td>page</td><td>用来向客户端输入数据</td></tr><tr><td>session</td><td>session</td><td>用来保存在服务器端与一个客户端之间需要保存的数据，当客户端关闭所有网页时自动消失</td></tr></tbody></table><br><p><strong>内置对象的作用域</strong></p><table><thead><tr><th>作用域</th><th>说明</th></tr></thead><tbody><tr><td>page</td><td>当前 jsp 页面范围内有效</td></tr><tr><td>request</td><td>一次请求内有效</td></tr><tr><td>session</td><td>一个会话范围内有效</td></tr><tr><td>application</td><td>整个 web 工程范围内都有效</td></tr></tbody></table><h2 id="response-和-out-的输出"><a href="#response-和-out-的输出" class="headerlink" title="response 和 out 的输出"></a>response 和 out 的输出</h2><p>response.write() 和 out.write() 都会输出内容到客户端</p><p>但是以下代码会先输出 “response” 再输出 “out”</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<br>    out.write(<span class="hljs-string">&quot;out&quot;</span>);<br>    response.getWriter().write(<span class="hljs-string">&quot;response&quot;</span>);<br>%&gt;<br></code></pre></td></tr></table></figure><p>原因是，当 jsp 页面中所有代码执行完成后会做以下两个操作：</p><ol><li>执行 out.flush() 操作，会把 out 缓冲区中的数据追加写入到 response 缓冲区末尾</li><li>会执行 response 的刷新操作，把全部数据写给客户端</li></ol><p><strong>由于 jsp 翻译后，底层源码都是使用 out 来进行输出，所以我们在 jsp 页面一般统一使用 out，避免打乱页面输出顺序</strong></p><ul><li>out.write() 输出字符串没有问题，但是输出数值时，会直接转为字符导致错误</li><li>out.print() 输出任意数据都没有问题（都转换成为字符串后调用的 write 输出）</li></ul><p><strong>综上，在 jsp 页面中，可以统一使用 out.print() 来进行输出</strong></p><br><h2 id="response-的重定向"><a href="#response-的重定向" class="headerlink" title="response 的重定向"></a>response 的重定向</h2><p><code>response.sendRedirect(&quot;xxx.jsp&quot;)</code></p><p>具体的规则和 servlet 中一样</p><br><h2 id="listener-监听器"><a href="#Listener-监听器" class="headerlink" title="Listener 监听器"></a>Listener 监听器</h2><p>JavaWeb 的三大组件之一，是 JavaEE 的规范（接口）</p><p>监听器的作用是，监听某种事物的变化。然后通过回调函数，反馈给客户（程序）去做一些相应的处理</p><p>目前只有 <strong>ServletContextListener</strong> 监听器仍在使用</p><br><ul><li>ServletContextListener 可以监听 ServletContext 对象的创建和销毁</li><li>ServletContext 对象在 web 工程启动的时候创建，在 web 工程停止的时候销毁</li></ul><br><p>使用步骤：</p><ol><li>编写一个类实现 ServletContextListener 接口</li><li>实现两个回调方法</li><li>到 web.xml 中配置相关信息</li></ol><p><strong>MyServletContextListenerImpl.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyServletContextListenerImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ServletContextListener</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextInitialized</span><span class="hljs-params">(ServletContextEvent servletContextEvent)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ServletContextListener 对象被创建了&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextDestroyed</span><span class="hljs-params">(ServletContextEvent servletContextEvent)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ServletContextListener 对象被销毁了&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>web.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>com.firtree.listener.MyServletContextListenerImpl<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h2 id="请求转发的流程"><a href="#请求转发的流程" class="headerlink" title="请求转发的流程"></a>请求转发的流程</h2><ol><li>客户端获取关键字，然后传给 Servlet 程序</li><li>servlet 的功能<ol><li>获取请求的参数</li><li>业务处理</li><li>将数据信息保存到 request 对象中，然后请求转发</li></ol></li><li>jsp 则专门用来显示数据信息<ol><li>从 request 中获取数据信息</li><li>输出可用信到客户端，显示</li></ol></li></ol><br><h1 id="el-表达式"><a href="#EL-表达式" class="headerlink" title="EL 表达式"></a>EL 表达式</h1><p>EL 表达式的全称是：Expression Language，是表达式语言</p><p>作用：主要是代替 jsp 页面中的表达式脚本在 jsp 页面中进行数据的输出，因为简洁</p><br><p><strong>表达式脚本输出空值时是 null，而 EL 表达式输出的是空字符串</strong></p><p>基本语法：<code>$&#123; 表达式 &#125;</code></p><br><p>若不指定查找范围，则依次在 page、request、session、application 范围中查找（从小到大）</p><p>EL 在输出属性值时，会自动的寻找该属性的get 方法，若没有 get 方法则会产生错误</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%=request.getScheme()%&gt;<br>$&#123; pageContext.request.scheme &#125;<br></code></pre></td></tr></table></figure><p><strong>以上两种写法相同</strong></p><br><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>算数运算符和逻辑运算符同 java，比较特殊的有</p><p><strong>empty 运算符</strong></p><p>可以判断一个数据是否为空，以下几种情况为空：</p><ol><li>值为 null 值的时候，为空</li><li>值为空串的时候，为空</li><li>值是 Object 类型数组，长度为零的时候，为空</li><li>集合，元素个数为零的时候，为空</li></ol><br><p><strong>. 运算和 [] 运算</strong></p><p><code>$&#123;name, property&#125; 或 $&#123;name[&quot;property&quot;]&#125;</code></p><ul><li>[] 主要用于访问数组、列表或其他集合对象的属性</li><li>. 主要用于访问对象的属性</li><li>[] 和 . 在访问对象属性时可以通用，但当属性名中有特殊字符（, - +）时需要用[]，且要加引号 [“xxx”]</li></ul><br><h2 id="el-内部对象"><a href="#EL-内部对象" class="headerlink" title="EL 内部对象"></a>EL 内部对象</h2><p>EL 提供了 11 个可直接使用的内部对象</p><table><thead><tr><th>类别</th><th>对象</th><th>描述</th></tr></thead><tbody><tr><td>JSP</td><td>pageContext</td><td>获取当前 jsp 页面的信息</td></tr><tr><td>作用域</td><td>pageScope</td><td>获取页面（page）范围的属性的值</td></tr><tr><td>&#x2F;</td><td>requestScope</td><td>获取请求（request）范围的属性的值</td></tr><tr><td>&#x2F;</td><td>sessionScope</td><td>获取会话（session）范围的属性的值</td></tr><tr><td>&#x2F;</td><td>applicationScope</td><td>获取应用（application）范围的属性的值</td></tr><tr><td>请求参数</td><td>param</td><td>获取单个指定请求参数的值</td></tr><tr><td>&#x2F;</td><td>paramValues</td><td>获取请求参数的所有的值数组</td></tr><tr><td>请求头</td><td>header</td><td>获取单个指定请求头信息的值</td></tr><tr><td>&#x2F;</td><td>headerValues</td><td>获取请求头信息的所有的值数组</td></tr><tr><td>Cookie</td><td>cookie</td><td>获取 request 中的 cookie 集</td></tr><tr><td>初始化参数</td><td>initParam</td><td>获取初始化参数信息</td></tr></tbody></table><br><h2 id="el-对表单数据的访问"><a href="#EL-对表单数据的访问" class="headerlink" title="EL 对表单数据的访问"></a>EL 对表单数据的访问</h2><p>（1）提交信息页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;doSubmit.jsp&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;music&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;basketball&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;swimming&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>（2）doSubmit.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;body&gt;<br>    姓名：$&#123;param.name&#125; &lt;br&gt;<br>    爱好：$&#123;paramValues.hobby[<span class="hljs-number">0</span>]&#125; $&#123;paramValues.hobby[<span class="hljs-number">1</span>]&#125; $&#123;paramValues.hobby[<span class="hljs-number">2</span>]&#125;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><br><h2 id="el-对作用域内属性的访问"><a href="#EL-对作用域内属性的访问" class="headerlink" title="EL 对作用域内属性的访问"></a>EL 对作用域内属性的访问</h2><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;body&gt;<br>    &lt;%<br>      pageContext.setAttribute(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;page&quot;</span>);<br>      request.setAttribute(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;request&quot;</span>);<br>      session.setAttribute(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;session&quot;</span>);<br>      application.setAttribute(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;application&quot;</span>);<br>    %&gt;<br><br>    &lt;br&gt; &lt;br&gt;<br>    页面范围 a 值：$&#123; pageScope.a &#125; &lt;br&gt;<br>    请求范围 a 值：$&#123; requestScope.a &#125; &lt;br&gt;<br>    会话范围 a 值：$&#123; sessionScope.a &#125; &lt;br&gt;<br>    应用范围 a 值：$&#123; applicationScope.a &#125; &lt;br&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><br><h2 id="el-对-web-工程初始参数的访问"><a href="#EL-对-web-工程初始参数的访问" class="headerlink" title="EL 对 web 工程初始参数的访问"></a>EL 对 web 工程初始参数的访问</h2><p>（1）web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>book<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>JAVA<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br></code></pre></td></tr></table></figure><p>（2）initParam.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--  以下两种写法输出同样的结果  --%&gt;<br>&lt;%=application.getInitParameter(<span class="hljs-string">&quot;book&quot;</span>)%&gt; &lt;br&gt;<br>$&#123; initParam.book &#125;<br></code></pre></td></tr></table></figure><br><h2 id="el-对-javabean-的访问"><a href="#EL-对-JavaBean-的访问" class="headerlink" title="EL 对 JavaBean 的访问"></a>EL 对 JavaBean 的访问</h2><p><code>$&#123;name.property&#125;</code></p><p>表示查找指定名称的作用域变量，并输出指定的 JavaBean 的属性值</p><p>PS：寻找的属性必须有 get 方法，否则会有错误</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;jsp:useBean id=<span class="hljs-string">&quot;BookBean&quot;</span> class=<span class="hljs-string">&quot;com.firtree.POJO.BookBean&quot;</span> scope=<span class="hljs-string">&quot;session&quot;</span> /&gt;<br><br>$&#123; BookBean.bookId &#125; &lt;br&gt;<br>$&#123; BookBean.bookName &#125;<br></code></pre></td></tr></table></figure><br><h1 id="jstl"><a href="#JSTL" class="headerlink" title="JSTL"></a>JSTL</h1><p>是 JSP 标准标签库，可以提高开发效率，减少 JSP 页面中的代码数量</p><p>EL 主要是为了替代 表达式脚本，JSTL 主要是为了替代 代码脚本</p><table><thead><tr><th>功能类型</th><th>URI</th><th>prefix</th><th>功能</th></tr></thead><tbody><tr><td>核心库</td><td><a href="http://java.sun.com/jsp/jstl/core">http://java.sun.com/jsp/jstl/core</a></td><td>c</td><td>操作范围变量、流程控制、URL 生成和操作</td></tr><tr><td>函数</td><td><a href="http://java.sun.com/jsp/jstl/functions">http://java.sun.com/jsp/jstl/functions</a></td><td>fn</td><td>字符串处理函数</td></tr><tr><td>格式化</td><td><a href="http://java.sun.com/jsp/jstl/fmt">http://java.sun.com/jsp/jstl/fmt</a></td><td>fmt</td><td>数字及日期数据格式化</td></tr><tr><td>数据库存取（不用）</td><td><a href="http://java.sun.com/jsp/jstl/sql">http://java.sun.com/jsp/jstl/sql</a></td><td>sql</td><td>操作关系数据库</td></tr><tr><td>XML 处理（不用）</td><td><a href="http://java.sun.com/jsp/jstl/xml">http://java.sun.com/jsp/jstl/xml</a></td><td>x</td><td>操作通过 XML 表示的数据</td></tr></tbody></table><br><p><strong>在 web 中使用 jstl 的步骤如下：</strong></p><ol><li>导入 Jar 包</li><li>在 JSP 页面中添加 taglib 指令<code>&lt;%@ taglib prefix=&quot;&quot; url=&quot;&quot; %&gt;</code></li><li>在页面中使用标签 <code>&lt;c:out value=&quot;$&#123;1+2&#125;&quot; /&gt;</code></li></ol><p>PS：JSTL 通常和 EL 表达式结合使用，EL 作为 JSTL 标签的属性值</p><br><h2 id="常用的-jstl-标签"><a href="#常用的-JSTL-标签" class="headerlink" title="常用的 JSTL 标签"></a>常用的 JSTL 标签</h2><h3 id="ltcoutgt"><a href="#lt-c-out-gt" class="headerlink" title="&lt;c:out&gt;"></a>&lt;c:out&gt;</h3><p>用于在 JSP 页面中显示数据</p><p><code>&lt;c:out value=&quot;$&#123; user.userName &#125;&quot; default=&quot;默认值&quot; /&gt;</code></p><br><h3 id="ltcsetgt"><a href="#lt-c-set-gt" class="headerlink" title="&lt;c:set&gt;"></a>&lt;c:set&gt;</h3><p><code>&lt;c:set target=&quot;&quot; value=&quot;&quot; var=&quot;&quot; property=&quot;&quot; /&gt;</code>用于保存数据</p><p>eg. 将 test.testinfo 的值保存到 session 的 test2 中，其中 test 是一个 JavaBean 实例</p><p><code>&lt;c:set value=&quot;$&#123;test.testinfo&#125;&quot; var=&quot;test2&quot; scope=&quot;session&quot; /&gt; </code></p><p>将对象 cust.address 的 city 属性保存到变量 city 中</p><p><code>&lt;c:out target=&quot;$&#123;cust.address&#125;&quot; value=&quot;&#123;city&#125;&quot; property=&quot;city&quot; /&gt;</code></p><p>注意事项：</p><ul><li>value  –  要保存的信息，可以是 EL 表达式或者常量</li><li>target  –  需要修改属性的变量名，一般是 JavaBean 实例</li><li>property  –  需要修改的 JavaBean 属性</li><li>var  –  需要保存信息的变量</li><li>scope  –  保存信息的变量范围</li></ul><p>**若指定了 target ，则必须指定 property  **</p><br><h3 id="ltcremovegt"><a href="#lt-c-remove-gt" class="headerlink" title="&lt;c:remove&gt;"></a>&lt;c:remove&gt;</h3><p><code>&lt;c:remove var=&quot;&quot; scope=&quot;&quot; /&gt;</code> 用于删除数据</p><ul><li>var  – 要删除的变量</li><li>scope  –  被删除变量的范围</li></ul><br><h3 id="ltcifgt"><a href="#lt-c-if-gt" class="headerlink" title="&lt;c:if&gt;"></a>&lt;c:if&gt;</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;test-condition&quot;</span>&gt;<br>    业务处理<br>&lt;/c:<span class="hljs-keyword">if</span>&gt;<br></code></pre></td></tr></table></figure><ul><li>test  –  表示需要判断的条件</li><li>var  –  表示保存条件结果的变量名</li><li>scope  –  保存条件结果的变量范围</li></ul><br><h3 id="ltcchoosegt"><a href="#lt-c-choose-gt" class="headerlink" title="&lt;c:choose&gt;"></a>&lt;c:choose&gt;</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;c:choose&gt;<br>    &lt;c:when test=<span class="hljs-string">&quot;condition1&quot;</span>&gt;<br>处理业务<br>    &lt;/c:when&gt;<br>    &lt;c:otherwise&gt;<br>处理业务<br>    &lt;/c:otherwise&gt;<br>&lt;/c:choose&gt;<br></code></pre></td></tr></table></figure><ol><li>标签里不能使用 html 注释，要使用 jsp 注释</li><li>when 标签的父标签一定要是 choose 标签</li></ol><br><h3 id="ltcforeachgt"><a href="#lt-c-forEach-gt" class="headerlink" title="&lt;c:forEach&gt;"></a>&lt;c:forEach&gt;</h3><p>（1）通过索引遍历</p><p><code>&lt;c:forEach begin=&quot;&quot; end=&quot;&quot; var=&quot;&quot; step=&quot;&quot;&gt;&lt;/c:forEach&gt;</code></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;c:forEach <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;i&quot;</span> begin=<span class="hljs-string">&quot;1&quot;</span> end=<span class="hljs-string">&quot;10&quot;</span> step=<span class="hljs-string">&quot;2&quot;</span>&gt;<br>    $&#123;i&#125; &lt;br&gt;<br>&lt;/c:forEach&gt;<br></code></pre></td></tr></table></figure><ul><li>begin  –  表示开始的索引</li><li>end  –  表示结束的索引</li><li>var  –  表示循环的变量</li><li>step  –  表示循环步长</li></ul><br><p>（2）遍历 Object 数组</p><p><code>&lt;c:forEach items=&quot;&quot; var=&quot;&quot;&gt;&lt;/c:forEach&gt;</code></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<br>    request.setAttribute(<span class="hljs-string">&quot;arr&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;byebye&quot;</span>, <span class="hljs-string">&quot;hehe&quot;</span>&#125;);<br>%&gt;<br><br>&lt;c:forEach items=<span class="hljs-string">&quot;$&#123; requestScope.arr &#125;&quot;</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;<br>    $&#123; item &#125; &lt;br&gt;<br>&lt;/c:forEach&gt;<br></code></pre></td></tr></table></figure><ul><li>items  –  表示遍历的集合</li><li>var  – 表示当前遍历到的数据</li></ul><p><strong>类似于 for (Object item : items)</strong></p><br><p>（3）遍历集合</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<br>    HashMap&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();<br>    map.put(<span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-number">1111</span>);<br>    map.put(<span class="hljs-string">&quot;bbb&quot;</span>, <span class="hljs-number">2222</span>);<br>    map.put(<span class="hljs-string">&quot;ccc&quot;</span>, <span class="hljs-number">3333</span>);<br>    request.setAttribute(<span class="hljs-string">&quot;map&quot;</span>, map);<br>%&gt;<br>&lt;c:forEach <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;item&quot;</span> items=<span class="hljs-string">&quot;$&#123; requestScope.map &#125;&quot;</span>&gt;<br>    $&#123; item &#125; --- $&#123; item.key &#125; --- $&#123; item.value &#125; &lt;br&gt;<br>&lt;/c:forEach&gt;<br><br><br>&lt;%<br>    ArrayList&lt;BookBean&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BookBean</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;book1&quot;</span>));<br>    list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BookBean</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;book2&quot;</span>));<br>    request.setAttribute(<span class="hljs-string">&quot;list&quot;</span>, list);<br>%&gt;<br>&lt;c:forEach <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;item&quot;</span> items=<span class="hljs-string">&quot;$&#123;requestScope.list&#125;&quot;</span>&gt;<br>    $&#123; item &#125; --- $&#123; item.bookId &#125; --- $&#123; item.bookName &#125; &lt;br&gt;<br>&lt;/c:forEach&gt;<br></code></pre></td></tr></table></figure><br><h1 id="文件的上传"><a href="#文件的上传" class="headerlink" title="文件的上传"></a>文件的上传</h1><p>1、要有一个 form 标签，method&#x3D;post 请求</p><p>2、form 标签的 encType 属性值必须为 multipart &#x2F; form-data 值</p><p>3、在 form 标签中使用 input type&#x3D;file，添加上传的文件</p><p>4、编写服务器代码接收，处理上传的数据</p><p><strong>encType&#x3D;multipart&#x2F; form- data 表示提交的数据以多段的形式进行拼接，然后以二进制流的形式发送给服务器</strong></p><p><img src="https://gitee.com/Greedy_firtree/picture/raw/master/blog/image-20230902142028954.png" alt="image-20230902142028954"></p><br><p>我们一般使用 commons-fileupload.jar 完成文件的上传</p><p>commons-fileupload.jar 需要依赖 commons-io.jar </p><p><strong>常见的类和 API</strong></p><ul><li><p>ServletFileUpload 类，用于解析上传的数据</p></li><li><p>Fileltem 类，表示每一个表单项</p></li><li><p>boolean ServletFileUpload.isMultipartContent(HttpServletRequest request) 判断当前上传的数据格式是否是多段的格式</p></li><li><p>public List&lt;FileItem&gt; parseRequest(HttpServletRequest request) 解析上传的数据</p></li><li><p>boolean FileItem.isFormField() 判断当前这个表单项，是否是普通的表单项</p><ul><li>true 表示普通类型的表单项</li><li>false 表示上传的文件类型</li></ul></li><li><p>String FileItem.getFieldName() 获取表单项的 name 属性值</p></li><li><p>String FileItem.getString() 获取当前表单项的值</p></li><li><p>String FileItem.getName( ) 获取上传的文件名</p></li><li><p>void FileItem.write( file ) 将上传的文件写到参数 file 所指向的硬盘位置</p></li></ul><br><p>eg. 上传文件</p><p>（1）a.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;body&gt;<br>    &lt;form action=<span class="hljs-string">&quot;http://localhost:8080/JspTry/a&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span> enctype=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;<br>        姓名：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span>&gt; &lt;br&gt;<br>        &lt;input type=<span class="hljs-string">&quot;file&quot;</span> name=<span class="hljs-string">&quot;photo&quot;</span>&gt; &lt;br&gt;<br>        &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;上传&quot;</span>&gt; &lt;br&gt;<br>    &lt;/form&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p>（2）a.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">a</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><br>        <span class="hljs-comment">// 先判断是否是多段数据</span><br>        <span class="hljs-keyword">if</span> (ServletFileUpload.isMultipartContent(req)) &#123;<br>            <span class="hljs-comment">// 创建 FileItemFactory 工厂实现类</span><br>            <span class="hljs-type">FileItemFactory</span> <span class="hljs-variable">fileItemFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DiskFileItemFactory</span>();<br><br>            <span class="hljs-comment">// 创建用于解析上传数据的工具类</span><br>            <span class="hljs-type">ServletFileUpload</span> <span class="hljs-variable">servletFileUpload</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletFileUpload</span>(fileItemFactory);<br><br>            <span class="hljs-comment">// 解析上传的数据，得到一个表单项 FileItem</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                List&lt;FileItem&gt; list = servletFileUpload.parseRequest(req);<br><br>                <span class="hljs-comment">// 循环判断每一个表单项，是普通类型，还是上传的文件</span><br>                <span class="hljs-keyword">for</span> (FileItem fileItem : list) &#123;<br>                    <span class="hljs-keyword">if</span> (fileItem.isFormField()) &#123;<br>                        <span class="hljs-comment">// 普通类型</span><br>                        System.out.println(<span class="hljs-string">&quot;表单项的 name = &quot;</span> + fileItem.getFieldName());<br>                        System.out.println(<span class="hljs-string">&quot;表单项的 value = &quot;</span> + fileItem.getString(<span class="hljs-string">&quot;UTF-8&quot;</span>));<br>                    &#125;<br>                    <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-comment">// 上传的文件</span><br>                        System.out.println(<span class="hljs-string">&quot;上传文件的 name 属性 = &quot;</span> + fileItem.getFieldName());<br>                        System.out.println(<span class="hljs-string">&quot;上传文件的 文件名 = &quot;</span> + fileItem.getName());<br><br>                        fileItem.write(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;d:\\&quot;</span> + fileItem.getName()));<br>                    &#125;<br>                &#125;<br><br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（3）结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs null">文件已上传<br>表单项的 name = username<br>表单项的 value = cys<br>上传文件的 name 属性 = photo<br>上传文件的 文件名 = 11.jpg<br></code></pre></td></tr></table></figure><br><h1 id="文件的下载"><a href="#文件的下载" class="headerlink" title="文件的下载"></a>文件的下载</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">b</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">// 获取要下载的文件名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">downloadFileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;11.jpg&quot;</span>;<br><br>        <span class="hljs-comment">// 读取要下载的文件内容，ServletContext</span><br>        <span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> getServletContext();<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">resourceAsStream</span> <span class="hljs-operator">=</span> servletContext.getResourceAsStream(<span class="hljs-string">&quot;/file/&quot;</span> + downloadFileName);<br><br>        <span class="hljs-comment">// 获取要下载的文件的类型</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">mimeType</span> <span class="hljs-operator">=</span> servletContext.getMimeType(<span class="hljs-string">&quot;/file/&quot;</span> + downloadFileName);<br>        System.out.println(<span class="hljs-string">&quot;文件的类型 = &quot;</span> + mimeType);<br><br>        <span class="hljs-comment">// 再回传之前，通过响应头告诉客户端返回的数据类型</span><br>        resp.setContentType(mimeType);<br><br>        <span class="hljs-comment">// 在告诉客户端收到的数据是用于下载使用</span><br>        resp.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment;filename=&quot;</span> + downloadFileName);<br><br>        <span class="hljs-comment">// 把下载的文件内容回传给客户端</span><br>        <span class="hljs-type">ServletOutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> resp.getOutputStream();<br>        IOUtils.copy(resourceAsStream, outputStream);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当传输的文件名含有中文时会导致错误，我们一般采用 URL 编码</p><p>url 编码就是 将汉字转换为 %xxx%xxx 的格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> URLEncoder.encode(<span class="hljs-string">&quot;芜湖.jpg&quot;</span>, <span class="hljs-string">&quot;UTF-8&quot;</span>));<br></code></pre></td></tr></table></figure><br><p><strong>Base64 编码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Base64Test</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> UnsupportedEncodingException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;这是需要进行编码的字符串&quot;</span>;<br>        Base64.<span class="hljs-type">Encoder</span> <span class="hljs-variable">encoder</span> <span class="hljs-operator">=</span> Base64.getEncoder();<br>        <span class="hljs-type">byte</span>[] encode = encoder.encode(str.getBytes(<span class="hljs-string">&quot;UTF-8&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;编码后的字节数组为 &quot;</span> + encode);<br><br>        <span class="hljs-comment">// 解码</span><br>        Base64.<span class="hljs-type">Decoder</span> <span class="hljs-variable">decoder</span> <span class="hljs-operator">=</span> Base64.getDecoder();<br>        <span class="hljs-type">byte</span>[] decode = decoder.decode(encode);<br>        System.out.println(<span class="hljs-string">&quot;解码后的字符串为 &quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(decode, <span class="hljs-string">&quot;UTF-8&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="mvc"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h1><p>MVC全称：Model 模型、View 视图、Controller 控制器</p><p>View 视图：只负责数据和界面的显示，不接受任何与显示数据无关的代码，便于程序员和美工的分工合作：JSP &#x2F; HTML</p><p>Controller 控制器：只负责接收请求，调用业务层的代码处理请求，然后派发页面，是一个“调度者”的角色：Servlet</p><p>Model 模型：将与业务逻辑相关的数据封装为具体的 JavaBean 类，其中不掺杂任何与数据处理相关的代码：JavaBean</p><p>MVC是一种思想，理念是将软件代码拆分成为组件，单独开发，组合使用（目的还是为了解耦合）</p><br><p><strong>一个项目工程一般都分为前台和后台</strong></p><ul><li>前台是给普通用户使用，一般不需要权限检查， 就可以访问的资源</li><li>后台是给管理员使用，一般都需要权限检查，才可以访问的资源 &#x2F; 页面</li></ul><br><p>我们通过不同的路径区分前台和后台</p><ul><li>前台 &#x2F;client &#x2F; xxxServlet</li><li>后台 &#x2F;manager&#x2F;xxxServlet</li></ul></font>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC</title>
      <link href="/post/8fe47ff4.html"/>
      <url>/post/8fe47ff4.html</url>
      
        <content type="html"><![CDATA[<font size="3"><meta name="referrer" content="no-referrer"><h1 id="概念">概念</h1><p>JDBC 是一种用于执行 SQL 语句的 Java API，由一组类与接口组成，通过调用这些类和接口所提供的方法，可以使用标准的 SQL 语言来获取数据</p><p>是典型的 “面向接口编程”</p><br><ul><li>java语言只提供规范（接口），规定数据库操作方法</li><li>各数据库厂商根据 java 的 jdbc 规范，完成具体的实现驱动代码（jar），实现代码可以不同，但是方法都相同</li></ul><br><h1 id="jdbc-重要的类和接口">JDBC 重要的类和接口</h1><table><thead><tr><th>类或接口</th><th>作用</th></tr></thead><tbody><tr><td>java.sql.DriverManager</td><td>该类处理驱动程序的加载，建立数据库连接</td></tr><tr><td>java.sql.Connection</td><td>该接口实现对特定数据库的连接</td></tr><tr><td>java.sql.Satement</td><td>该接口用于执行静态 SQL 语句并返回他所生成结果的对象</td></tr><tr><td>java.sql.PreparedStatement</td><td>该接口表示预编译的 SQL 语句对象，派生自 Satement</td></tr><tr><td>java.sql.CallableStatement</td><td>该接口用于执行 SQL 语句存储过程的对象，派生自PreparedStatement</td></tr><tr><td>java.sql.ResultSet</td><td>该接口表示数据库结果集的数据表，针对查询操作</td></tr></tbody></table><h1 id="使用步骤">使用步骤</h1><ol><li>注册驱动</li><li>获取连接</li><li>创建数据库操作对象用于执行 SQL 语句</li><li>执行语句，并获取返回结果</li><li>处理执行结果</li><li>释放资源，先创建的后关闭</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">jdbcDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 注册驱动的两种方式，版本在8以下的不加&#x27;cj&#x27;</span><br>        Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>        <span class="hljs-comment">// DriverManager.registerDriver(new Driver());</span><br><br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/shan&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123456&quot;</span>;<br><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, username, password);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update account set money = 89000 where id = 1&quot;</span>;<br><br>        <span class="hljs-type">Statement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> conn.createStatement();<br>        <br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> stmt.executeUpdate(sql);<br><br>        System.out.println(count);<br><br>        stmt.close();<br>        conn.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="注册驱动">注册驱动</h2><p>对于注册驱动的第二种方式：</p><p>DriverManager.registerDriver(new Driver());</p><p>会在 DriverManager 的静态代码块，和创建 Driver 时分别创建两次驱动早成资源浪费，所以基本不用这种方式</p><br><h2 id="获取连接">获取连接</h2><p>DriverManager 类提供了 getConnection 方法，用来建立与数据库的连接</p><p>（1）三个参数，分别为数据库描述，用户名，密码</p><p><code>getConnection(String url, String user, String password)</code></p><br><p>（2）两个参数，info 提供了一些属性，包括 user和 password</p><p><code>getConnection(String url, Properties info)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Properties</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>info.put(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>);<br>info.put(<span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>);<br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, info);<br></code></pre></td></tr></table></figure><br><p>（3）一个参数，将 user 和 password 都添加在 url 中的可选信息位置</p><p><code>getConnection(String url)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/shan?user=root&amp;password=123456&quot;</span>;<br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url);<br></code></pre></td></tr></table></figure><br><h2 id="创建数据库的操作对象">创建数据库的操作对象</h2><p><strong>Statement</strong></p><p>使用 Connection 的 createStatement 方法可以创建一个连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, username, password);<br><span class="hljs-type">Statement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> conn.createStatement();<br></code></pre></td></tr></table></figure><br><p><strong>PrepareStatement</strong></p><p>是 SQL 预处理类接口，使用其实现类处理 SQL 可以提高系统的执行效率</p><p>（1）使用 PrepareStatement() 方法创建，并且在创建的时候指定 sql 语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Statement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> conn.createStatement();<br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">pstmt</span> <span class="hljs-operator">=</span> conn.prepareStatement(sql);<br></code></pre></td></tr></table></figure><p>（2）使用带参数的 SQL语句，？是占位符，表示参数值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from account where age &gt;= ? and sex = ?&quot;</span>;<br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">preparedStatement</span> <span class="hljs-operator">=</span> conn.prepareStatement(sql);<br></code></pre></td></tr></table></figure><p>因为没有指定参数值，所以执行前，需要先向 PrepareStatement 对象传递参数值</p><p>格式：<code>PrepareStatement对象.setXxx(position, value);</code></p><p>Xxx 表示数据类型，position 表示参数的下标（从 1 开始）</p><br><h2 id="执行-sql">执行 SQL</h2><p>由于创建对象有 Statement 和 PrepareStatement 两种，执行时也分为不同的情况</p><p>**Statement **</p><ul><li>ResultSet executeQuery(String sql)：执行查找操作，返回一个结果集</li><li>int executeUpdate(String sql)：执行非查询操作，返回影响的行数</li></ul><br><p><strong>PrepareStatement</strong></p><p>也有 ResultSet executeQuery 和 executeUpdate 两种方式，唯一的区别是：不带参数</p><p>因为创建 PrepareStatement 对象时已经指定 SQL 语句</p><br><h2 id="处理结果">处理结果</h2><p>java.sql.ResultSet 类似于一个数据表，具有指向其当前数据行的指针，最初时指向第一行记录的上面</p><p>（1）next() 方法指向下一行数据，没有下一行就返回 false</p><p>（2）getXxx(String columnLable | int )  查找当前行的列数据</p><ul><li>PrepareStatement  –  列名，如果有别名就写别名</li><li>columnIndex  –  列的下标，从左到右，从 1 开始</li></ul><br><p>ResultSet 有专门的方法可以得到列的集合</p><p><code>ResultSetMetaData metaData = ans.getMetaData();</code></p><h1 id="扩展提升">扩展提升</h1><h2 id="自增长主键回显">自增长主键回显</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 在创建 PreparedStatement 告知携带回数据库自增长的主键</span><br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">preparedStatement</span> <span class="hljs-operator">=</span> conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);<br><br><span class="hljs-comment">// 接收</span><br><span class="hljs-type">ResultSet</span> <span class="hljs-variable">generatedKeys</span> <span class="hljs-operator">=</span> preparedStatement.getGeneratedKeys();<br></code></pre></td></tr></table></figure><h2 id="优化批量插入">优化批量插入</h2><ul><li>addBatch()：添加需要批量处理的 SQL 语句或参数</li><li>executeBatch()：执行批量处理语包</li><li>clearBatch()： 清空批处理包的语句</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> SQLException, ClassNotFoundException &#123;<br><br>    Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br><br>    <span class="hljs-comment">// 1. 路径需要添加 rewriteBatchedStatements=true，表示允许批量加入</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/shan?rewriteBatchedStatements=true&quot;</span>;<br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>);<br><br>    <span class="hljs-comment">// 2. sql 语句必须使用 values，并且不能加分号，因为要追加内容</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into account(name, money) values (?, ?)&quot;</span>;<br>    <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">preparedStatement</span> <span class="hljs-operator">=</span> conn.prepareStatement(sql);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++) &#123;<br>        preparedStatement.setString(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;xiao&quot;</span>);<br>        preparedStatement.setInt(<span class="hljs-number">2</span>, <span class="hljs-number">2000000</span>);<br><br>        <span class="hljs-comment">// 3. 不执行，将数据追加到 values 后面</span><br>        preparedStatement.addBatch();<br>    &#125;<br><br>    <span class="hljs-comment">// 4. 全部追加完成后，再一次性执行即可</span><br>    <span class="hljs-type">int</span>[] ints = preparedStatement.executeBatch();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> anInt : ints) System.out.println(anInt);<br><br>    preparedStatement.close();<br>    conn.close();<br>&#125;<br></code></pre></td></tr></table></figure><p>executeBatch() 方法会返回一个数组</p><p>int[] ints = preparedStatement.executeBatch();</p><p>数组中的各值可能会是</p><ol><li>大于或等于零的数字，表示命令已成功处理，并且是更新计数，给出了数据库中受命令影响的行数</li><li><code>SUCCESS_ NO_ INFO</code> ( -2)，表示命令为处理成功，但受影响的行数为未知</li></ol><br><h2 id="jdbc-中实现数据库事务">jdbc 中实现数据库事务</h2><p>通过 try catch 来实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>    conn.setAutoCommit(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-comment">// 此处执行语句</span><br><br>    <span class="hljs-comment">// 没有错误就提交事务</span><br>    conn.commit();<br>&#125;<br><span class="hljs-keyword">catch</span> (Exception e) &#123;<br>    conn.rollback();<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>！！必须要保证事物都在同一个连接里</strong></p><ul><li>事务添加是在业务方法中</li><li>利用 try catch代码块开启事务和提交事务，和事务回滚</li><li>将 connection 传入 dao 层即可，dao只负责使用，不需要close()</li></ul><br><p>eg. 通过事务实现转账操作</p><p>（1）BankService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BankService</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException, ClassNotFoundException &#123;<br>        transfer(<span class="hljs-string">&quot;lvdandan&quot;</span>, <span class="hljs-string">&quot;ergouzi&quot;</span>, <span class="hljs-number">1000</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transfer</span><span class="hljs-params">(String addAccount, String subAccount, <span class="hljs-type">int</span> money)</span> <span class="hljs-keyword">throws</span> SQLException, ClassNotFoundException &#123;<br>        <span class="hljs-type">BankDao</span> <span class="hljs-variable">bankDao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BankDao</span>();<br><br>        Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/shan?user=root&amp;password=123456&quot;</span>;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url);<br><br>        <span class="hljs-comment">// 开启事务</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            conn.setAutoCommit(<span class="hljs-literal">false</span>);<br><br>            <span class="hljs-comment">// 执行业务</span><br>            bankDao.add(conn, addAccount, money);<br>            System.out.println(<span class="hljs-string">&quot;=====================&quot;</span>);<br>            bankDao.sub(conn, subAccount, money);<br><br>            <span class="hljs-comment">// 提交事务</span><br>            conn.commit();<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-comment">// 有错，事务回滚</span><br>            conn.rollback();<br><br>            <span class="hljs-comment">// 抛出异常</span><br>            <span class="hljs-keyword">throw</span> e;<br>        &#125;<br>        <span class="hljs-keyword">finally</span> &#123;<br>            conn.close();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（2）BankDao.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BankDao</span> &#123;<br><br>    <span class="hljs-comment">// 加钱操作</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Connection conn,  String account, <span class="hljs-type">int</span> money)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, SQLException &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update bankAccount set money = money + ? where account = ?&quot;</span>;<br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">preparedStatement</span> <span class="hljs-operator">=</span> conn.prepareStatement(sql);<br>        preparedStatement.setInt(<span class="hljs-number">1</span>, money);<br>        preparedStatement.setString(<span class="hljs-number">2</span>, account);<br><br>        preparedStatement.executeUpdate();<br><br>        preparedStatement.close();<br><br>        System.out.println(<span class="hljs-string">&quot;加钱成功&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 减钱操作</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sub</span><span class="hljs-params">(Connection conn, String account, <span class="hljs-type">int</span> money)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, SQLException &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update bankAccount set money = money - ? where account = ?&quot;</span>;<br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">preparedStatement</span> <span class="hljs-operator">=</span> conn.prepareStatement(sql);<br>        preparedStatement.setInt(<span class="hljs-number">1</span>, money);<br>        preparedStatement.setString(<span class="hljs-number">2</span>, account);<br><br>        preparedStatement.executeUpdate();<br><br>        preparedStatement.close();<br><br>        System.out.println(<span class="hljs-string">&quot;减钱成功&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="druid-连接池技术">Druid 连接池技术</h1><p>实现 Connection 连接的复用</p><p>Druid 有两种编码方式，硬编码方式为直接传入参数，不灵活因此不推荐，主要介绍软编码方式</p><p>（1）外部配置：将 Druid 需要的配置参数都放在 src 下的 druid.properties 中</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">driverClassName</span> = <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">username</span> = <span class="hljs-string">root</span><br><span class="hljs-attr">password</span> = <span class="hljs-string">123456</span><br><span class="hljs-attr">url</span> = <span class="hljs-string">jdbc:mysql://127.0.0.1:3306/shan</span><br></code></pre></td></tr></table></figure><p>（2）利用工厂模式，传入配置文件对象，创建连接池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">// 1. 读取外部配置文件</span><br>    <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">stream</span> <span class="hljs-operator">=</span> DruidTest.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;druid.properties&quot;</span>);<br>    properties.load(stream);<br><br><br>    <span class="hljs-comment">// 2. 使用工厂模式创建连接池</span><br>    <span class="hljs-type">DataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> DruidDataSourceFactory.createDataSource(properties);<br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> dataSource.getConnection();<br><br>    <span class="hljs-comment">// 处理业务</span><br><br>    <span class="hljs-comment">// 连接池中 connection.close() 表示连接回收，并不是关闭</span><br>    preparedStatement.close();<br>    connection.close();<br><br>&#125;<br></code></pre></td></tr></table></figure><br><h2 id="utils-工具类10">Utils 工具类1.0</h2><p>我们可以编写 jdbcUtils 工具类来帮我们实现创建 / 回收连接池 的操作，使用时直接调用即可</p><ul><li>编写一个工具类，并且对外提供一个获取连接和回收连接的方法</li><li>推荐使用静态方法</li></ul><p>实现：</p><ul><li>创建连接池对象（实例化一次）  –  可以使用静态代码块实现</li><li>编写对外提供的方法（静态方法）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">jdbcUtils</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">DataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">stream</span> <span class="hljs-operator">=</span> DruidTest.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;druid.properties&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            properties.load(stream);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            dataSource = DruidDataSourceFactory.createDataSource(properties);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-keyword">return</span> dataSource.getConnection();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">freeConnection</span><span class="hljs-params">(Connection conn)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        conn.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样我们在使用 连接池 时可以直接调用工具类的静态方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test02</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> jdbcUtils.getConnection();<br><br>    <span class="hljs-comment">// 处理业务</span><br><br>    jdbcUtils.freeConnection(conn);<br>&#125;<br></code></pre></td></tr></table></figure><br><h2 id="utils-工具类20">Utils 工具类2.0</h2><p>考虑事务的情况下，如何将同一个线程的不同方法获取同一个连接</p><p>ThreadLocal  –  可以为同一个线程存储共享变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">jdbcUtils2</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">DataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ThreadLocal&lt;Connection&gt; tl = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">stream</span> <span class="hljs-operator">=</span> DruidTest.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;druid.properties&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            properties.load(stream);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            dataSource = DruidDataSourceFactory.createDataSource(properties);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-comment">// 先查看是否有线程本地变量</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> tl.get();<br>        <span class="hljs-keyword">if</span> (connection == <span class="hljs-literal">null</span>) &#123;<br>            connection = dataSource.getConnection();<br>            tl.set(connection);<br>        &#125;<br>        <span class="hljs-keyword">return</span> connection;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">freeConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> tl.get();<br>        <span class="hljs-keyword">if</span> (conn != <span class="hljs-literal">null</span>) &#123;<br>            tl.remove();    <span class="hljs-comment">// 清空线程本地变量</span><br>            conn.setAutoCommit(<span class="hljs-literal">false</span>);  <span class="hljs-comment">// 设置事务</span><br>            conn.close();   <span class="hljs-comment">// 回收连接池</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="将查询结果封装到-listltmapgt">将查询结果封装到 List&lt;Map&gt;</h1><p>因为当连接 Connection 关闭以后，结果集 ResultSet 就无法再使用，所以一般情况下为了方便处理查询结果，我们会将查询结果封装到 List 中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> SQLException, ClassNotFoundException &#123;<br><br>    Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/shan&quot;</span>;<br>    <span class="hljs-type">Properties</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>    info.put(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>);<br>    info.put(<span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>);<br>    url = <span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/shan?user=root&amp;password=123456&quot;</span>;<br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url);<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from account where money &gt; ?&quot;</span>;<br>    <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">preparedStatement</span> <span class="hljs-operator">=</span> conn.prepareStatement(sql);<br><br>    <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>    System.out.println(<span class="hljs-string">&quot;请输入你要查询的工资：&quot;</span>);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">money</span> <span class="hljs-operator">=</span> scanner.nextInt();<br><br>    preparedStatement.setInt(<span class="hljs-number">1</span>, money);<br><br>    <span class="hljs-type">ResultSet</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> preparedStatement.executeQuery();<br>    <span class="hljs-comment">// 获取结果集的列数据</span><br>    <span class="hljs-type">ResultSetMetaData</span> <span class="hljs-variable">metaData</span> <span class="hljs-operator">=</span> ans.getMetaData();<br>    <span class="hljs-comment">// 获取列数</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">columnCount</span> <span class="hljs-operator">=</span> metaData.getColumnCount();<br><br>    ArrayList&lt;Map&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">while</span> (ans.next()) &#123;<br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= columnCount; i++) &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> ans.getObject(i);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">columnLabel</span> <span class="hljs-operator">=</span> metaData.getColumnLabel(i);<br>            map.put(columnLabel, value);<br>        &#125;<br><br>        list.add(map);<br>    &#125;<br><br>    System.out.println(list);<br><br><br>    preparedStatement.close();<br>    conn.close();<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="dbutils">DBUtils</h1><p>我们可以使用 DBUtils 来将查询结果封装到集合中，DBUtils 是 Apache 组织提供的一个开源 JDBC 工具类库，它是对 JDBC 的封装，使用 DBUtils 能极大简化 jdbc 编码的工作量</p><ul><li>QueryRunner类：该类封装了 SQL 的执行，是线程安全的。可以实现增、删、改、查、批处理</li><li>ResultSetHandler接口：该接口用于处理j ava.sql.ResultSet，将数据按要求转换为另种形式</li></ul><br><table><thead><tr><th>类</th><th>说明</th></tr></thead><tbody><tr><td>ScalarHandle</td><td>返回单行单列</td></tr><tr><td>ArrayHandler</td><td>把结果集中的第一行数据转成对象数组</td></tr><tr><td>ArrayListHandler</td><td>把结果集中的每一行数据都转成一个数组， 再存放到 List 中</td></tr><tr><td>BeanHandler</td><td>将结果集中的第一行数据封装到一个对应的 JavaBean 实例中</td></tr><tr><td>BeanListHandler</td><td>将结果集中的每一行数据都封装到一个对应的 JavaBean 实例中，存放到 List 里</td></tr><tr><td>ColumnListHandler</td><td>将结果集中某一列的数据存放到 List 中</td></tr><tr><td>KeyedHandler(name)</td><td>将结果集中的每行数据都封装到 Map 里，再把这些 map 再存到一个 map 里，其 key 为指定的 key</td></tr><tr><td>MapHandler</td><td>将结果集中的第一行数据封装到一个 Map 里，key 是列名， value 就是对应的值</td></tr><tr><td>MapListHandler</td><td>将结果集中的每一行数据都封装到一个 Map 里，然后再存放到 List</td></tr></tbody></table><h1 id="高级应用层封装-basedao">高级应用层封装 BaseDao</h1><p>基本上每一个数据表都应该有一个对应的 DAO 接口及其实现类，发现对所有表的操作（增、删、改、查）代码重复度很高，所以可以抽取公共代码，给这些 DAO 的实现类抽取一个公共的父类，我们称为 BaseDao</p><br><p>我们在封装时，可以将操作大致分为 DQL 语句 和 DML 语句</p><p><strong>手写版</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseDao</span> &#123;<br><br>    <span class="hljs-comment">// 非查询操作，返回影响的行数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">executeUpdate</span><span class="hljs-params">(String sql, Object ... params)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> jdbcUtils2.getConnection();<br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">preparedStatement</span> <span class="hljs-operator">=</span> connection.prepareStatement(sql);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; params.length; i++) &#123;<br>            preparedStatement.setObject(i + <span class="hljs-number">1</span>, params[i]);<br>        &#125;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> preparedStatement.executeUpdate();<br><br>        preparedStatement.close();<br>        <span class="hljs-keyword">if</span> (connection.getAutoCommit()) &#123;<br>            <span class="hljs-comment">// 表示没有开启事务</span><br>            jdbcUtils2.freeConnection();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> rows;<br>    &#125;<br><br>    <span class="hljs-comment">// 查询操作，需要传入一个泛型，确定查询表的类型</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; List&lt;T&gt; <span class="hljs-title function_">executeQuery</span><span class="hljs-params">(Class&lt;T&gt; clazz, String sql, Object ... params)</span> <span class="hljs-keyword">throws</span> SQLException, InstantiationException, IllegalAccessException, NoSuchFieldException &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> jdbcUtils2.getConnection();<br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">preparedStatement</span> <span class="hljs-operator">=</span> connection.prepareStatement(sql);<br><br>        <span class="hljs-keyword">if</span> (params != <span class="hljs-literal">null</span> &amp;&amp; params.length != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; params.length; i++) &#123;<br>                preparedStatement.setObject(i + <span class="hljs-number">1</span>, params[i]);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> preparedStatement.executeQuery();<br>        <span class="hljs-comment">// 处理结果集</span><br>        ArrayList&lt;T&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-type">ResultSetMetaData</span> <span class="hljs-variable">metaData</span> <span class="hljs-operator">=</span> ans.getMetaData();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">columnCount</span> <span class="hljs-operator">=</span> metaData.getColumnCount();<br><br>        <span class="hljs-keyword">while</span> (ans.next()) &#123;<br>            <span class="hljs-type">T</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> clazz.newInstance(); <span class="hljs-comment">// 调用类的无参构造器实例化对象</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= columnCount; i++) &#123;<br>                <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> ans.getObject(i);<br><br>                <span class="hljs-comment">// 获取列名</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">propertyName</span> <span class="hljs-operator">=</span> metaData.getColumnLabel(i);<br><br>                <span class="hljs-comment">// 根据列名反射，给对象的属性赋值</span><br>                <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(propertyName);<br>                field.setAccessible(<span class="hljs-literal">true</span>); <span class="hljs-comment">// 属性可以设置，打破 private 限制</span><br><br>                field.set(t, value);<br>            &#125;<br>            list.add(t);<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>借助 DBUtils 完成</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BasicDao</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">QueryRunner</span> <span class="hljs-variable">queryRunner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 处理非查询操作</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> sql sql语句</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> params sql语句中占位符具体的值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回影响的行数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">update</span><span class="hljs-params">(String sql, Object ... params)</span> &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            connection = jdbcUtils.getConnection();<br>            <span class="hljs-keyword">return</span> queryRunner.update(connection, sql, params);<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            jdbcUtils.freeConnection(connection);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回多个对象，及查询结果为多行</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> sql sql语句</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> clazz 传入一个类的对象，比如 Account.class</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> params 传入 sql 语句中占位符具体的值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>  根据 Account.class 返回对应的 ArrayList 集合</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> List&lt;T&gt; <span class="hljs-title function_">queryForMulti</span><span class="hljs-params">(String sql, Class&lt;T&gt; clazz, Object ... params)</span> &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            connection = jdbcUtils.getConnection();<br>            List&lt;T&gt; query = queryRunner.query(connection, sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanListHandler</span>&lt;T&gt;(clazz), params);<br>            <span class="hljs-keyword">return</span> query;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            jdbcUtils.freeConnection(connection);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回单个对象，及查询结果为一行</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> sql sql语句</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> clazz 传入一个类的对象，比如 Account.class</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> params 传入 sql 语句中占位符具体的值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回查询的对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">queryForSingle</span><span class="hljs-params">(String sql, Class&lt;T&gt; clazz, Object ... params)</span> &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            connection = jdbcUtils.getConnection();<br>            <span class="hljs-type">T</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> queryRunner.query(connection, sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanHandler</span>&lt;T&gt;(clazz), params);<br>            <span class="hljs-keyword">return</span> query;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            jdbcUtils.freeConnection(connection);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回单个数值，及查询结果为单行单列</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> sql sql语句</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> params 传入 sql 语句中占位符具体的值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回查询的结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">queryForScalar</span><span class="hljs-params">(String sql, Object ... params)</span> &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            connection = jdbcUtils.getConnection();<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> queryRunner.query(connection, sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScalarHandler</span>(), params);<br>            <span class="hljs-keyword">return</span> query;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            jdbcUtils.freeConnection(connection);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></font>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Servlet</title>
      <link href="/post/1401e6d1.html"/>
      <url>/post/1401e6d1.html</url>
      
        <content type="html"><![CDATA[<font size="3"><meta name="referrer" content="no-referrer"><h1 id="xml"><a href="#XML" class="headerlink" title="XML"></a>XML</h1><p>可扩展的标记语言，主要用于描述配置信息</p><h2 id="xml-语法"><a href="#xml-语法" class="headerlink" title="xml 语法"></a>xml 语法</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span> ?&gt;</span><br><span class="hljs-comment">&lt;!--以上为xml文件的声明--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">books</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>111<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">auther</span>&gt;</span>222<span class="hljs-tag">&lt;/<span class="hljs-name">auther</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>333<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">books</span>&gt;</span><br></code></pre></td></tr></table></figure><p>分为单标签和双标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">books</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;111&quot;</span> <span class="hljs-attr">auther</span>=<span class="hljs-string">&quot;222&quot;</span> <span class="hljs-attr">price</span>=<span class="hljs-string">&quot;333&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>标签可以有属性，属性的值必须用引号</p><br><ul><li>大小写敏感，标签必须闭合</li><li>文档必须有根元素，即没有父标签且仅出现一次的顶级元素（Object）</li><li>特殊符号需要转义</li><li>文本区域（CDATA）不会解析xml <code>&lt;![CDATA[  xxxxx  ]]&gt;</code></li></ul><h2 id="xml-解析"><a href="#xml-解析" class="headerlink" title="xml 解析"></a>xml 解析</h2><p>html 和 xml 都是标记型文档，都可以用 dom 对象来解析</p><p><strong>通过Dom4j 解析 xml 文档</strong></p><p>先导入 jar 包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">// 获取输入流对象，用来获取 xml 文档</span><br>    <span class="hljs-type">SAXReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SAXReader</span>();<br>    <span class="hljs-type">Document</span> <span class="hljs-variable">document</span> <span class="hljs-operator">=</span> reader.read(<span class="hljs-string">&quot;src/books.xml&quot;</span>);<br><br>    <span class="hljs-comment">// 得到根元素</span><br>    <span class="hljs-type">Element</span> <span class="hljs-variable">rootElement</span> <span class="hljs-operator">=</span> document.getRootElement();<br>    List&lt;Element&gt; books = rootElement.elements(<span class="hljs-string">&quot;book&quot;</span>);<br><br>    <span class="hljs-comment">// 遍历 book 标签得到属性，再处理</span><br>    <span class="hljs-keyword">for</span> (Element book : books) &#123;<br>        <span class="hljs-comment">// System.out.println(book.asXML());</span><br>        <span class="hljs-type">Element</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> book.element(<span class="hljs-string">&quot;name&quot;</span>);<br>        <span class="hljs-comment">// getText() 得到标签中的文本信息</span><br>        System.out.println(name.getText());<br>        <span class="hljs-comment">// elementText() 直接获取指定标签名的文本信息</span><br>        System.out.println(book.elementText(<span class="hljs-string">&quot;price&quot;</span>));<br>        <br>        <span class="hljs-comment">// attributeValue() 获得指定属性的值</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h1><p>是一个免费的、开源的 Servlet 容器，启动方式：</p><p>在下载位置，找到 bin 目录下的 startup.bat 文件，双击即可</p><p>检测是否链接：<a href="http://localhost:8080/">http://localhost:8080/</a></p><br><h2 id="修改端口号"><a href="#修改端口号" class="headerlink" title="修改端口号"></a>修改端口号</h2><p>默认的端口号是 8080，若修改，则在下载位置，找到 conf 目录下的 server.xml 配置文件</p><p>找到 Connector 标签，修改 port 属性为需要的端口号，之后重启</p><h2 id="tomcat-amp-idea"><a href="#Tomcat-amp-idea" class="headerlink" title="Tomcat &amp; idea"></a>Tomcat &amp; idea</h2><p><strong>具体配置和常见问题另见</strong><a href="https://blog.csdn.net/m0_61205362/article/details/132526783">IDEA 创建一个 web 项目_XXSfirtree的博客-CSDN博客</a></p><p><img src="https://gitee.com/Greedy_firtree/picture/raw/master/blog/image-20230826200454211.png" alt="image-20230826200454211"></p><ul><li>src  – 存放自己编写的 java 源代码</li><li>web  –  存放 web 工程的资源文件，比如 html、css 等</li><li>WEB-INF 是受服务器保护的目录，浏览器无法直接访问</li><li>lib  –  手动创建，存放需要的 jar 包，需要配置</li><li>web.xml 整个 web 工程的描述配置文件，用于配置组件等</li><li>index.jsp 默认首页</li></ul><h1 id="servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><ul><li>是 JavaEE 规范之一（规范就是接口）</li><li>是 JavaWeb 三大组件之一：Servlet 程序、Filter 过滤器、Listener 监听器</li><li>是运行在服务器上的小程序，接受客户端发送的请求，并响应数据给客户端</li></ul><br><h2 id="手动创建-servlet"><a href="#手动创建-Servlet" class="headerlink" title="手动创建 Servlet"></a>手动创建 Servlet</h2><ol><li>编写类实现 Servlet 接口，主要是实现 service 方法，处理请求并响应数据</li><li>在 web.xml 文件配置 Servlet 程序的访问地址</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--   servlet-name 表示别名，一般为类名    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>ServletTry01<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--  servlet-class 表示全类名     --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.atFirtree.Servlet.ServletTry01<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--  servlet-mapping 标签给servlet配置访问地址  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--  此处的servlet-name表示正在配置的servlet名称     --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>ServletTry01<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--   url-pattern配置访问地址     --&gt;</span><br>    <span class="hljs-comment">&lt;!--   / 表示 http://ip:port/工程路径     --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/ServletTry01<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在 web.xml 中配置包括两部分：</p><ul><li>先通过<code>&lt;servlet&gt;&lt;/servlet&gt;</code>进行注册，这部分的 name 要求唯一</li><li>在通过<code>&lt;servlet-mapping&gt;</code>完成映射</li></ul><p><strong>也可以直接在 Servlet 源文件中通过注释配置</strong></p><br><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><ol><li>servlet 构造器方法</li><li>init() 方法 初始化</li><li>service 处理请求</li><li>destory() 方法销毁</li></ol><p> 第1、2 是在第一次访问的时候创建 servlet 调用</p><p>第3 每发一次请求调用一次</p><p>第4 在 web 工程停止的时候调用</p><br><p><strong>针对不同的提交方式处理请求</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">httpServletRequest</span> <span class="hljs-operator">=</span> (HttpServletRequest) servletRequest;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> httpServletRequest.getMethod();<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;GET&quot;</span>.equals(method)) &#123;<br>        System.out.println(<span class="hljs-string">&quot;get请求&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;POST&quot;</span>.equals(method)) &#123;<br>        System.out.println(<span class="hljs-string">&quot;post请求&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="#0780d8">但是一般情况下我们都采用继承 “HttpServlet” 子类实现 Servlet</font></p><h2 id="通过-httpservlet-实现-servlet"><a href="#通过-HttpServlet-实现-Servlet" class="headerlink" title="通过 HttpServlet 实现 Servlet"></a>通过 HttpServlet 实现 Servlet</h2><ol><li>编写一个类继承 HttpServlet 类</li><li>根据业务需要重写 doGet 或 doPost 方法</li><li>到 web.xml 中配置 Servlet 程序的访问地址（跟上面配置方式一样）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletTry02</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-built_in">super</span>.doGet(req, resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-built_in">super</span>.doPost(req, resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="servlet-的继承体系"><a href="#Servlet-的继承体系" class="headerlink" title="Servlet 的继承体系"></a>Servlet 的继承体系</h2><p><img src="https://gitee.com/Greedy_firtree/picture/raw/master/blog/image-20230827144527456.png" alt="image-20230827144527456"></p><br><h2 id="servlet-内置对象"><a href="#Servlet-内置对象" class="headerlink" title="Servlet 内置对象"></a>Servlet 内置对象</h2><h3 id="servletconfig"><a href="#ServletConfig" class="headerlink" title="ServletConfig"></a>ServletConfig</h3><p>是 Servlet 的配置信息类</p><p>ServletConfig 是每个 Servlet 创建时对应创建的，它的作用为：</p><ol><li>可以获取 Servlet 程序的别名（servlet-name</li><li>获取初始化参数 init-param</li><li>获取 ServletContext 对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig servletConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">servletName</span> <span class="hljs-operator">=</span> servletConfig.getServletName();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">initParameter</span> <span class="hljs-operator">=</span> servletConfig.getInitParameter(<span class="hljs-string">&quot;初始属性名&quot;</span>);<br>    <span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> servletConfig.getServletContext();<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="servletcontext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h3><p>是一个接口，表示 Servlet 上下文对象，一个 web 工程只有一个 ServletContext 对象</p><p>ServletContext 是一个域对象：可以像 Map 一样保存数据的对象</p><br><p><strong>ServletContext 的主要作用：</strong></p><p>（1）获取 web.xml 中配置的上下文参数 context-param（整个 web 工程的共用参数）</p><p>（2）获取当前的工程路径：&#x2F;工程路径</p><p>（3）获取工程部署后在服务器硬盘上的绝对路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> getServletConfig().getServletContext();<br><span class="hljs-type">String</span> <span class="hljs-variable">userName</span> <span class="hljs-operator">=</span> servletContext.getInitParameter(<span class="hljs-string">&quot;userName&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;ServletTry02 的 userName 属性值为&quot;</span> + userName);<br><br><span class="hljs-type">String</span> <span class="hljs-variable">contextPath</span> <span class="hljs-operator">=</span> servletContext.getContextPath();<br>System.out.println(<span class="hljs-string">&quot;ServletTry02 的 工程路径为&quot;</span> + contextPath);<br><br><span class="hljs-type">String</span> <span class="hljs-variable">realPath</span> <span class="hljs-operator">=</span> servletContext.getRealPath(<span class="hljs-string">&quot;/&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;ServletTry02 部署后在服务器硬盘上的绝对路径&quot;</span> + realPath);<br></code></pre></td></tr></table></figure><p>（4）存取数据</p><ul><li>setAttribute(“key”, “value”)  – 存数据</li><li>getAttribute()  –  取数据</li><li>removeAttribute()  – 删除数据</li></ul><br><h3 id="httpservletrequest"><a href="#HttpServletRequest" class="headerlink" title="HttpServletRequest"></a>HttpServletRequest</h3><p>每次只要有请求进入Tomcat服务器，Tomcat 服务器就会把请求过来的HTTP协议信息解析好封装到Request 对象中，然后传递到 service 方法，我们可通过 HttpServletRequest 对象得到 request 信息</p><p><strong>常用方法：</strong></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>getRequestURI()</td><td>获取请求的资源路径</td></tr><tr><td>getRequestURL()</td><td>获取请求的统一资源定位符 (绝对路径)</td></tr><tr><td>getRemoteHost()</td><td>获取客户端的ip地址</td></tr><tr><td>getHeader()</td><td>获取请求头</td></tr><tr><td>getParameter( )</td><td>获取请求的参数</td></tr><tr><td>getParameterValues()</td><td>获取请求的参数（多个）</td></tr><tr><td>getMethod()</td><td>获取请求的方式</td></tr><tr><td>setAttribute(key, value)</td><td>设置域数据</td></tr><tr><td>getAttribute(key)</td><td>获取域数据</td></tr><tr><td>getRequestDispatcher( )</td><td>获取请求转发对象（请求转发以’&#x2F;‘开始）</td></tr></tbody></table><p><strong>解决中文乱码的问题：</strong></p><p>必须要在获取请求参数之前调用，否则无效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">req.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br></code></pre></td></tr></table></figure><br><h3 id="httpservletresponse"><a href="#HttpServletResponse" class="headerlink" title="HttpServletResponse"></a>HttpServletResponse</h3><p>与 HttpServletRequest 很像，每次请求都创造一个 Response 对象，表示所有相应信息</p><p>一般用于设置返回值给用户</p><p><strong>返回信息给用户的方式：流</strong></p><table><thead><tr><th>流</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>字节流</td><td>getOutputStream()</td><td>常用于下载（传递二进制数据）</td></tr><tr><td>字符流</td><td>getWriter()</td><td>常用于回传字符串</td></tr></tbody></table><p>两个流只能使用其中之一，否则报错</p><p>eg. 返回字符串给用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">PrintWriter</span> <span class="hljs-variable">respWriter</span> <span class="hljs-operator">=</span> resp.getWriter();<br>respWriter.write(<span class="hljs-string">&quot;response&#x27;s content!&quot;</span>);<br></code></pre></td></tr></table></figure><p><strong>返回值字符串中有中文乱码的解决方式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 先设置服务器的字符集</span><br>resp.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br><span class="hljs-comment">// 再同步浏览器的字符集</span><br>resp.setHeader(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>);<br><br><br><span class="hljs-comment">// 这种方式会同时设置服务器和浏览器的字符集，同时设置了响应头</span><br>resp.setContentType(<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>);<br></code></pre></td></tr></table></figure><p><strong>必须要在获取流对象之前调用，否则无效</strong></p><br><h1 id="http"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><p>所谓HTTP协议，就是指客户端和服务器之间通信时，发送的数据，需要遵守的规则，叫HTTP协议</p><p>HTTP协议中的数据又叫报文</p><h2 id="get-请求"><a href="#GET-请求" class="headerlink" title="GET 请求"></a>GET 请求</h2><p><img src="https://gitee.com/Greedy_firtree/picture/raw/master/blog/image-20230827160950300.png" alt="image-20230827160950300"></p><h2 id="post-请求"><a href="#POST-请求" class="headerlink" title="POST 请求"></a>POST 请求</h2><p> <img src="https://gitee.com/Greedy_firtree/picture/raw/master/blog/image-20230827162609597.png" alt="image-20230827162609597"></p><p><strong>常见请求头</strong></p><ul><li>Accept：表示客户端可以接收的数据类型</li><li>Accpet-Languege：表示客户端可以接收的语言类型</li><li>User-Agent：表示客户端浏览器的信息</li><li>Host：表示请求时的服务器ip和端口号</li></ul><br><p><strong>以下都是 get 请求：</strong></p><ol><li>a 标签</li><li>link 标签引入 css</li><li>Script 标签引入 js 文件</li><li>img 标签引入图片</li><li>iframe 引入 html 页面</li><li>在浏览器地址栏中输入地址后回车</li></ol><br><h2 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h2><p><img src="https://gitee.com/Greedy_firtree/picture/raw/master/blog/image-20230827165021647.png" alt="image-20230827165021647"></p><br><p><strong>响应码</strong></p><ul><li>200  –  表示请求成功</li><li>302  –  表示请求重定向</li><li>404  –  表示服务器已收到请求，但是要的数据不存在</li><li>500  –  表示服务器已收到请求，但是服务器内部错误</li></ul><br><h1 id="mime-类型说明"><a href="#MIME-类型说明" class="headerlink" title="MIME 类型说明"></a>MIME 类型说明</h1><p>MIME 是 HTTP 协议中数据类型，多功能 Internet 邮件扩充服务</p><p>MIME 类型的格式是“大类型 &#x2F; 小类型”，并与某一种文件的扩展名相对应</p><p><img src="https://gitee.com/Greedy_firtree/picture/raw/master/blog/image-20230827165814719.png" alt="image-20230827165814719"></p><h1 id="请求的转发"><a href="#请求的转发" class="headerlink" title="请求的转发"></a>请求的转发</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">RequestDispatcher</span> <span class="hljs-variable">requestDispatcher</span> <span class="hljs-operator">=</span> req.getRequestDispatcher(<span class="hljs-string">&quot;/ServletTry01&quot;</span>);<br>requestDispatcher.forward(req, resp);<br></code></pre></td></tr></table></figure><p><strong>forward() 转发的特点</strong></p><ul><li>转发后地址栏没有变化</li><li>是一次请求，共享 request 域中的数据</li><li>可以转发到 WEB-INF 下的文件</li><li>不能转发到 web 工程外的地址</li></ul><br><p><strong><code>&lt;base&gt; 标签设置页面相对路径参考的地址</code></strong></p><h1 id="x2f-的含义"><a href="#x2F-的含义" class="headerlink" title="&#x2F; 的含义"></a>&#x2F; 的含义</h1><p>（1）在 web 中，‘&#x2F;’ 是一种绝对路径，表示 <a href="http://ip:port">http://ip:port</a></p><p><code>&lt;a href=&quot;/&quot;&gt;斜杠&lt;/a&gt;</code></p><p>（2）在服务器中，‘&#x2F;’ 是<a href="http://ip:port/工程路径">http://ip:port/工程路径</a></p><ul><li><code>&lt;url-pattern&gt;/servlet1&lt;/url-pattern&gt;</code></li><li>rervletContext.getRealPath(“&#x2F;“)</li><li>request.getRequestDispatcher(“&#x2F;“)</li></ul><p>PS：response.sendRediect(“&#x2F;“);  –  表示把斜杠发送给浏览器解析，得到的是 <a href="http://ip:port">http://ip:port</a></p><br><h1 id="请求的重定向"><a href="#请求的重定向" class="headerlink" title="请求的重定向"></a>请求的重定向</h1><p>（1）方法一</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 设置响应码</span><br>resp.setStatus(<span class="hljs-number">302</span>);<br><span class="hljs-comment">// 设置响应头</span><br>resp.setHeader(<span class="hljs-string">&quot;Location&quot;</span>, <span class="hljs-string">&quot;http://localhost:8080/untitled/ServletTry02&quot;</span>);<br></code></pre></td></tr></table></figure><p>（2）方法二</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">resp.sendRedirect(<span class="hljs-string">&quot;http://localhost:8080/untitled/ServletTry02&quot;</span>);<br></code></pre></td></tr></table></figure><br><p><strong>重定向的特点</strong></p><ul><li>浏览器地址栏有变化</li><li>是两次请求，不共享 request 域中的数据</li><li>不能转发到 WEB-INF 下的文件</li><li>可以转发到 web 工程外的地址</li></ul><p><strong>！！！注意转向和重定向的区别</strong></p><br><h1 id="java-ee-的三层结构"><a href="#Java-EE-的三层结构" class="headerlink" title="Java EE 的三层结构"></a>Java EE 的三层结构</h1><p><img src="https://gitee.com/Greedy_firtree/picture/raw/master/blog/image-20230828112202686.png" alt="image-20230828112202686"></p><p>根据结构创建对应功能的包，以便管理</p><p><img src="https://gitee.com/Greedy_firtree/picture/raw/master/blog/image-20230828112351031.png" alt="image-20230828112351031"></p><br></font>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML/CSS</title>
      <link href="/post/8f7ce547.html"/>
      <url>/post/8f7ce547.html</url>
      
        <content type="html"><![CDATA[<font size="3"><meta name="referrer" content="no-referrer"><h1 id="html"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><p><strong>html —超文本标记语言</strong></p><p><code>&lt;head&gt;</code>表示头部信息，一般包含三种内容：title标签、css样式、js代码</p><h2 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h2><h3 id="文本与段落标签"><a href="#文本与段落标签" class="headerlink" title="文本与段落标签"></a>文本与段落标签</h3><table><thead><tr><th>标签</th><th>说明</th></tr></thead><tbody><tr><td><code>&lt;h1&gt; ~ &lt;h3&gt;</code></td><td>标题标签，每级标题字体大小递减，align 属性表示对齐方式：left &#x2F; right &#x2F; center</td></tr><tr><td><code>&lt;b&gt;&lt;/br&gt;</code></td><td>黑体标签</td></tr><tr><td><code>&lt;i&gt;&lt;/i&gt;</code></td><td>斜体标签</td></tr><tr><td><code>&lt;strong&gt;&lt;/strong&gt;</code></td><td>加重文本标签</td></tr><tr><td><code>&lt;p&gt;&lt;/p&gt;</code></td><td>段落标签，align 属性表示对齐方式</td></tr><tr><td><code>&lt;hr&gt;</code></td><td>水平分割线</td></tr><tr><td><code>&lt;br&gt;</code></td><td>换行</td></tr></tbody></table><br><h3 id="超链接标签"><a href="#超链接标签" class="headerlink" title="超链接标签"></a>超链接标签</h3><p><code>&lt;a href=&quot;转向的网址或文档&quot; target=&quot;跳转方式&quot;&gt;超链接名&lt;/a&gt;</code></p><p>target 属性表示跳转到目标网页的方式：</p><ul><li>_blank 新建窗口打开</li><li>_self 在同一个页面中打开，是默认值</li><li>_parent 父框架</li><li>_top 整页</li></ul><h3 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h3><p>一般是三种：有序标签、无序标签、定义标签</p><p>但是对于不同的浏览器可能会存在兼容问题，具体看情况</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html">(1)有序标签<br><span class="hljs-tag">&lt;<span class="hljs-name">ol</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;序号类型&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure><p>type属性指定列表项前的符号：</p><p>“1” 表示数字，”a” 表示小写字母，”A”表示大写字母，”i”小写罗马数字，”I”大写罗马数字</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html">(2)无序列表<br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;类型样式&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><p>type属性指定列表项前的样式：</p><p>disc表示实心圆点（默认）、circle表示空心圆点、square 表示实心方块</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html">(3)定义列表<br><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>名词一<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>对名词一的解释<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>名词二<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>对名词二的解释<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>    ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签"></a>图片标签</h3><p><code>&lt;img src=&quot;url&quot; height=&quot;&quot; width=&quot;&quot; border=&quot;&quot; alt=”&quot;&gt;</code></p><p>border 设置边框</p><p>alt 属性表示当图片无法显示时显示的文字</p><h3 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h3><p><code>&lt;table&gt;</code> 表示整个表格</p><p><code>&lt;tr&gt;</code> 表示行属性</p><p><code>&lt;th&gt;</code> 表示表头标签</p><p><code>&lt;td&gt;</code> 表示正常单元格</p><p>colspan 表示跨列、rowspan 表示跨行，可以同时使用</p><h3 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h3><p><code>&lt;form&gt;&lt;/form&gt;</code> 定义表单</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;表单名称&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;提交方式&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;处理程序&quot;</span>&gt;</span><br>   ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>&lt;input&gt;</code> 是一个单标签，嵌套在表单标签中使用</p><p><code>&lt;input name=&quot;输入域名称&quot; type=&quot;类型&quot; value=&quot;输入域的值&quot;&gt;</code></p><table><thead><tr><th>名称</th><th>格式</th><th>说明</th></tr></thead><tbody><tr><td>文本域</td><td><code>&lt;input type=&quot;text&quot; name=&quot;&quot; maxlength=&quot;&quot; value=&quot;&quot;&gt;</code></td><td>&#x2F;</td></tr><tr><td>密码域</td><td><code>&lt;input type=&quot;password&quot; name=&quot;&quot; value=&quot;&quot;&gt;</code></td><td>不显示输入内容</td></tr><tr><td>单选按钮</td><td><code>&lt;input type=&quot;radio&quot; name=&quot;&quot; value=&quot;&quot; checked&gt;</code></td><td>checked表示默认选中，一组单选设置相同的name</td></tr><tr><td>复选框</td><td><code>&lt;input type=&quot;checkbox&quot; name=&quot;&quot; value=&quot;&quot;&gt;</code></td><td>checked表示默认选中</td></tr><tr><td>提交按钮</td><td><code>&lt;input type=&quot;submit&quot; name=&quot;&quot; value=&quot;&quot;&gt;</code></td><td>将表单内容提交至服务器，value修改按钮上的文字</td></tr><tr><td>取消按钮</td><td><code>&lt;input type=&quot;reset&quot; name=&quot;&quot; value=&quot;&quot;&gt;</code></td><td>将表单内容全部重置，value修改按钮上的文字</td></tr><tr><td>图像按钮</td><td><code>&lt;input type=&quot;image&quot; src=&quot;&quot;&gt;</code></td><td>使用图像替代 submit 按钮</td></tr><tr><td>文件域</td><td><code>&lt;input type=&quot;file&quot; name=&quot;&quot; maxlength=&quot;&quot;&gt;</code></td><td>上传文件</td></tr><tr><td>隐藏域</td><td><code>&lt;input type=&quot;hidden&quot; name=&quot;&quot; value=&quot;&quot;&gt;</code></td><td>用户不能输入，用于预设某些要传递的信息</td></tr></tbody></table><br><p><strong>下拉列表框</strong></p><p>在表单中可以嵌套下拉列表框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">selected</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>&lt;select&gt;</code> 标签的属性：</p><ul><li>name 设定下拉表的名称</li><li>size 改变下拉表的大小，默认为1</li><li>multiple 表示允许多选，若缺省则表示单选</li></ul><p><code>&lt;option&gt;</code> 标签的属性：</p><ul><li>value 用于设置当前选项选中被提交时，浏览器传递给服务器的数据</li><li>selected 表示默认被选中</li></ul><br><p><strong>多行文本框</strong></p><p><code>&lt;textarea&gt;</code> 标签，warp 用于设置是否自动换行</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">warp</span>=<span class="hljs-string">&quot;off/virtual/physical&quot;</span>&gt;</span><br>    初始值<br><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>提交表单时不能正确的把信息发给服务器的原因：</strong></p><ul><li>表单没有设置 name 属性</li><li>单选、复选、下拉框等标签都需要添加 value 标签，以便向服务器传递信息</li><li>表单项不在提交的 form 标签之中</li></ul><br><p><strong>methon 属性确定提交方式：</strong></p><p>一般是 post 和 get（默认）两种</p><h3 id="get-和-post-两种提交方式"><a href="#get-和-post-两种提交方式" class="headerlink" title="get 和 post 两种提交方式"></a>get 和 post 两种提交方式</h3><p>get 请求的特点是：</p><ol><li><p>格式固定：name&#x3D;value &amp; name&#x3D;value…</p></li><li><p>不安全，会显示在浏览器地址栏中</p></li><li><p>对数据的长度有限制，可以提交的数据量非常小</p></li></ol><br><p>post 请求的特点是：</p><ol><li><p>安全，不会显示在浏览器的地址栏中</p></li><li><p>可以提交的数据量非常大，理论上没有限制</p></li><li><p>可以进行文件的提交</p></li></ol><br><h3 id="iframe-框架标签"><a href="#iframe-框架标签" class="headerlink" title="iframe 框架标签"></a>iframe 框架标签</h3><p>在当前 html 页面上开一个小窗口去加载单独的一个页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">heught</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br></code></pre></td></tr></table></figure><p>**iframe 和 a 组合使用的步骤方式</p><ol><li>在 iframe 标签上使用 name 属性定义名称</li><li>将 a 的 target 属性设置为 iframe 的 name 值</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;haha&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://localhost:4000/&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;haha&quot;</span>&gt;</span>1111<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h3 id="设计案例-学生注册页面"><a href="#设计案例-学生注册页面" class="headerlink" title="设计案例-学生注册页面"></a>设计案例-学生注册页面</h3><p><img src="https://gitee.com/Greedy_firtree/picture/raw/master/blog/image-20230823170858820.png" alt="image-20230823170858820"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;stu&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>姓名：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;stuName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>性别<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;stuSex&quot;</span> <span class="hljs-attr">checked</span>&gt;</span>男<br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;stuSex&quot;</span>&gt;</span>女<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>专业<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;stuPro&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">selected</span>&gt;</span>计算机科学与技术<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>移动软件<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>物联网工程<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>嵌入式<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>体育爱好：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;stuHobby&quot;</span>&gt;</span>排球<br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;stuHobby&quot;</span>&gt;</span>篮球<br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;stuHobby&quot;</span>&gt;</span>网球<br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;stuHobby&quot;</span>&gt;</span>游泳<br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;stuHobby&quot;</span>&gt;</span>足球<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>上传照片<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>密码：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">nama</span>=<span class="hljs-string">&quot;stuPwd&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>个人介绍：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Letter&quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;40&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;4&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;取消&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="css"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><p>css  –层叠样式表</p><h2 id="css-的定义和使用"><a href="#CSS-的定义和使用" class="headerlink" title="CSS 的定义和使用"></a>CSS 的定义和使用</h2><p>css 使网页的结构和样式分离</p><h3 id="css-选择器"><a href="#css-选择器" class="headerlink" title="css 选择器"></a>css 选择器</h3><p>通常分为以下几类：</p><ul><li>标签选择器：通过 HTNL 标签定义选择器</li><li>类别选择器：使用 class 定义选择器</li><li>ID 选择器：使用 id 定义选择器</li><li>组合选择器：选择器1，选择器2 {}</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#sample</span> &#123;<br><span class="hljs-attribute">color</span>: red;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;<br>&#125;<br><br>&lt;<span class="hljs-selector-tag">p</span> id=sample&gt;段落文本&lt;/<span class="hljs-selector-tag">p</span>&gt;<br></code></pre></td></tr></table></figure><p>选择器优先级：通配符 &lt; 标签选择器 &lt; 类选择器 &lt; id选择器（范围越小越精确，优先级越高 ）</p><br><h3 id="css-的使用"><a href="#css-的使用" class="headerlink" title="css 的使用"></a>css 的使用</h3><p>在 HTML 中使用 css 一般有 4 种方式：行内式、内嵌式、链接式、导入式。</p><p>（1）行内式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">利用 style 属性直接为元素添加样式<br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:#FF0000&quot;</span>; <span class="hljs-attr">font-size:20px</span>&quot;&gt;</span> 正文内容 <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>（2）内嵌式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html">利用<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>标签将样式定义在<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>中<br>这种方式的作用范围是本 HTML文件<br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">      <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: black;</span><br><span class="language-css">        <span class="hljs-attribute">text-decoration</span>: underline;</span><br><span class="language-css">      &#125;</span><br><span class="language-css">      <span class="hljs-selector-class">.info</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">      &#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>内容一<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span>内容二<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>（3）链接式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">将定义好的 CSS 单独放到一个以 .css 为扩展名的文件中，再使用<span class="hljs-tag">&lt;<span class="hljs-name">link</span>&gt;</span>标签连接到需要的网页中<br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;*.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>（4）导入式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">与链接式很相似，只是通过 import 导入到页面中<br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"> <span class="hljs-keyword">@import</span> url(*.css); </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>PS：链接式是同时加载，导入式是等到页面全部加载完成后才被加载</p><h3 id="css-的继承性"><a href="#css-的继承性" class="headerlink" title="css 的继承性"></a>css 的继承性</h3><p>CSS 是级联样式表，级联是指继承性，级联的优先级顺序是：导入式样式表、内嵌式样式表、链接式样式表、浏览器默认、行内式样式表</p><p>当样式表遇到冲突时，总是以最后定义的样式为准</p><h2 id="css-常用属性"><a href="#CSS-常用属性" class="headerlink" title="CSS 常用属性"></a>CSS 常用属性</h2><p>（1）字体属性</p><table><thead><tr><th>属性名</th><th>属性含义</th><th>属性值</th></tr></thead><tbody><tr><td>font-family</td><td>字体</td><td>如 ”宋体“</td></tr><tr><td>font-size</td><td>字号</td><td>如 12px</td></tr><tr><td>font-style</td><td>字体风格</td><td>normal(普通，默认)、italic(斜体)、oblique(中间状态)</td></tr><tr><td>font-weight</td><td>加粗</td><td>normal、bold一般加粗、bolder(重加粗)、lighter(轻加粗)、100-900之间的加粗</td></tr><tr><td>font</td><td>字体复合属性</td><td>简化代码，之间用空格分开</td></tr></tbody></table><p>（2）颜色和背景属性</p><table><thead><tr><th>属性名</th><th>属性含义</th><th>属性值</th></tr></thead><tbody><tr><td>color</td><td>颜色</td><td>&#x2F;</td></tr><tr><td>background-color</td><td>背景颜色</td><td>&#x2F;</td></tr><tr><td>background-image</td><td>背景图像</td><td>none：无背景，url：图像地址</td></tr><tr><td>background-position</td><td>背景图片位置</td><td>top、left、right、bottom、center</td></tr><tr><td>background</td><td>背景复合属性</td><td>简化代码，之间用空格分开</td></tr></tbody></table><p>（3）文本段落属性</p><table><thead><tr><th>属性名</th><th>属性含义</th><th>属性值</th></tr></thead><tbody><tr><td>text-decoration</td><td>文字修饰</td><td>none、underline、overline、line-through：删除线、blink：文字闪烁</td></tr><tr><td>vertical-align</td><td>垂直对齐</td><td>Baseline：默认、super：文字的上标、sub：文字的下标、top：垂直靠上、middle：居中</td></tr><tr><td>text-align</td><td>水平对齐</td><td>left、right、center、justify：两端对齐</td></tr><tr><td>text-indent</td><td>文本缩进</td><td>&#x2F;</td></tr><tr><td>line-height</td><td>文本行高</td><td>&#x2F;</td></tr><tr><td>white-space</td><td>处理空白</td><td>Normal：将连续空格合并、nowrap：强制在同一行显示所有文本</td></tr></tbody></table><h1 id="javascript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><p>是一种简单的脚本语言，可以在浏览器中直接运行，是一种在浏览器端实现网页与客户交互的技术</p><p>特点：交互性、安全性、跨平台性</p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p><strong>数据类型：</strong></p><p>主要的数据类型有：int、float、string、boolean</p><p>undefined：未定义，所有 js 变量未赋初始值时，默认都是该类型</p><p>null：空值</p><p>NAN：非数字</p><br><p><strong>变量：</strong></p><p>使用 var 定义变量，声明变量时不需要指定变量的类型，赋值时自动确定</p><p>在 js 中，所有的变量都可以作为 Boolean类型使用</p><p>0、null、“”、undefined、NaN 都认为是 false</p><br><p>1）变量声明</p><p><code>var a[ = 10];</code></p><p>2）数组声明</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> array1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();<br><span class="hljs-keyword">var</span> array2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">10</span>);<span class="hljs-comment">// 长度为10</span><br><span class="hljs-keyword">var</span> array1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(”aa<span class="hljs-string">&quot;, 12, true);// 元素类型可以不同</span><br></code></pre></td></tr></table></figure><p>js 中的数组，只要通过下标赋值，那么会自动根据最大下标扩容，没有赋值的位置默认为 undefined</p><br><p><strong>运算符</strong></p><p>基本与 java 相同，值得一说的是：</p><p>&#x3D;&#x3D;（等于）：仅仅是字面值的比较，’12‘ 和 12 相等</p><p>&#x3D;&#x3D;&#x3D; （全等于）：在数值相同的基础上，类型也要相同，’12‘ 和 12 不同</p><br><p>对于 &amp;&amp; 与运算：</p><ul><li>当表达式全真时，返回最后一个表达式的值</li><li>当表达式有一个为假时，返回第一个为假的表达式的值</li></ul><br><p>对于 || 或运算：</p><ul><li>当表达式全假时，返回最后一个表达式的值</li><li>当表达式有一个为真时，返回第一个为真的表达式的值</li></ul><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-string">&quot;abc&quot;</span>;<br><span class="hljs-keyword">var</span> b = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">var</span> c = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">var</span> d = <span class="hljs-literal">false</span>;<br><br><span class="hljs-title function_">alert</span>(a &amp;&amp; b); <span class="hljs-comment">// true</span><br><span class="hljs-title function_">alert</span>(b &amp;&amp; a); <span class="hljs-comment">// &quot;abc&quot;</span><br><span class="hljs-title function_">alert</span>(a &amp;&amp; c); <span class="hljs-comment">// null</span><br><span class="hljs-title function_">alert</span>(a &amp;&amp; d &amp;&amp; c); <span class="hljs-comment">// false</span><br><br><span class="hljs-title function_">alter</span>(c || d); <span class="hljs-comment">// false;</span><br><span class="hljs-title function_">alter</span>(c || a); <span class="hljs-comment">// &quot;abc&quot;</span><br></code></pre></td></tr></table></figure><p>PS：&amp;&amp; 和 || 都有短路，即有了运算结果后，后面的表达式不再执行</p><p><strong>控制语句</strong></p><p>分支语句（if、switch）、循环语句（while、for），规则都跟 java 一样</p><br><h3 id="函数的定义和使用"><a href="#函数的定义和使用" class="headerlink" title="函数的定义和使用"></a>函数的定义和使用</h3><p>在 JS 中，需要先声明定义，然后再调用函数</p><ul><li>函数的参数列表不需要数据类型，var 也不需要，实质上仅确定了参数数量</li><li>函数若有返回值，直接 return 即可</li><li>函数不存在重载，会覆盖掉上一次的定义</li><li>函数存在 argument 隐形参数</li></ul><br><p><strong>隐形参数：</strong></p><p>即使在 function 函数中没有定义，也可以直接获取所有参数的变量，就像 java 里的可变长参数一样</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> sum = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> ans = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> (<span class="hljs-variable language_">arguments</span>[i]) == <span class="hljs-string">&quot;number&quot;</span>)</span><br><span class="language-javascript">                ans += <span class="hljs-variable language_">arguments</span>[i];</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> ans;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    </span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(<span class="hljs-title function_">sum</span>(<span class="hljs-number">120</span>, <span class="hljs-number">200</span>));</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><br><p>定义函数一般两种方式：</p><p>（1）直接在 Web 页面中嵌入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 格式一</span></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">functiobName</span>(<span class="hljs-params">a, b</span>) &#123; <span class="hljs-comment">// 相关处理语句; &#125;</span></span><br><span class="language-javascript">        </span><br><span class="language-javascript">    <span class="hljs-comment">// 格式二</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> functionName = <span class="hljs-keyword">function</span>(<span class="hljs-params">a, b</span>) &#123;&#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><p>（2）链接外部 JavaScript</p><p>将脚本代码保存在一个单独的文件中，其扩展名为.js，然后在 Web 页面链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;rul(相对路径)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><p>（3）函数调用</p><p>一般是由事件引起的</p><br><p>PS：<code>&lt;script&gt;&lt;/script&gt;</code>既可以定义js代码，又可以引入js文件，两者只能选其一，写在一起没用。可以分开写</p><h2 id="javascript-的事件"><a href="#JavaScript-的事件" class="headerlink" title="JavaScript 的事件"></a>JavaScript 的事件</h2><p>常见的事件、事件处理函数</p><table><thead><tr><th>事件</th><th>事件处理函数</th><th>触发时机</th></tr></thead><tbody><tr><td>blur</td><td>onBlur</td><td>元素或窗口本身失去焦点时</td></tr><tr><td>change</td><td>onChange</td><td>当表单元素获取焦点且内容值发生改变时</td></tr><tr><td>click</td><td>onClick</td><td>单击鼠标左键</td></tr><tr><td>focus</td><td>onFocus</td><td>任何元素或窗口本身获取焦点时</td></tr><tr><td>keydown</td><td>onKeydown</td><td>按下键盘时，若长按则不断触发</td></tr><tr><td>load</td><td>onLoad</td><td>载入页面后，在windows对象上触发，将所有框架载入后，在框架集上触发</td></tr><tr><td>select</td><td>onSelect</td><td>选中文本时</td></tr><tr><td>submit</td><td>onSubmit</td><td>单击提交按钮，一般验证填写的表单项是否合法</td></tr><tr><td>unload</td><td>onUnload</td><td>&#x2F;</td></tr></tbody></table><p><strong>事件的注册：静态注册和动态注册两种：</strong></p><p>静态注册：通过html标签的事件属性直接赋于事件响应后的代码</p><br><p>动态注册：是指先通过js代码得到标签的dom对象，然后再通过dom对象.事件名&#x3D; function(){} 这种形式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> btnObj = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn01&quot;</span>);</span><br><span class="language-javascript">        btnObj.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;动态注册点击事件&quot;</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="dom模型"><a href="#DOM模型" class="headerlink" title="DOM模型"></a>DOM模型</h2><p>全称为document，文档对象模型</p><p>其实就是，将文档中的标签、属性、文本，都转换成对象来管理</p><br><h3 id="document-对象"><a href="#document-对象" class="headerlink" title="document 对象"></a>document 对象</h3><p>表示整个页面。</p><p>每个 HTML 文档被加载后都会在内存中初始化一个 document 对象，从该对象可以获取页面表单的各种信息</p><p>（1）获取表单域对象：通过表单访问、直接访问</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;form1&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">tupe</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;t1&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;t1&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><br>通过表单访问：<br>var fObi = document.form1.t1;<br>var fObj = document.form1.elements[&quot;t1&quot;];<br>var fObj = document.forms[0].t1;<br><br>直接访问：<br>var fObj = document.getElementsByName(&quot;t1&quot;)[0];<br>var fObj = document.getElementById(&quot;t1&quot;);<br>var fObj = document.all(&quot;t1&quot;).value;<br></code></pre></td></tr></table></figure><br><p>（2）获取表单域的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-number">1.</span> 获取文本域、密码域的值：<br><span class="hljs-keyword">var</span> num = fObj.<span class="hljs-property">value</span>;<br><br><br><span class="hljs-number">2.</span> 获取复选框的值：<br>&lt;input type=<span class="hljs-string">&quot;checkbox&quot;</span> name=<span class="hljs-string">&quot;c1&quot;</span> value=<span class="hljs-string">&quot;1&quot;</span>&gt;<br>&lt;input type=&quot;checkbox&quot; name=&quot;c1&quot; value=&quot;2&quot;&gt;<br>&lt;input type=&quot;checkbox&quot; name=&quot;c1&quot; value=&quot;3&quot;&gt;<br><br>var fObj = document.getElementsByName(&quot;c1&quot;);<br>var s = &quot;&quot;;<br>for (var i = 0; i &lt; fObj.length; i++) &#123;<br>if (fObj[i].checked == true) s = s + fObj[i].value;<br>&#125;<br><br><br>3. 获取单选按钮的值：<br>&lt;input type=&quot;radio&quot; name=&quot;c2&quot; value=&quot;a&quot;&gt;<br>&lt;input type=&quot;radio&quot; name=&quot;c2&quot; value=&quot;b&quot;&gt;<br>&lt;input type=&quot;radio&quot; name=&quot;c2&quot; value=&quot;c&quot;&gt;<br><br>var fObj = document.form1.c2;<br>for (var i = 0; i &lt; fObj.length; i++) &#123;<br>    if (fObj[i].checked) ...<br>&#125;<br><br><br>4. 获取列表框的值：<br>单选列表框<br>var index = fObj.selectedIndex;<br>var val = fObj.options[index].value;<br><br>复选列表框<br>var s = &quot;&quot;;<br>for (var i = 0; i &lt; fObj.length; i++) &#123;<br>    if (fObj.options[i].selected == true) ...<br>&#125;<br></code></pre></td></tr></table></figure><p><br> <strong>小案例：检验用户名是否合法</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> onclickFun = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> userNameObj = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;userName&quot;</span>);</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> userName = userNameObj.<span class="hljs-property">value</span>;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> patt = <span class="hljs-regexp">/^\w&#123;5,12&#125;$/</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> sObj = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;userNameCheck&quot;</span>);</span><br><span class="language-javascript">            <span class="hljs-comment">// innerHTML 表示起始标签和结束标签之间的内容，可读可写</span></span><br><span class="language-javascript">            <span class="hljs-comment">// alert(sObj.innerHTML);</span></span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (patt.<span class="hljs-title function_">test</span>(userName)) &#123;</span><br><span class="language-javascript">                sObj.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;用户名合法&quot;</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                sObj.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;用户名不合法&quot;</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userName&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;onclickFun()&quot;</span>&gt;</span>校验<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userNameCheck&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: red;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><br><p><strong>createElements() 方法</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> divObj = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;div&quot;</span>);  <span class="hljs-comment">// 在内存中创建了&lt;div&gt;&lt;/div&gt;</span></span><br><span class="language-javascript">        divObj.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;hello world!&quot;</span>;  <span class="hljs-comment">// 在内存中变成了 &lt;div&gt;hello world!&lt;/div&gt;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(divObj);  <span class="hljs-comment">// 在 &lt;body&gt; 中添加</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><br><h2 id="javascript-的对象"><a href="#JavaScript-的对象" class="headerlink" title="JavaScript 的对象"></a>JavaScript 的对象</h2><p>js 中有内置对象，String、Date等，此处介绍几个特有的</p><br><h3 id="window-对象"><a href="#window-对象" class="headerlink" title="window 对象"></a>window 对象</h3><p>HTML 文档内容在 window 对象中显示</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>alert()</td><td>弹出一个警告对话框</td></tr><tr><td>confirm()</td><td>显示一个确认对话框， 单击 “确认” 按钮时返回 true，否则返回 false</td></tr><tr><td>prompt()</td><td>弹出一个提示对话框，并要求输入一一个简单的字符串</td></tr><tr><td>setTimeout(timer)</td><td>在经过指定的时间后执行代码</td></tr><tr><td>clearTimeout()</td><td>取消对指定代码的延迟执行</td></tr><tr><td>setInterval()</td><td>周期性地执行指定的代码</td></tr><tr><td>clearInterval()</td><td>停止周期性地执行代码</td></tr></tbody></table><br><h3 id="location-对象"><a href="#location-对象" class="headerlink" title="location 对象"></a>location 对象</h3><p>实现网页页面的跳转</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>=<span class="hljs-string">&quot;网页路径&quot;</span>;<br></code></pre></td></tr></table></figure><br><h3 id="history-对象"><a href="#history-对象" class="headerlink" title="history 对象"></a>history 对象</h3><table><thead><tr><th>属性、方法</th><th>含义</th></tr></thead><tbody><tr><td>length属性</td><td>浏览历史记录的总数</td></tr><tr><td>go(index)</td><td>从浏览历史中加载URL，index 参数用于加载URL的相对路径。index 为负数时，表示当前地址之前的浏览记录:；index 为正数时，表示当前地址之后的浏览记录</td></tr><tr><td>forward()</td><td>从浏览历史中加载下一个URL，相当于history.go(1)</td></tr><tr><td>back()</td><td>从浏览历史中加载上一个URL，相当于history.go(-1)</td></tr></tbody></table><br><h3 id="regexp-正则表达式对象"><a href="#RegExp-正则表达式对象" class="headerlink" title="RegExp 正则表达式对象"></a>RegExp 正则表达式对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 表示字符串中是否包含字母e，以下两种写法一样</span><br><span class="hljs-keyword">var</span> patt = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&quot;e&quot;</span>);<br><span class="hljs-keyword">var</span> patt = <span class="hljs-regexp">/e/</span>;<br><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(patt.<span class="hljs-title function_">test</span>(str)); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p><strong>方括号</strong></p><table><thead><tr><th>表达式</th><th>描述</th></tr></thead><tbody><tr><td>[abc]</td><td>查找方括号之间的任何字符</td></tr><tr><td>[^abc]</td><td>查找任何不在方括号之间的字符</td></tr><tr><td>[0-9]</td><td>查找任何从0至9的数字</td></tr><tr><td>[a-z]</td><td>查找任何从小写a到小写z的字符</td></tr><tr><td>[A-Z]</td><td>查找任何从大写A到大写Z的字符</td></tr><tr><td>[A-z]</td><td>查找任何从大写A到小写z的字符</td></tr><tr><td>(res|blye|green)</td><td>查找任何指定的选项</td></tr></tbody></table><br><p><strong>\w 元字符用于查找单词字符</strong></p><p>单词字符：a-z，A-Z，0-9，以及下划线</p><p>验证邮箱：<a href="mailto:&#x78;&#120;&#120;&#120;&#x78;&#64;&#120;&#120;&#120;&#x2e;&#x63;&#x6f;&#109;">&#x78;&#120;&#120;&#120;&#x78;&#64;&#120;&#120;&#120;&#x2e;&#x63;&#x6f;&#109;</a></p><p>var userEmailPatt &#x3D; &#x2F;^[a-z\d]+(.[a-z\d]+)*@(<a href="-%5B%5Cda-z%5D">\da-z</a>?)+(.{1,2}[a-z]+)+$&#x2F;;</p><br><p><strong>量词：</strong></p><table><thead><tr><th>量词</th><th>描述</th></tr></thead><tbody><tr><td>n+</td><td>匹配任何包含至少一个n的字符串</td></tr><tr><td>n*</td><td>匹配任何包含零个或多个n的字符串</td></tr><tr><td>n？</td><td>匹配任何包含零个或一个n的字符串（多个也是true，因为是包含）</td></tr><tr><td>n{x}</td><td>匹配包含x个连续n的序列的字符串</td></tr><tr><td>n{x, y}</td><td>匹配包含x或y个连续n的序列的字符串，中间不要敲空格</td></tr><tr><td>n{x, }</td><td>匹配包含至少x个连续n的序列的字符串</td></tr><tr><td>n$</td><td>匹配任何结尾为n的字符串</td></tr><tr><td>^n</td><td>匹配任何开头为n的字符串</td></tr><tr><td>?&#x3D;n</td><td>匹配任何其后紧接指定字符串n的字符串</td></tr><tr><td>?!n</td><td>匹配任何其后没有紧接指定字符串n的字符串</td></tr></tbody></table><p>eg. var patt &#x3D; &#x2F;^\w{5,12}$&#x2F;</p><p>就表示，字符串从头到尾都是单词字符（字母数字下划线）且长度为5-12位</p><br><h3 id="自定义对象"><a href="#自定义对象" class="headerlink" title="自定义对象"></a>自定义对象</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html">对象的定义<br>格式一：<br>var 变量名 = new Object();<br>变量名.属性名 = 值;<br>变量名.函数名 = function()&#123;&#125;;<br>格式二：<br>var 变量名 = &#123;<br>属性名: 值,<br>函数名: function()&#123;&#125;<br>&#125;;<br><br><br>对象的访问<br>变量名.属性/函数名();<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();</span><br><span class="language-javascript">    obj.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;haha&quot;</span>;</span><br><span class="language-javascript">    obj.<span class="hljs-property">sum</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> a + b;</span><br><span class="language-javascript">    &#125;;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(obj.<span class="hljs-title function_">sum</span>(<span class="hljs-number">12</span>, <span class="hljs-number">34</span>));</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="jquery"><a href="#JQuery" class="headerlink" title="JQuery"></a>JQuery</h1><p>是 JavaScript 和查询(Query) ，它就是辅助 JavaScript 开发的 js 类库</p><p><strong>通过 jQuery 实现按钮点击事件</strong></p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 表示页面加载以后，相当于onload</span></span><br><span class="language-javascript">$(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> $btnObj = $(<span class="hljs-string">&quot;#btnId&quot;</span>);<span class="hljs-comment">// 表示按 id 查询标签对象</span></span><br><span class="language-javascript">$btnObj.<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;点击事件&quot;</span>);</span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><br><p>$ 是 jQuery 的核心函数，能完成 jQuery 的很多功能，$() 就是调用函数，不同的参数有不同的含义</p><p>（1）传入参数为[函数时]，表示页面加载完成后，相当于 window.onload &#x3D; function() {}</p><p>（2）传入参数为[ HTML字符串]，会创建这个 html 对象</p><p>（3）传入参数为[选择器字符串]，根据选择器查询标签</p><p>（4）传入参数为[DOM对象]，就会把这个 dom 对象转换成 jQuery 对象</p><br><p><font color="#0077b9"> jQuery 对象本质上就是一个 dom 对象</font></p><p> jQuery 对象和 dom 对象的转化：</p><ol><li>$( dom 对象 ) –&gt;  jQuery 对象</li><li>jQuery 对象[下标]  –&gt;  dom 对象</li></ol><br><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><h3 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h3><table><thead><tr><th>选择器</th><th>描述</th><th>返回</th></tr></thead><tbody><tr><td>#id</td><td>根据 id 选择元素</td><td>单个元素</td></tr><tr><td>element</td><td>根据标签名选择元素</td><td>集合元素</td></tr><tr><td>.class</td><td>根据类名选择元素</td><td>集合元素</td></tr><tr><td>*</td><td>选择所有元素</td><td>集合元素</td></tr><tr><td>xxx, xxx, …</td><td>&#x2F;</td><td>集合元素</td></tr></tbody></table><br><h3 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h3><table><thead><tr><th>选择器</th><th>描述</th><th>返回</th></tr></thead><tbody><tr><td>ancestor descendant</td><td>选取 ancestor 中所有的 descendant 元素，包括 descendant 的子元素</td><td>集合元素</td></tr><tr><td>parent &gt; child</td><td>选取 parent 中的 child 元素，不包括 child 的子元素</td><td>集合元素</td></tr><tr><td>prev + next</td><td>选取紧接在 prev 后的同辈 next 元素</td><td>集合元素</td></tr><tr><td>prev ~ siblings</td><td>选取所有在 prev 后的同辈 siblings 元素</td><td>集合元素</td></tr></tbody></table><br><h3 id="过滤选择器"><a href="#过滤选择器" class="headerlink" title="过滤选择器"></a>过滤选择器</h3><p>过滤选择器又分为基本过滤选择器、内容过滤选择器、可见性过滤选择器、属性过滤选择器、子元素过滤选择器和表单对象属性过滤选择器六种。</p><p><strong>基本过滤选择器</strong></p><table><thead><tr><th>选择器</th><th>描述</th></tr></thead><tbody><tr><td>:first</td><td>选取集合中的第一个元素</td></tr><tr><td>:last</td><td>选取集合中的最后一个元素</td></tr><tr><td>:not(selector)</td><td>去除所有与给定选择器匹配的元素</td></tr><tr><td>:even &#x2F; :odd</td><td>选取索引是偶数 &#x2F; 奇数的所有元素，从 0 开始</td></tr><tr><td>:eq(index)</td><td>选取索引是 index 的元素，从 0 开始</td></tr><tr><td>:gt(index) &#x2F; :lt(index)</td><td>选取集合中索引大于 &#x2F; 小于 index 的所有元素</td></tr><tr><td>:header</td><td>选取所有的标题元素</td></tr><tr><td>:animated</td><td>选取当前正在执行动画的所有元素</td></tr><tr><td>:focus</td><td>选取当前获取焦点的所有元素</td></tr></tbody></table><br><p><strong>内容过滤选择器</strong></p><table><thead><tr><th>选择器</th><th>描述</th></tr></thead><tbody><tr><td>:contains(text)</td><td>选取含有文本内容为 “text” 的元素</td></tr><tr><td>:empty</td><td>选取不含子元素或文本的空元素</td></tr><tr><td>:has(selector)</td><td>选取含有选择器所匹配的元素的元素</td></tr><tr><td>:parent</td><td>选取含有子元素或者文本的元素（非空）</td></tr></tbody></table><br><p><strong>可见性选择器</strong></p><table><thead><tr><th>选择器</th><th>描述</th></tr></thead><tbody><tr><td>:hidden</td><td>选取所有不可见元素</td></tr><tr><td>:visible</td><td>选取所有可见元素</td></tr></tbody></table><br><p><strong>属性过滤选择器</strong></p><table><thead><tr><th>符号</th><th>描述</th><th>符号</th><th>描述</th></tr></thead><tbody><tr><td>[attribute]</td><td>选取拥有属性的元素</td><td>[attribute&#x3D;value]</td><td>选取属性为 value 的元素</td></tr><tr><td>[attribute!&#x3D;value]</td><td>选择属性不为 value 的元素</td><td>[attribute^&#x3D;value]</td><td>选择属性以 value 开始的元素</td></tr><tr><td>[attribute$&#x3D;value]</td><td>选择属性以 value 结尾的元素</td><td>[attribute*&#x3D;value]</td><td>选择属性含有 value 的元素</td></tr><tr><td>[attribute|value]</td><td>选择属性等于或以之为前缀的元素</td><td>[attribute~&#x3D;value]</td><td>选择空格分隔值中包含 value 的元素</td></tr><tr><td>[xxx][xxx]…</td><td>复合属性选择器</td><td></td><td></td></tr></tbody></table><br><p><strong>子元素过滤选择器</strong></p><table><thead><tr><th>选择器</th><th>描述</th></tr></thead><tbody><tr><td>:nth-child(index&#x2F;even&#x2F;odd&#x2F;equation)</td><td>选取每个父元素下第 index&#x2F;奇&#x2F;偶 个元素</td></tr><tr><td>:first-child</td><td>选取每个父元素下第一个子元素</td></tr><tr><td>:last-child</td><td>选取每个父元素下最后一个子元素</td></tr><tr><td>:only-child</td><td>选取每个父元素中唯一情况下的子元素</td></tr></tbody></table><br><p><strong>表单对象属性过滤选择器</strong></p><table><thead><tr><th>选择器</th><th>描述</th></tr></thead><tbody><tr><td>:enabled</td><td>选取所有可用元素</td></tr><tr><td>:disabled</td><td>选取所有不可用元素</td></tr><tr><td>:checked</td><td>选取所有没选中的元素（单选框、父选框）</td></tr><tr><td>:selected</td><td>选取所有被选中的选项元素（下拉列表）</td></tr></tbody></table><br><p><strong>表单选择器</strong></p><p>:xxx 即可</p><br><h2 id="元素筛选"><a href="#元素筛选" class="headerlink" title="元素筛选"></a>元素筛选</h2><p><img src="https://gitee.com/Greedy_firtree/picture/raw/master/blog/image-20230825174842334.png" alt="image-20230825174842334"></p><h2 id="操作元素"><a href="#操作元素" class="headerlink" title="操作元素"></a>操作元素</h2><ul><li>html()  – 获取和设置元素的 HTML 内容，类似 dom 对象的 innerHTML</li><li>text()  – 获取和设置元素的文本内容，类似 dom 对象的 innerText</li><li>val()  – 获取和设置元素的值，类似 dom 对象的 value</li></ul><br><p><strong>通过 val() 方法修改选中状态</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../jQuery/Demo/script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 设置单选框的选中状态</span></span><br><span class="language-javascript">        $(<span class="hljs-string">&quot;:radio&quot;</span>).<span class="hljs-title function_">val</span>([<span class="hljs-string">&quot;girl&quot;</span>]);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 批量设置复选框的选中状态</span></span><br><span class="language-javascript">        $(<span class="hljs-string">&quot;:checkbox&quot;</span>).<span class="hljs-title function_">val</span>([<span class="hljs-string">&quot;basketball&quot;</span>,<span class="hljs-string">&quot;swimming&quot;</span>]);</span><br><span class="language-javascript">          </span><br><span class="language-javascript">        <span class="hljs-comment">// 单选和复选也可以写在一起</span></span><br><span class="language-javascript">        $(<span class="hljs-string">&quot;:radio,:checkbox&quot;</span>).<span class="hljs-title function_">val</span>([<span class="hljs-string">&quot;boy&quot;</span>,<span class="hljs-string">&quot;swimming&quot;</span>]);</span><br><span class="language-javascript">      &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;boy&quot;</span>&gt;</span> 男<br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;girl&quot;</span>&gt;</span> 女<br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;basketball&quot;</span>&gt;</span> 篮球<br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;swimming&quot;</span>&gt;</span> 游泳<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><br><p><strong>attr() &#x2F; prop() 方法</strong></p><ul><li>attr(name)获取属性的值</li><li>attr(key, value)</li><li>attr({key0:value0, key1:value1})</li><li>attr(key, funvtion() )   用函数的返回值作为元素的属性</li></ul><br><p>prop() 和 attr() 都是用来获取和设置属性的值</p><p>区别：</p><ul><li>在选中情况下，prop(checked) 返回 true，attr(checked) 返回checked</li><li>在未选中情况下，prop(checked) 返回 false，prop(checked) 返回 undefined</li></ul><p>建议：</p><p>attr()  – 不推荐操作 checked、readOnly、selected、disabled 等，但该方法可以操作非标准属性，如自定义属性</p><p>prop()  – 仅推荐操作 checked、readOnly、selected、disabled 等</p><br><h2 id="对-dom-对象的增删改"><a href="#对-DOM-对象的增删改" class="headerlink" title="对 DOM 对象的增删改"></a>对 DOM 对象的增删改</h2><h3 id="插入节点"><a href="#插入节点" class="headerlink" title="插入节点"></a>插入节点</h3><p><strong>内部插入节点方法</strong></p><table><thead><tr><th>语法格式</th><th>功能描述</th></tr></thead><tbody><tr><td>append(content &#x2F; function)</td><td>向所选择的元素内部追加 content 元素 &#x2F; 函数返回的内容</td></tr><tr><td>appendTo(content)</td><td>把选择的元素添加到 content 元素中</td></tr><tr><td>prepend(content &#x2F; function)</td><td>向所选择的元素内部前置 content 元素 &#x2F; 函数返回的内容</td></tr><tr><td>prependTo(content)</td><td>把选择的元素前置到 content 元素中</td></tr></tbody></table><br><p><strong>外部插入节点方法</strong></p><table><thead><tr><th>语法格式</th><th>功能描述</th></tr></thead><tbody><tr><td>after(content &#x2F; function)</td><td>向所选择的元素外追加 content 元素 &#x2F; 函数返回的内容</td></tr><tr><td>before(content &#x2F; function)</td><td>向所选择的元素外前置 content 元素 &#x2F; 函数返回的内容</td></tr><tr><td>insertAfter(content)</td><td>把选择的元素追加到 content 元素外</td></tr><tr><td>insertBefore(content)</td><td>把选择的元素前置到 content 元素外</td></tr></tbody></table><br><h3 id="替换节点"><a href="#替换节点" class="headerlink" title="替换节点"></a>替换节点</h3><ul><li>replaceWith(content)  –  将选择的元素用参数 content 替换</li><li>replaceALL(selector)  –  将参数 selector 元素用 选择的元素替换</li></ul><br><h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><ul><li>remove(expr)  –  删除元素，expr 筛选</li><li>empty()  –  清空所选择元素里的内容</li></ul><br><h2 id="样式修改"><a href="#样式修改" class="headerlink" title="样式修改"></a>样式修改</h2><ul><li>css(name, value)  –  直接设置样式</li><li>addClass(class)  –  添加样式类别，多个空格隔开</li><li>remove(class)  –  删除样式类别</li><li>toggleClass(class)  –  切换样式。有就删，没有就加</li><li>offset()  – 获取和设置元素的坐标，offset({ top: 10, left: 30 })</li></ul><h2 id="jquery-动画"><a href="#JQuery-动画" class="headerlink" title="JQuery 动画"></a>JQuery 动画</h2><p><strong>基本动画</strong></p><ul><li>show()  –  将隐藏的元素显示</li><li>hide()  –  将可见的元素隐藏</li><li>toggle()  – 可见就隐藏，不可见就显示</li></ul><p>以上动画方法都可以添加参数</p><ol><li>第一个参数是动画执行的时长，以毫秒为单位</li><li>第二个参数是动画的回调函数（动画完成后自动调用的函数）</li></ol><br><p><strong>淡化动画</strong></p><ul><li>fadeIn  –  淡入</li><li>fadeOut  –  淡出</li><li>fadeTo(时间，透明度)  – 在指定时长内慢慢的将透明度修改到指定的值</li><li>fadeToggle  –  淡入&#x2F;淡出切换</li></ul><h2 id="jquery-事件"><a href="#JQuery-事件" class="headerlink" title="JQuery 事件"></a>JQuery 事件</h2><p>对于页面加载完成之后</p><ul><li>jQuery 会较 原生js 先执行</li><li>jQuery 是浏览器的内核解析完页面的标签创建好 DOM 对象之后就马上执行</li><li>原生 js 还要等标签显示时需要的内容加载</li><li>原生js的页面加载完成之后，只会执行最后一次的赋值函数</li><li>jQuery的页面加载完成之后是全部把注册的function函数，依次顺序全部执行</li></ul><br><table><thead><tr><th>鼠标事件</th><th>键盘事件</th><th>表单事件</th><th>窗口事件</th></tr></thead><tbody><tr><td>click</td><td>keypress（单按）</td><td>submit</td><td>load</td></tr><tr><td>dblcilck（双击）</td><td>keydown（按下）</td><td>change</td><td>resize</td></tr><tr><td>mouseenter</td><td>keyup（弹起）</td><td>focus</td><td>scroll</td></tr><tr><td>mouseleave</td><td></td><td>blur（失去焦点）</td><td>unload</td></tr></tbody></table><p><strong>事件的冒泡</strong></p><p>是指父子元素同时监听同一个事件。</p><p>当触发子元素的事件的时候，同一个事件也被传递到了父元素的事件里去响应</p><p>那么如何阻止事件冒泡呢?</p><p>在子元素事件函数体内 return false; 可以阻止事件的冒泡传递</p><br><p><strong>javaScript 事件对象</strong></p><p>事件对象，是封装有触发的事件信息的一个javascript对象</p><p>如何获取呢 javascript 事件对象呢?</p><p>在给元素绑定事件的时候，在事件的 function( event ) 参数列表中添加一个参数，这个参数名我们习惯为event，这个 event 就是 javascript 传递参事件处理函数的事件对象</p></font>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML/CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【笔记】MySQL</title>
      <link href="/post/c24675b4.html"/>
      <url>/post/c24675b4.html</url>
      
        <content type="html"><![CDATA[<font size="3"><meta name="referrer" content="no-referrer"><h1 id="sql"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><p>全称 Structured Query Language，结构化查询语言。</p><p>操作关系型数据库的编程语言，定义了 一套操作关系型数据库统一标准</p><br><p>SQL语句，根据其功能，主要分为四类：DDL、DML、DQL、DCL</p><ul><li>DDL：数据定义语言，用来定义数据库对象（数据库，表， 字段）</li><li>DML：数据操作语言，用来对数据库表中的数据进行增删改</li><li>DQL：数据查询语言，用来查询数据库中表的记录</li><li>DCL：数据控制语言，用来创建数据库用户、控制数据库的访问权限</li></ul><br><h2 id="mysql的数据类型"><a href="#MySQL的数据类型" class="headerlink" title="MySQL的数据类型"></a>MySQL的数据类型</h2><p>（1）数值类型</p><table><thead><tr><th align="center">类型</th><th align="center">大小(byte)</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">TINYINT</td><td align="center">1</td><td align="center">小整数</td></tr><tr><td align="center">SMALLINT</td><td align="center">2</td><td align="center">大整数</td></tr><tr><td align="center">MEDIUMINT</td><td align="center">3</td><td align="center">大整数</td></tr><tr><td align="center">INT&#x2F;INTEGE</td><td align="center">4</td><td align="center">大整数</td></tr><tr><td align="center">BIGINT</td><td align="center">8</td><td align="center">极大整数</td></tr><tr><td align="center">FLOAT</td><td align="center">4</td><td align="center">单精度浮点数</td></tr><tr><td align="center">DOUBLE</td><td align="center">8</td><td align="center">双精度浮点数</td></tr><tr><td align="center">DECIMAL</td><td align="center"></td><td align="center">小数</td></tr></tbody></table><br><p>（2）字符串类型</p><table><thead><tr><th>类型</th><th align="left">描述</th></tr></thead><tbody><tr><td>CHAR</td><td align="left">定长字符串(需要指定长度)</td></tr><tr><td>VARCHAR</td><td align="left">变长字符串(需要指定长度)</td></tr><tr><td>TINYBLOB</td><td align="left">不超过255个字符的二进制数据</td></tr><tr><td>TINYTEXT</td><td align="left">短文本字符串</td></tr><tr><td>BLOB</td><td align="left">二进制形式的长文本数据</td></tr><tr><td>TEXT</td><td align="left">长文本数据</td></tr><tr><td>MEDIUMBLOB</td><td align="left">二进制形式的中等长度文本数据</td></tr><tr><td>MEDIUMTEXT</td><td align="left">中等长度文本数据</td></tr><tr><td>LONGBLOB</td><td align="left">二进制形式的极大文本数据</td></tr><tr><td>LONGTEXT</td><td align="left">极大文本数据</td></tr></tbody></table><p>char 与 varchar 都可以描述字符串</p><p>char 是定长字符串，指定长度多长，就占用多少个字符，和字段值的长度无关 </p><p>而 varchar 是变长字符串，指定的长度为最大占用长度 。相对来说，char 的性能会更高些</p><br><p>（3）日期时间类型</p><table><thead><tr><th>类型</th><th>大小</th><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>DATA</td><td>3</td><td>YYYY-MM-DD</td><td>日期</td></tr><tr><td>TIME</td><td>3</td><td>HH:MM:SS</td><td>时间值或持续时间</td></tr><tr><td>YEAR</td><td>1</td><td>YYYY</td><td>年份</td></tr><tr><td>DATETIME</td><td>8</td><td>YYYY-MM-DD HH:MM:SS</td><td>混合日期和时间</td></tr><tr><td>TIMESTAMP</td><td>4</td><td>YYYY-MM-DD HH:MM:SS</td><td>时间戳</td></tr></tbody></table><br><h2 id="ddl"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h2><p>数据定义语言，用来定义数据库对象（数据库，表， 字段）</p><br><h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><p>（1）查询所有数据库</p><p><code>show databases;</code></p><br><p>（2）查询当前数据库</p><p><code>select databases();</code></p><br><p>（3）创建数据库</p><p><code>create database [ if not exists ] 数据库名 [ 字符集 ] [ 排序规则 ];</code></p><br><p>（4）删除数据库</p><p><code>drop database [ if exists ] 数据库名;</code></p><br><p>（5）切换数据库</p><p><code>use 数据库名;</code></p><br><h3 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h3><h4 id="表操作-查询"><a href="#表操作-查询" class="headerlink" title="表操作 - 查询"></a>表操作 - 查询</h4><p>（1）查询当前数据库所有的表（需要先进入该数据库）</p><p><code>show tables;</code></p><br><p>（2）查看指定表结构</p><p><code>desc 表名;</code></p><br><p>（3）查询指定表的建表语句</p><p><code>show create table 表名;</code></p><br><p>（4）创建表结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table 表名(<br>字段1 字段1类型 [ COMMENT 字段1注释 ],<br>字段2 字段2类型 [ COMMENT 字段2注释 ],<br>字段3 字段3类型 [ COMMENT 字段3注释 ],<br>......<br>字段n 字段n类型 [ COMMENT 字段n注释 ]<br>) [COMMENT 表注释] ;<br></code></pre></td></tr></table></figure><br><p>eg. 设计一张员工信息表，要求如下：</p><ol><li>编号（纯数字）</li><li>员工工号（字符串类型，长度不超过10位）</li><li>员工姓名（字符串类型，长度不超过10位）</li><li>性别（男 &#x2F; 女，存储一个汉字）</li><li>年龄（正常人年龄，不可能存储负数）</li><li>身份证号（二代身份证号均为18位，身份证中有 X 这样的字符）</li><li>入职时间（取值年月日即可）</li></ol><br><p>对应的建表语句为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table emp (<br>    id        int comment &#x27;编号&#x27;,<br>    workno    varchar(10) comment &#x27;工号&#x27;,<br>    name      varchar(10) comment &#x27;姓名&#x27;,<br>    gender    char(1) comment &#x27;性别&#x27;,<br>    age       tinyint unsigned comment &#x27;年龄&#x27;,<br>    idcard    char(18) comment &#x27;身份证号&#x27;,<br>    entrydate date comment &#x27;入职时间&#x27;<br>) comment &#x27;员工表&#x27;;<br></code></pre></td></tr></table></figure><br><h4 id="表操作-修改"><a href="#表操作-修改" class="headerlink" title="表操作 - 修改"></a>表操作 - 修改</h4><p>（1）添加字段</p><p><code>alter table 表名 add 字段名 类型 (长度) [ COMMENT 注释 ] [ 约束 ];</code></p><br><p>（2）修改数据类型</p><p><code>alter table 表名 modify 字段名 新数据类型 (长度);</code></p><br><p>（3）修改字段名和字段类型</p><p><code>alter table 表名 change 旧字段名 新字段名 类型 (长度) [ COMMENT 注释 ] [ 约束 ];</code></p><br><p>（4）删除字段</p><p><code>alter table 表名 drop 字段名;</code></p><br><p>（5）修改表名</p><p><code>alter table 表名 rename to 新表名;</code></p><br><h4 id="表操作-删除"><a href="#表操作-删除" class="headerlink" title="表操作 - 删除"></a>表操作 - 删除</h4><p>（1）删除表</p><p><code>drop table [ IF EXISTS ] 表名</code></p><p>可选项 IF EXISTS 代表只有表名存在时才会删除该表，表名不存在则不执行删除操作</p><p>如果不加该参数项，删除一张不存在的表，执行将会报错</p><br><p>（2）删除指定表，并重新创建表</p><p><code>truncate table 表名;</code></p><br><h2 id="dml"><a href="#DML" class="headerlink" title="DML"></a>DML</h2><p>数据操作语言，用来对数据库表中的数据进行增删改</p><br><h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><p>（1）给指定字段添加数据</p><p><code>insert into 表名 (字段名1, 字段名2, ...) values (值1, 值2, ...);</code></p><br><p>（2）给全部字段添加数据</p><p><code>insert into 表名 values (值1, 值2, ...);</code></p><br><p>（3）批量添加数据</p><p><code>insert into 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...), (值1, 值2, ...), (值 1, 值2, ...);</code></p><br><p><code>insert into 表名 values (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);</code></p><br><p><strong>PS：</strong></p><ul><li>插入数据时，指定的字段顺序需要与值的顺序是一一对应的</li><li>字符串和日期型数据应该包含在引号中</li><li>插入的数据大小，应该在字段的规定范围内</li></ul><br><h3 id="修改元素"><a href="#修改元素" class="headerlink" title="修改元素"></a>修改元素</h3><p>修改数据的基本语法：</p><p><code>update 表名 set 字段名1 = 值1, 字段名2 = 值2, .... [ WHERE 条件 ];</code></p><br><p>eg. 将所有的员工入职日期修改为 2008-01-01</p><p><code>update employee set entrydate = &#39;2008-01-01&#39;;</code></p><br><p>PS：修改语句的条件可以有，也可以没有。如果没有条件，则会修改整张表的所有数据</p><br><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><p>删除数据的基本语法：</p><p><code>delete from 表名 [ while 条件 ];</code></p><br><p><strong>PS：</strong></p><ul><li><p>DELETE 语句的条件可以有，也可以没有，如果没有条件，则会删除整张表的所有数据</p></li><li><p>DELETE 语句不能删除某一个字段的值（可以使用 UPDATE，将该字段值置为 NULL ）</p></li><li><p>当进行删除全部数据操作时，datagrip 会询问是否确认删除，直接点击 Execute 即可</p></li></ul><br><h2 id="dql"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h2><p>数据查询语言，数据查询语言，用来查询数据库中表的记录</p><br><p>DQL 查询语句的语法结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT<br>字段列表<br>FROM<br>表名列表<br>WHERE<br>条件列表<br>GROUP BY<br>分组字段列表<br>HAVING<br>分组后条件列表<br>ORDER BY<br>排序字段列表<br>LIMIT<br>分页参数<br></code></pre></td></tr></table></figure><br><h3 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h3><p>不带任何的查询条件，查询的语法为：</p><p>（1）查询多个字段</p><p><code>select 字段1, 字段2, 字段3 ... from 表名;</code></p><p><code>select * from 表名;</code>   代表查询所有字段</p><br><p>（2）字段设置别名</p><p><code>select 字段1 [ as 别名1 ], 字段2 [ as 别名2 ] ... from 表名;</code></p><p><code>select 字段1 [ 别名1 ], 字段2 [ 别名2 ] ... from 表名;</code></p><p>PS：一旦为表起了别名，就不能再使用表名来指定对应的字段了，只能够使用别名来指定字段</p><br><p>（3）去除重复记录</p><p><code>select distinct 字段列表 from 表名</code></p><p>eg. 查询公司员工的上班地址有哪些（不要重复）</p><p><code>select distinct workaddress &#39;工作地址&#39; from emp;</code></p><br><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><p>语法：</p><p><code>select 字段列表 from 表名 where 条件列表;</code></p><br><p><strong>条件：</strong></p><p>（1）常用的比较运算符</p><table><thead><tr><th>比较运算符</th><th>功能</th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于</td></tr><tr><td>&#x3D;</td><td>等于</td></tr><tr><td>&lt;&gt; 或 !&#x3D;</td><td>不等于</td></tr><tr><td>between … and …</td><td>在某个范围之内（含最大最小值）</td></tr><tr><td>in(…)</td><td>在 in 之后的列表中</td></tr><tr><td>like 占位符</td><td>模糊匹配（_匹配单个字符，%匹配任意个字符）</td></tr><tr><td>is null</td><td>是空</td></tr></tbody></table><br><p>（2）常用的逻辑运算符</p><table><thead><tr><th>逻辑运算符</th><th>功能</th></tr></thead><tbody><tr><td>and 或 &amp;&amp;</td><td>并且</td></tr><tr><td>or 或 ||</td><td>或者</td></tr><tr><td>not 或 !</td><td>非</td></tr></tbody></table><br><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><p>将一列数据作为一个整体，进行纵向计算</p><br><p>常见的聚合函数</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>count</td><td>统计数量</td></tr><tr><td>max</td><td>最大值</td></tr><tr><td>min</td><td>最小值</td></tr><tr><td>avg</td><td>平均值</td></tr><tr><td>sum</td><td>求和</td></tr></tbody></table><br><p>语法：</p><p><code>select 聚合函数(字段列表) from 表名;</code></p><p>PS：NULL值不参与所有聚合函数的运算</p><br><h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><p>语法：</p><p><code>select 字段列表 from 表名 [ where 条件 ] group by 分组字段名 [having 过滤后条件];</code></p><br><p>where 与 having 区别：</p><p>（1）执行时机不同：</p><p>where 是分组之前进行过滤，不满足 where 条件，不参与分组，having 是分组之后对结果进行过滤</p><p>（2） 判断条件不同：</p><p>where 不能对聚合函数进行判断，而 having 可以</p><br><p>eg. 根据性别分组 , 统计男性员工 和 女性员工的数量</p><p><code>select gender, count(*) from emp group by gender;</code></p><br><h3 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h3><p>语法：</p><p><code>select 字段列表 from 表名 order by 字段1 排序方式1, 字段2 排序方式2;</code></p><br><p>排序方式：</p><ul><li>ASC：升序（默认值）</li><li>DESC：降序</li></ul><p>PS：如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序</p><br><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><p>语法：</p><p><code>select 字段列表 from 表名 limit 起始索引, 查询记录数;</code></p><br><p>PS：</p><p>起始索引从 0 开始，起始索引 &#x3D; （查询页码 - 1）* 每页显示记录数</p><p>分页查询是数据库的方言，不同的数据库有不同的实现，MySQL 中是 limit</p><p>如果查询的是第一页数据，起始索引可以省略，直接简写为 limit 10</p><br><p>eg1. 查询第1页员工数据, 每页展示10条记录</p><p><code>select * from emp limit 10;</code></p><p>eg2. 查询第2页员工数据，每页展示10条记录</p><p><code>select * from emp limit 10, 10;</code></p><br><h3 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">FROM<br>表名列表<br>WHERE<br>条件列表<br>GROUP BY<br>分组字段列表<br>HAVING<br>分组后条件列表<br>SELECT<br>字段列表<br>ORDER BY<br>排序字段列表<br>LIMIT<br>分页参数<br></code></pre></td></tr></table></figure><br><h2 id="dcl"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h2><p>数据控制语言，用来管理数据库用户、控制数据库的访问权限</p><br><h3 id="管理用户"><a href="#管理用户" class="headerlink" title="管理用户"></a>管理用户</h3><p>（1）查询用户</p><p><code>select *  from mysql.user;</code></p><br><p>（2）创建用户</p><p><code>create user &#39;用户名&#39;@&#39;主机名&#39; identified by &#39;密码&#39;;</code></p><br><p>（3）修改用户密码</p><p><code>alter user &#39;用户名&#39;@&#39;主机名&#39; identified with mysql_native_password by &#39;新密码&#39;;</code></p><br><p>（4）删除用户</p><p><code>drop user &#39;用户名&#39;@&#39;主机名&#39;;</code></p><br><h3 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h3><p>MySQL 中定义了很多种权限，但是常用的就以下几种：</p><table><thead><tr><th>权限</th><th>说明</th></tr></thead><tbody><tr><td>all, all privileges</td><td>所有权限</td></tr><tr><td>select</td><td>查询数据</td></tr><tr><td>insert</td><td>插入数据</td></tr><tr><td>update</td><td>修改数据</td></tr><tr><td>delete</td><td>删除数据</td></tr><tr><td>alter</td><td>修改表</td></tr><tr><td>drop</td><td>删除数据库 &#x2F; 表 &#x2F; 视图</td></tr><tr><td>create</td><td>创建数据库 &#x2F; 表</td></tr></tbody></table><br><p>（1）查询权限</p><p><code>show grants for &#39;用户名&#39;@&#39;主机名&#39;;</code></p><br><p>（2）授予权限</p><p><code>grant 权限列表 on 数据库名.表名 to &#39;用户名&#39;@&#39;主机名&#39;;</code></p><br><p>（3）撤销权限</p><p><code>revoke 权限列表 on 数据库名.表名 from &#39;用户名&#39;@&#39;主机名&#39;;</code></p><br><p>PS：</p><ul><li>多个权限之间，使用逗号分隔</li><li>授权时，数据库名和表名可以使用 * 进行通配，代表所有</li></ul><br><p>eg. 撤销 ‘heima‘@’%’ 用户的itcast数据库的所有权限</p><p><code>revoke all on itcast.* from &#39;heima&#39;@&#39;%&#39;;</code></p><br><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>MySQL 中的函数主要分为以下四类： 字符串函数、数值函数、日期函数、流程函数</p><br><h2 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h2><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>concat (s1, s2, … sn)</td><td>字符串拼接，将 S1，S2，… Sn 拼接成一个字符串</td></tr><tr><td>lower (str)</td><td>将字符串str全部转为小写</td></tr><tr><td>upper (str)</td><td>将字符串str全部转为大写</td></tr><tr><td>lpad (str, n, pad)</td><td>左填充，用字符串 pad 对 str 的左边进行填充，达到 n 个字符串长度</td></tr><tr><td>rpad (str, n, pad)</td><td>右填充，用字符串 pad 对 str 的右边进行填充，达到 n 个字符 串长度</td></tr><tr><td>trim (str)</td><td>去掉字符串头部和尾部的空格</td></tr><tr><td>substring (str, start, len)</td><td>返回从字符串 str 从 start 位置起的 len 个长度的字符串</td></tr></tbody></table><br><h2 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h2><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>cell (x)</td><td>向上取整</td></tr><tr><td>floor (x)</td><td>向下取整</td></tr><tr><td>mod (x, y)</td><td>返回 x&#x2F;y 的模</td></tr><tr><td>rand ()</td><td>返回 0~1 内的随机数</td></tr><tr><td>round (x, y)</td><td>求参数 x 的四舍五入的值，保留 y 位小数</td></tr></tbody></table><br><h2 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h2><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>curdate ()</td><td>返回当前日期</td></tr><tr><td>curtime ()</td><td>返回当前时间</td></tr><tr><td>now ()</td><td>返回当前日期和时间</td></tr><tr><td>year (date)</td><td>获取指定date的年份</td></tr><tr><td>month (date)</td><td>获取指定date的月份</td></tr><tr><td>day (date)</td><td>获取指定date的日期</td></tr><tr><td>date_add (date, expr)</td><td>返回一个日期&#x2F;时间值加上一个时间间隔 expr 后的时间值</td></tr><tr><td>datediff (date1, date2)</td><td>返回起始时间 date1 和 结束时间 date2 之间的天 数</td></tr></tbody></table><br><h2 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h2><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>if (value, t, f)</td><td>如果 value 为 true，则返回 t，否则返回 f</td></tr><tr><td>ifnull (value1, value2)</td><td>如果value1不为空，返回 value1，否则返回 value2</td></tr><tr><td>case when [val1] then [res1] … else [default] end</td><td>如果 val1 为 true，返回 res1，… 否则返回 default 默认值</td></tr><tr><td>case [expr] when [val1] then [res1] … else [default] end</td><td>如果 expr 的值等于 val1，返回 res1，… 否则返回 default 默认值</td></tr></tbody></table><p>eg. 查询 emp 表的员工姓名和工作地址（北京&#x2F;上海 —-&gt; 一线城市，其他 —-&gt; 二线城市）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select name,<br>       (case workaddress<br>            when &#x27;北京&#x27; then &#x27;一线城市&#x27;<br>            when &#x27;上海&#x27; then &#x27;一线城市&#x27;<br>            else<br>                &#x27;二线城市&#x27; end) as &#x27;工作地址&#x27;<br>from emp;<br></code></pre></td></tr></table></figure><br><h1 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h1><p>概念：约束是作用于表中字段上的规则，用于限制存储在表中的数据</p><p>目的：保证数据库中数据的正确、有效性和完整性</p><p>分类：</p><table><thead><tr><th>约束</th><th>描述</th><th>关键字</th></tr></thead><tbody><tr><td>非空约束</td><td>限制该字段的数据不能为null</td><td>not null</td></tr><tr><td>唯一约束</td><td>保证该字段的所有数据都是唯一、不重复的</td><td>unique</td></tr><tr><td>主键约束</td><td>主键是一行数据的唯一标识，要求非空且唯一</td><td>primary key</td></tr><tr><td>默认约束</td><td>保存数据时，如果未指定该字段的值，则采用默认值</td><td>default</td></tr><tr><td>检查约束</td><td>保证字段值满足某一个条件</td><td>check</td></tr><tr><td>外键约束</td><td>用来让两张表的数据之间建立连接，保证数据的一致 性和完整性</td><td>foreign key</td></tr></tbody></table><br><p>eg. 根据如下需求，完成表结构的创建：</p><p><img src="https://gitee.com/Greedy_firtree/picture/raw/master/blog/image-20230608164232914.png" alt="image-20230608164232914"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE tb_user (<br>    id     int AUTO_INCREMENT PRIMARY KEY COMMENT &#x27;ID唯一标识&#x27;,<br>    name   varchar(10) NOT NULL UNIQUE COMMENT &#x27;姓名&#x27;,<br>    age    int check (age &gt; 0 &amp;&amp; age &lt;= 120) COMMENT &#x27;年龄&#x27;,<br>    status char(1) default &#x27;1&#x27; COMMENT &#x27;状态&#x27;,<br>    gender char(1) COMMENT &#x27;性别&#x27;<br>);<br></code></pre></td></tr></table></figure><p>在为字段添加约束时，我们只需要在字段之后加上约束的关键字即可</p><br><h2 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h2><p>外键：用来让两张表的数据之间建立连接，从而保证数据的一致性和完整性</p><br><p>（1）添加外键</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE 表名 (<br>字段名 数据类型,<br>...<br>[CONSTRAINT] [外键名称] FOREIGN KEY (外键字段名) REFERENCES 主表 (主表列名)<br>);<br></code></pre></td></tr></table></figure><p><code>ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名) REFERENCES 主表 (主表列名) ;</code></p><br><p>eg. 为 emp 表的 dept_id 字段添加外键约束，关联 dept 表的主键 id</p><p><code>alter table emp add constraint test foreign key (dept_id) references dept (id);</code></p><br><p>（2）删除外键</p><p><code>alter table 表名 drop foreign key 外键名称;</code></p><br><br><p><strong>删除&#x2F;更新行为：</strong></p><p>添加了外键之后，再删除父表数据时产生的约束行为，我们就称为删除&#x2F;更新行为</p><p>具体的删除&#x2F;更新行为有以下几种：</p><table><thead><tr><th>行为</th><th>说明</th></tr></thead><tbody><tr><td>no action</td><td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除&#x2F;更新（默认行为）</td></tr><tr><td>restrict</td><td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除&#x2F;更新（与 no action 一致）</td></tr><tr><td>cascade</td><td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则也删除&#x2F;更新外键在子表中的记录</td></tr><tr><td>set null</td><td>当在父表中删除对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为 null（要求该外键允许取 null）</td></tr><tr><td>set default</td><td>父表有变更时，子表将外键列设置成一个默认的值（Innodb不支持）</td></tr></tbody></table><br><p>语法：</p><p><code>alter table 表名 add constraint 外键名称 foreign key (外键字段) references 主表名 (主表字段名) on update [cascade] on delete [cascade];</code></p><br><h1 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h1><p>由于业务之间相互关联，所以各个表结构之间也存在着各种联系，基本上分为三种：</p><p>（1）一对多（多对一）</p><ul><li>关系：一个部门对应多个员工，一个员工对应一个部门</li><li>实现：在多的一方建立外键，指向另一方的主键</li></ul><br><p>（2）多对多</p><ul><li>关系：一个学生可以选修多门课程，一门课程也可以供多个学生选择</li><li>实现：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键</li></ul><br><p>（3）一对一</p><ul><li>关系：多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另 一张表中，以提升操作效率</li><li>实现：在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的（unique）</li></ul><br><br><h2 id="多表查询概述"><a href="#多表查询概述" class="headerlink" title="多表查询概述"></a>多表查询概述</h2><p>多表查询就是指从多张表中查询数据</p><p>我们要执行多表查询，就只需要使用逗号分隔多张表即可，如：<code>select * from emp , dept ;</code></p><br><p>默认情况下两个表一起查询我们会得到所有的组合情况，这种现象为<strong>笛卡尔积</strong></p><p>笛卡尔积：是指在数学中，集合 A 和集合 B 的所有组合情况</p><p><img src="https://gitee.com/Greedy_firtree/picture/raw/master/blog/image-20230608170506180.png" alt="image-20230608170506180"></p><p>在SQL语句中，我们可以给多表查询加上连接查询的条件来去除无效的笛卡尔积</p><br><p><strong>分类：</strong></p><ul><li>连接查询<ul><li>内连接：相当于查询A、B交集部分数据</li><li>外连接：<ul><li>左外连接：查询左表所有数据，以及两张表交集部分数据</li><li>右外连接：查询右表所有数据，以及两张表交集部分数据</li></ul></li><li>自连接：当前表与自身的连接查询，自连接必须使用表别名</li></ul></li><li>子查询</li></ul><br><h2 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h2><p>内连接查询的是两张表交集部分的数据</p><br><p>（1）隐式内连接</p><p><code>select 字段列表 from 表1, 表2, where 条件 ... ;</code></p><br><p>（2）显示内连接</p><p><code>select 字段列表 from 表1 [ inner ] join 表2 on 连接条件 ... ;</code></p><br><h2 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h2><p>外连接分为两种，分别是：左外连接 和 右外连接</p><br><p>（1）左外连接</p><p><code>select 字段列表 from 表1 left [ outer] join 表2 on 条件 ... ;</code></p><br><p>（2）右外连接</p><p><code>select 字段列表 from 表1 right [ outer ] join 表2 on 条件 ... ;</code></p><br><p>PS：</p><p>左外连接和右外连接是可以相互替换的，只需要调整在连接查询时SQL中表结构的先后顺序就可以了。</p><p>而我们在日常开发使用时，更偏向于左外连接</p><br><h2 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h2><p>自连接查询，顾名思义，就是自己连接自己，也就是把一张表连接查询多次</p><br><p>语法：</p><p><code>select 字段列表 from 表1 别名1 join 表1 别名2 on 条件 ... ;</code></p><br><p>在自连接查询中，必须要为表起别名，要不然我们不清楚所指定的条件、返回的字段，是哪一张表的字段</p><br><h2 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h2><p>对于 union 查询，就是把多次查询的结果合并起来，形成一个新的查询结果集</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT 字段列表 FROM 表A ...<br>UNION [ ALL ]<br>SELECT 字段列表 FROM 表B ....;<br></code></pre></td></tr></table></figure><ul><li><p>对于联合查询的多张表的列数必须保持一致，字段类型也需要保持一致</p></li><li><p>union all 会将全部的数据直接合并在一起，union 会对合并之后的数据去重</p></li></ul><br><p>eg. 将薪资低于 5000 的员工 , 和 年龄大于 50 岁的员工全部查询出来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from emp where salary &lt; 5000<br>union all<br>select * from emp where age &gt; 50;<br></code></pre></td></tr></table></figure><br><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><p>SQL 语句中嵌套 SELECT 语句，称为嵌套查询，又称子查询</p><p><code>select * from t1 where column1 = ( select column1 from t2 ) ;</code></p><p>子查询外部的语句可以是 insert&#x2F; update&#x2F; delete&#x2F; select 的任何一个</p><br><p>根据子查询结果不同，分为：</p><ul><li>标量子查询（子查询结果为单个值）</li><li>列子查询（子查询结果为一列）</li><li>行子查询（子查询结果为一行）</li><li>表子查询（子查询结果为多行多列）</li></ul><br><p>根据子查询位置，分为：</p><ul><li>where 之后</li><li>from 之后</li><li>select 之后</li></ul><br><p><strong>标量子查询：</strong></p><p>子查询返回的结果是单个值（数字、字符串、日期等），最简单的形式</p><br><p>eg. 根据 “销售部” 部门 ID，查询员工信息</p><p><code> select * from emp where dept_id = (select id from dept where name = &#39;销售部&#39;);</code></p><br><br><p><strong>列子查询：</strong></p><p>子查询返回的结果是一列（可以是多行）</p><p>常用的操作符：IN 、NOT IN、ANY、SOME、ALL</p><br><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>IN</td><td>在指定的集合范围之内，多选一</td></tr><tr><td>NOT IN</td><td>不在指定的集合范围之内</td></tr><tr><td>ANY</td><td>子查询返回列表中，有任意一个满足即可</td></tr><tr><td>SOME</td><td>与 ANY 等同，使用 SOME 的地方都可以使用 ANY</td></tr><tr><td>ALL</td><td>子查询返回列表的所有值都必须满足</td></tr></tbody></table><br><p>eg. 查询 “销售部” 和 “市场部” 的所有员工信息</p><p><code>select * from emp where dept_id in (select id from dept where name = &#39;销售部&#39; or name = &#39;市场部&#39;);</code></p><br><br><p><strong>行子查询：</strong></p><p>子查询返回的结果是一行（可以是多列）</p><br><p>eg. 查询与 “张无忌” 的薪资及直属领导相同的员工信息</p><p>（1）查询 “张无忌” 的薪资及直属领导</p><p><code>select salary, managerid from emp where name = &#39;张无忌&#39;;</code></p><p>（2）查询与 “张无忌” 的薪资及直属领导相同的员工信息</p><p><code>select * from emp where (salary, managerid) = (select salary, managerid from emp where name = &#39;张无忌&#39;);</code></p><br><br><p><strong>表子查询：</strong></p><p>子查询返回的结果是多行多列</p><br><p>eg. 查询与 “鹿杖客” , “宋远桥” 的职位和薪资相同的员工信息</p><p>（1）查询 “鹿杖客” , “宋远桥” 的职位和薪资</p><p><code>select job, salary from emp where name = &#39;鹿杖客&#39; or name = &#39;宋远桥&#39;;</code></p><p>（2）查询与 “鹿杖客” , “宋远桥” 的职位和薪资相同的员工信息</p><p><code>select * from emp where (job, salary) in ( select job, salary from emp where name = &#39;鹿杖客&#39; or name = &#39;宋远桥&#39; );</code></p><br><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>事务是一组操作的集合，它是一个不可分割的工作单位</p><p>事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求</p><p>即这些操作要么同时成功，要么同时失败</p><br><h2 id="事务操作"><a href="#事务操作" class="headerlink" title="事务操作"></a>事务操作</h2><p>（1）查看 &#x2F; 设置事务提交方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select @@autocommit ;<br>set @@autocommit = 0 ;<br></code></pre></td></tr></table></figure><br><p>（2）提交事务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">commit;<br></code></pre></td></tr></table></figure><br><p>（3）回滚事务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">rollback;<br></code></pre></td></tr></table></figure><br><p>（4）开始事务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">start transaction 或 begin ;<br></code></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 开启事务<br>start transaction<br><br><br>-- 1. 查询张三余额<br>select * from account where name = &#x27;张三&#x27;;<br><br>-- 2. 张三的余额减少1000<br>update account set money = money - 1000 where name = &#x27;张三&#x27;;<br><br>-- 3. 李四的余额增加1000<br>update account set money = money + 1000 where name = &#x27;李四&#x27;;<br><br><br>-- 如果正常执行完毕, 则提交事务<br>commit;<br>-- 如果执行过程中报错, 则回滚事务<br>-- rollback;<br></code></pre></td></tr></table></figure><br><h2 id="事务特性"><a href="#事务特性" class="headerlink" title="事务特性"></a>事务特性</h2><ul><li>原子性（Atomicity）：事务是不可分割的最小操作单元，要么全部成功，要么全部失败</li><li>一致性（Consistency）：事务完成时，必须使所有的数据都保持一致状态</li><li>隔离性（Isolation）：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行</li><li>持久性（Durability）：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的</li></ul><p>上述就是事务的四大特性，简称ACID</p><br><h2 id="并发事务问题"><a href="#并发事务问题" class="headerlink" title="并发事务问题"></a>并发事务问题</h2><p>（1）赃读：一个事务读到另外一个事务还没有提交的数据</p><p>（2）不可重复读：一个事务先后读取同一条记录，但两次读取的数据不同</p><p>（3） 幻读：一个事务按照条件查询数据时，没有对应的数据行，但是在插入数据时，又发现这行数据 已经存在，好像出现了 “幻影”</p><br><h2 id="事务隔离"><a href="#事务隔离" class="headerlink" title="事务隔离"></a>事务隔离</h2><p>为了解决并发事务所引发的问题，在数据库中引入了事务隔离级别。主要有以下几种：</p><p><img src="https://gitee.com/Greedy_firtree/picture/raw/master/blog/image-20230608180346966.png" alt="image-20230608180346966"></p><br><p>（1）查看事务隔离级别</p><p><code>select @@TRANSACTION_ISOLATION;</code></p><br><p>（2）设置事务隔离级别</p><p><code>SET [ SESSION | GLOBAL ] TRANSACTION ISOLATION LEVEL &#123; READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE &#125; ;</code></p><br><p>PS：事务隔离级别越高，数据越安全，但是性能越低</p><br><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><p>索引（index）是帮助 MySQL 高效获取数据的数据结构（有序）</p><p>在数据之外，数据库系统还维护着满足特定查找算法的数据结构</p><p>这些数据结构以某种方式引用（指向）数据</p><p>这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引</p><br><table><thead><tr><th>优势</th><th>劣势</th></tr></thead><tbody><tr><td>提高数据检索的效率，降低数据库 的IO成本</td><td>索引列也是要占用空间的</td></tr><tr><td>通过索引列对数据进行排序，降低 数据排序的成本，降低CPU的消耗</td><td>索引大大提高了查询效率，同时却也降低更新表的速度， 如对表进行 INSERT、UPDATE、DELETE时，效率降低</td></tr></tbody></table><br><h2 id="索引结构"><a href="#索引结构" class="headerlink" title="索引结构"></a>索引结构</h2><p>MySQL的索引是在存储引擎层实现的，不同的存储引擎有不同的索引结构，主要包含以下几种：</p><table><thead><tr><th>索引结构</th><th>描述</th></tr></thead><tbody><tr><td>B+Tree索引</td><td>最常见的索引类型，大部分引擎都支持 B+ 树索引</td></tr><tr><td>Hash索引</td><td>底层数据结构是用哈希表实现的, 只有精确匹配索引列的查询才有效, 不支持范围查询</td></tr><tr><td>R-tree</td><td>空间索引是MyISAM引擎的一个特殊索引类型，主要用于地理空间数据类型，使用较少</td></tr><tr><td>Full-text</td><td>是一种通过建立倒排索引，快速匹配文档的方式</td></tr></tbody></table><br><p>我们平常所说的索引，如果没有特别指明，都是指B+树结构组织的索引</p><table><thead><tr><th>索引</th><th>InnoDB</th><th>MyISAM</th><th>Memory</th></tr></thead><tbody><tr><td>B+tree索引</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>Hash索引</td><td>不支持</td><td>不支持</td><td>支持</td></tr><tr><td>R-tree</td><td>不支持</td><td>支持</td><td>不支持</td></tr><tr><td>Full-text</td><td>支持</td><td>支持</td><td>不支持</td></tr></tbody></table><br><h2 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h2><p>在MySQL数据库，将索引的具体类型主要分为以下几类：主键索引、唯一索引、常规索引、全文索引</p><table><thead><tr><th>分类</th><th>含义</th><th>特点</th><th>关键字</th></tr></thead><tbody><tr><td>主键索引</td><td>针对于表中主键创建的索引</td><td>默认自动创建，只能有一个</td><td>PRIMARY</td></tr><tr><td>唯一索引</td><td>避免同一个表中某数据列中的值重复</td><td>可以有多个</td><td>UNIQUE</td></tr><tr><td>常规索引</td><td>快速定位特定数据</td><td>可以有多个</td><td></td></tr><tr><td>全文索引</td><td>全文索引查找的是文本中的关键词，而不是比较索引中的值</td><td>可以有多个</td><td>FULLTEXT</td></tr></tbody></table><br><p>在 InnoDB 存储引擎中，根据索引的存储形式，又可以分为以下两种：</p><table><thead><tr><th>分类</th><th>含义</th><th>特点</th></tr></thead><tbody><tr><td>聚集索引</td><td>将数据存储与索引放到了一块，叶子节点保存了行数据</td><td>必须有且只有一个</td></tr><tr><td>二级索引</td><td>将数据与索引分开存储，叶子节点关联的是对应的主键</td><td>可以存在多个</td></tr></tbody></table><p>聚集索引选取规则：</p><p>如果存在主键，主键索引就是聚集索引。</p><p>如果不存在主键，将使用第一个唯一（UNIQUE）索引作为聚集索引。</p><p>如果表没有主键，或没有合适的唯一索引，则 InnoDB会 自动生成一个 rowid 作为隐藏的聚集索引</p><br><p>回表查询：先到二级索引中查找数据，找到主键值，然后再到聚集索引中根据主键值，获取数据</p><br><p>以下两条SQL语句，那个执行效率高？</p><p><code>A. select * from user where id = 10 ;</code></p><p><code>B. select * from user where name = &#39;Arm&#39; ;</code></p><br><p>A 语句的执行性能要高于B 语句</p><p>因为 A 语句直接走聚集索引，直接返回数据</p><p>而 B 语句需要先查询 name 字段的二级索引， 后再查询聚集索引，也就是需要进行回表查询</p><br><h2 id="索引语法"><a href="#索引语法" class="headerlink" title="索引语法"></a>索引语法</h2><p>（1）创建索引</p><p><code>CREATE [UNIQUE | FULLTEXT] INDEX index_name ON table_name (index_col_name ...);</code></p><p>命名：idx_表名_字段名</p><br> <p>（2）查看索引</p><p><code>SHOW INDEX FROM table_name ;</code></p><br><p>（3）删除索引</p><p><code>DROP INDEX index_name ON table_name ;</code></p><br><h2 id="sql性能分析"><a href="#SQL性能分析" class="headerlink" title="SQL性能分析"></a>SQL性能分析</h2><p>查看当前数据库的 INSERT、UPDATE、DELETE、SELECT 的访问频次：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- session 是查看当前会话 ;<br>-- global 是查询全局数据 ;<br>SHOW GLOBAL STATUS LIKE &#x27;Com_______&#x27;;<br></code></pre></td></tr></table></figure><br><p>通过查询 SQL 的执行频次，我们就能够知道当前数据库到底是增删改为主，还是查询为主</p><p>假设是以查询为主，我们可以借助于慢查询日志对那些查询语句进行优化</p><br><h3 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h3><p>慢查询日志记录了所有执行时间超过指定参数的所有 SQL 语句的日志</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 查看慢查询日志是否开启<br>show variables like &#x27;slow_query_log&#x27;;<br><br><br># 如果要开启慢查询日志，需要在 MySQL 的配置文件中配置如下信息：<br># 开启MySQL慢日志查询开关<br>slow_query_log = 1;<br><br># 设置慢日志的时间为2秒，SQL语句执行时间超过2秒，就会视为慢查询，记录慢查询日志<br>long_query_time = 2;<br></code></pre></td></tr></table></figure><br><p>通过慢查询日志，就可以定位出执行效率比较低的 SQL，从而有针对性的进行优化</p><br><h3 id="profile"><a href="#profile" class="headerlink" title="profile"></a>profile</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 查看当前 MySQL 是否支持 profile 操作<br>SELECT @@have_profiling ;<br><br># 开启 profiling<br>SET profiling = 1;<br><br># 查看每一条 SQL 的耗时基本情况<br>show profiles;<br><br># 查看指定 query_id 的 SQL 语句各个阶段的耗时情况<br>show profile for query query_id;<br><br># 查看指定 query_id 的 SQL 语句 CPU 的使用情况<br>show profile cpu for query query_id;<br></code></pre></td></tr></table></figure><br><h3 id="explain"><a href="#explain" class="headerlink" title="explain"></a>explain</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 直接在 select 语句之前加上关键字 explain / desc<br>EXPLAIN SELECT 字段列表 FROM 表名 WHERE 条件 ;<br></code></pre></td></tr></table></figure><br><p>Explain 执行计划中各个字段的含义：</p><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>id</td><td>select查询的序列号</td></tr><tr><td>select_type</td><td>表示 select 的类型</td></tr><tr><td>type</td><td>表示连接类型，性能由好到差的连接类型为NULL、system、const、 eq_ref、ref、range、 index、all</td></tr><tr><td>possible_key</td><td>显示可能应用在这张表上的索引，一个或多个</td></tr><tr><td>key</td><td>实际使用的索引，如果为NULL，则没有使用索引</td></tr><tr><td>key_len</td><td>表示索引中使用的字节数， 该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下， 长度越短越好</td></tr><tr><td>rows</td><td>MySQL认为必须要执行查询的行数，是一个估计值， 可能并不总是准确的</td></tr><tr><td>filtered</td><td>表示返回结果的行数占需读取行数的百分比，值越大越好</td></tr></tbody></table><br><h2 id="索引使用"><a href="#索引使用" class="headerlink" title="索引使用"></a>索引使用</h2><p>如果索引了多列（联合索引），要遵守最左前缀法则。</p><p>最左前缀法则：查询从索引的最左列开始， 并且不跳过索引中的列。如果跳跃某一列，索引将会部分失效（后面的字段索引失效）</p><br><p>查询时，最左边的列必须存在（放置的位置不影响结果 ），否则索引全部失效</p><p>而且中间不能跳过某一列，否则该列后面的字段索引将失效</p><br><p>联合索引中，出现范围查询（ &gt;，&lt; ），范围查询右侧的列索引失效</p><p>所以尽可能的使用 &gt;&#x3D; 或 &lt;&#x3D; 这类的范围查询</p><br><p><strong>索引失效的情况：</strong></p><ul><li><p>在索引列上进行运算操作， 索引将失效</p></li><li><p>字符串类型字段使用时，不加引号，索引将失效</p></li><li><p>如果仅仅是尾部模糊匹配，索引不会失效。如果是头部模糊匹配，索引失效</p></li><li><p>用 or 分割开的条件， 如果 or 前的条件中的列有索引，而后面的列中没有索引，那么涉及的索引都不会被用到</p></li><li><p>如果 MySQL 评估使用索引比全表更慢，则不使用索引</p></li></ul><br><br><p><strong>SQL提示：</strong></p><p>（1）<code>use index</code>：建议MySQL使用哪一个索引完成此次查询</p><p>（2）<code>ignore index</code>：忽略指定的索引</p><p>（3）<code>force index</code>：强制使用索引</p><br><br><p><strong>覆盖索引：</strong></p><p>尽量使用覆盖索引，减少select *</p><p>覆盖索引是指查询使用了索引，并且需要返回的列，在该索引中已经全部能够找到 </p><br><br><p><strong>前缀索引：</strong></p><p>当字段类型为字符串时，有时候需要索引很长的字符串，这会让索引变得很大，查询时，浪费大量的磁盘 IO， 影响查询效率</p><p>此时可以只将字符串的一部分前缀，建立索引，这样可以大大节约索引空间，从而提高索引效率</p><br><p>语法：</p><p><code>create index idx_xxxx on table_name(column(n)) ;</code></p><p>eg. 为 tb_user 表的 email 字段，建立长度为 5 的前缀索引</p><p><code>create index idx_email_5 on tb_user(email(5));</code></p><br><p>前缀长度：</p><p>可以根据索引的选择性来决定，而选择性是指不重复的索引值（基数）和数据表的记录总数的比值</p><p>索引选择性越高则查询效率越高， 唯一索引的选择性是1，这是最好的索引选择性，性能也是最好的</p><br><br><p><strong>单列索引与联合索引</strong></p><p>单列索引：即一个索引只包含单个列</p><p>联合索引：即一个索引包含了多个列</p><p>在业务场景中，如果存在多个查询条件，考虑针对于查询字段建立索引时，而非单列索引</p><br><h2 id="索引设计原则"><a href="#索引设计原则" class="headerlink" title="索引设计原则"></a>索引设计原则</h2><p>（1）针对于数据量较大，且查询比较频繁的表建立索引</p><p>（2）针对于常作为查询条件、排序、分组操作的字段建立索引</p><p>（3）尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高</p><p>（4）如果是字符串类型的字段，字段的长度较长，可以针对于字段的特点，建立前缀索引</p><p>（5）尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间， 避免回表，提高查询效率</p><p>（6）要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价也就越大，会影响增删改的效率</p><p>（7）如果索引列不能存储NULL值，在创建表时使用NOT NULL约束它</p><br><h1 id="sql优化"><a href="#SQL优化" class="headerlink" title="SQL优化"></a>SQL优化</h1><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><ul><li>批量插入</li><li>手动提交事务</li><li>主键顺序插入</li></ul><br><h2 id="order-by优化"><a href="#order-by优化" class="headerlink" title="order by优化"></a>order by优化</h2><p>MySQL的排序，有两种方式： </p><p>Using filesort：通过表的索引或全表扫描，读取满足条件的数据行，然后在排序缓冲区 sort buffer 中完成排序操作，所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序</p><p>Using index：通过有序索引顺序扫描直接返回有序数据，这种情况即为 using index，不需要额外排序，操作效率高</p><p>对于以上的两种排序方式，Using index的性能高，我们在优化排序操作时，尽量要优化为 Using index</p><br><p>优化原则：</p><ul><li>根据排序字段建立合适的索引，多字段排序时，也遵循最左前缀法则</li><li>尽量使用覆盖索引</li><li>多字段排序，一个升序一个降序，此时需要注意联合索引在创建时的规则</li><li>如果不可避免的出现 filesort，大数据量排序时，可以适当增大排序缓冲区大小 sort_buffer_size</li></ul><p>PS：查看缓冲区大小 <code>show variables like &#39;sort_budder_size&#39;;</code></p><br><h2 id="group-by优化"><a href="#group-by优化" class="headerlink" title="group by优化"></a>group by优化</h2><ul><li>在分组操作时，可以通过索引来提高效率</li><li>分组操作时，索引的使用也是满足最左前缀法则的</li></ul><br><h2 id="limit优化"><a href="#limit优化" class="headerlink" title="limit优化"></a>limit优化</h2><p>在数据量比较大时，如果进行limit分页查询，在查询时，越往后，分页查询效率越低</p><p>优化思路: </p><p>一般分页查询时，通过创建覆盖索 能够比较好地提高性能，可以通过覆盖索引加子查询形式进行优化</p><br><h2 id="count优化"><a href="#count优化" class="headerlink" title="count优化"></a>count优化</h2><p>如果数据量很大，在执行count操作时，是非常耗时的</p><p>主要的优化思路：自己计数</p><br><table><thead><tr><th>count用法</th><th>含义</th></tr></thead><tbody><tr><td>count(主 键)</td><td>会遍历整张表，把每一行的主键值都取出来，返回给服务层。 服务层拿到主键后，直接按行进行累加</td></tr><tr><td>count(字 段)</td><td>没有not null 约束 : InnoDB 引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，服务层判断是否为null，不为null，计数累加。 有not null 约束：InnoDB 引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，直接按行进行累加</td></tr><tr><td>count(数 字)</td><td>InnoDB 引擎遍历整张表，但不取值。服务层对于返回的每一行，放一个数字 “1” 进去，直接按行进行累加</td></tr><tr><td>count(*)</td><td>InnoDB引擎并不会把全部字段取出来，而是专门做了优化，不取值，服务层直接按行进行累加</td></tr></tbody></table><p>按照效率排序的话，count (字段) &lt; count (主键 id) &lt; count (1) ≈ count (*)</p><br><h1 id="视图x2f存储过程x2f触发器"><a href="#视图-x2F-存储过程-x2F-触发器" class="headerlink" title="视图&#x2F;存储过程&#x2F;触发器"></a>视图&#x2F;存储过程&#x2F;触发器</h1><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p>视图（View）是一种虚拟存在的表。</p><p>视图中的数据并不在数据库中实际存在，行和列数据来自定义视图的查询中使用的表，并且是在使用视图时动态生成的</p><br><p><strong>语法：</strong></p><p>（1）创建</p><p><code>CREATE [OR REPLACE] VIEW 视图名称[(列名列表)] AS SELECT语句 [ WITH [ CASCADED | LOCAL ] CHECK OPTION ] ;</code></p><p>（2）查询</p><p>查看创建视图语句：<code>SHOW CREATE VIEW 视图名称; </code></p><p>查看视图数据：<code>SELECT * FROM 视图名称 ... ;</code></p><p>（3）修改</p><p><code>CREATE [OR REPLACE] VIEW 视图名称[(列名列表)] AS SELECT语句 [ WITH [ CASCADED | LOCAL ] CHECK OPTION ] ;</code></p><br><p><code>ALTER VIEW 视图名称[(列名列表)] AS SELECT语句 [ WITH [ CASCADED | LOCAL ] CHECK OPTION ] ;</code></p><p>（4）删除</p><p><code>DROP VIEW [ IF EXISTS ] 视图名称 [ 视图名称 ] ... ;</code></p><br><br><p><strong>检查选项：</strong></p><p>当使用 WITH CHECK OPTION 子句创建视图时，MySQL 会通过视图检查正在更改的每个行</p><p>例如 插入，更新，删除，以使其符合视图的定义</p><p> MySQL 允许基于另一个视图创建视图，它还会检查依赖视图中的规则以保持一致性。</p><p>为了确定检查的范围，mysql 提供了两个选项： CASCADED 和 LOCAL ，默认值为 CASCADED </p><br><p>（1）CASCADED 级联</p><p>比如，v2 视图是基于 v1 视图的</p><p>如果在 v2 视图创建的时候指定了检查选项为 cascaded，但是 v1视图创建时未指定检查选项</p><p>则在执行检查时，不仅会检查 v2，还会级联检查 v2 的关联视图 v1</p><br><p>（2）LOCAL 本地</p><p>比如，v2 视图是基于 v1 视图的</p><p>如果在 v2 视图创建的时候指定了检查选项为 local ，但是 v1 视图创建时未指定检查选项</p><p>则在执行检查时，只会检查 v2，不会检查 v2 的关联视图 v1</p><br><br><p><strong>视图的更新：</strong></p><p>如果视图包含以下任何一项，则该视图不可更新：</p><ul><li>聚合函数或窗口函数（ SUM()、 MIN()、 MAX()、 COUNT() 等 ）</li><li>DISTINCT</li><li>GROUP BY</li><li>HAVING</li><li>UNION 或者 UNION ALL</li></ul><br><br><p><strong>视图作用：</strong></p><p>（1）简单</p><p>视图不仅可以简化用户对数据的理解，也可以简化他们的操作。</p><p>那些被经常使用的查询可以被定义为视 图，从而使得用户不必为以后的操作每次指定全部的条件</p><p>（2）安全</p><p>数据库可以授权，但不能授权到数据库特定行和特定的列上。通过视图用户只能查询和修改他们所能见到的数据</p><p>（3）数据独立</p><p>视图可帮助用户屏蔽真实表结构变化带来的影响</p><br><h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><p>存储过程是事先经过编译并存储在数据库中的一段 SQL 语句的集合，调用存储过程可以简化应用开发人员的很多工作，减少数据在数据库和应用服务器之间的传输，对于提高数据处理的效率是有好处的</p><p>存储过程思想上很简单，就是数据库 SQL 语言层面的代码封装与重用</p><br><p><strong>语法：</strong></p><p>（1）创建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE PROCEDURE 存储过程名称 ([ 参数列表 ])<br>BEGIN<br>-- SQL语句<br>END ;<br></code></pre></td></tr></table></figure><p>（2）调用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CALL 名称 ([ 参数 ]);<br></code></pre></td></tr></table></figure><p>（3）查看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 查询指定数据库的存储过程及状态信息<br>SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_SCHEMA = &#x27;xxx&#x27; ;<br><br>-- 查询某个存储过程的定义<br>SHOW CREATE PROCEDURE 存储过程名称 ;<br></code></pre></td></tr></table></figure><p>（4）删除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DROP PROCEDURE [ IF EXISTS ] 存储过程名称 ;<br></code></pre></td></tr></table></figure><p>PS：在命令行中，执行创建存储过程的 SQL 时，需要通过关键字 delimiter 指定 SQL 语句的 结束符</p><p><code>delimiter $$</code> ——指定 $$ 为结束符（记得换回来）</p><br><br><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>在 MySQL 中变量分为三种类型: 系统变量、用户定义变量、局部变量</p><br><p><strong>系统变量：</strong></p><p>不是用户定义的，属于服务器层面。分为全局变量（GLOBAL）、会话变量（SESSION）</p><p>（1）查看系统变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 查看所有系统变量<br>SHOW [ SESSION | GLOBAL ] VARIABLES ;<br><br>-- 可以通过LIKE模糊匹配方式查找变量<br>SHOW [ SESSION | GLOBAL ] VARIABLES LIKE &#x27;......&#x27;;<br><br>-- 查看指定变量的值<br>SELECT @@[SESSION | GLOBAL] 系统变量名;<br></code></pre></td></tr></table></figure><p>（2）设置系统变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SET [ SESSION | GLOBAL ] 系统变量名 = 值 ;<br>SET @@[SESSION | GLOBAL]系统变量名 = 值 ;<br></code></pre></td></tr></table></figure><br><br><p><strong>用户自定义变量：</strong></p><p>用户定义变量 是用户根据需要自己定义的变量</p><p>用户变量不用提前声明，在用的时候直接用 “@变量名” 使用就可以。其作用域为当前连接</p><br><p>（1）赋值</p><p>方式一：</p><p><code>SET @var_name = expr [, @var_name = expr] ... ;</code></p><p><code>SET @var_name := expr [, @var_name := expr] ... ;</code></p><p>方式二：</p><p><code>SELECT @var_name := expr [, @var_name := expr] ... ;</code></p><br><p>（2）使用</p><p><code>select @var_name ;</code></p><p>用户定义的变量无需对其进行声明或初始化，只不过获取到的值为NULL</p><br><br><p><strong>局部变量：</strong></p><p>局部变量是根据需要定义的在局部生效的变量</p><p>访问之前，需要 DECLARE 声明。可用作存储过程内的局部变量和输入参数，范围是在其内声明的BEGIN … END块</p><br><p>（1）声明</p><p><code>DECLARE 变量名 变量类型 [DEFAULT ... ] ;</code></p><br><p>（2）赋值</p><p><code>SET 变量名 = 值 ;</code></p><p><code>SET 变量名 := 值 ;</code></p><p><code>SELECT 字段名 INTO 变量名 FROM 表名 ... ;</code></p><br><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>参数的类型，主要分为以下三种：IN、OUT、INOUT。 具体的含义如下</p><table><thead><tr><th>类型</th><th>含义</th></tr></thead><tbody><tr><td>IN</td><td>该类参数作为输入，也就是需要调用时传入值（默认）</td></tr><tr><td>OUT</td><td>该类参数作为输出，也就是该参数可以作为返回值</td></tr><tr><td>INOUT</td><td>既可以作为输入参数，也可以作为输出参数</td></tr></tbody></table><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE PROCEDURE 存储过程名称 ([ IN/OUT/INOUT 参数名 参数类型 ])<br>BEGIN<br>-- SQL语句<br>END ;<br></code></pre></td></tr></table></figure><br><h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><p><strong>if</strong></p><p>if 用于做条件判断，语法结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">IF 条件1 THEN<br>.....<br>ELSEIF 条件2 THEN -- 可选<br>.....<br>ELSE -- 可选<br>.....<br>END IF;<br></code></pre></td></tr></table></figure><p>在if条件判断的结构中，ELSE IF 结构 和 ELSE 结构可以有多个，也可以没有</p><br><br><p><strong>case</strong></p><p>语法一：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CASE case_value<br>WHEN when_value1 THEN statement_list1<br>[ WHEN when_value2 THEN statement_list2] ...<br>[ ELSE statement_list ]<br>END CASE;<br></code></pre></td></tr></table></figure><p>语法二：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CASE<br>WHEN search_condition1 THEN statement_list1<br>[WHEN search_condition2 THEN statement_list2] ...<br>[ELSE statement_list]<br>END CASE;<br></code></pre></td></tr></table></figure><br><br><p><strong>while</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">WHILE 条件 DO<br>SQL逻辑...<br>END WHILE;<br></code></pre></td></tr></table></figure><br><br><p><strong>repeat</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">REPEAT<br>SQL逻辑...<br>UNTIL 条件<br>END REPEAT;<br></code></pre></td></tr></table></figure><p><br><br></p><p><strong>loop</strong></p><ul><li>LEAVE ：配合循环使用，退出循环</li><li>ITERATE：必须用在循环中，作用是跳过当前循环剩下的语句，直接进入下一次循环</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">[begin_label:] LOOP<br>SQL逻辑...<br>END LOOP [end_label];<br></code></pre></td></tr></table></figure><br><h3 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h3><p>游标（CURSOR）是用来存储查询结果集的数据类型 , 在存储过程和函数中可以使用游标对结果集进行循环的处理</p><br><p>（1）声明游标</p><p><code>DECLARE 游标名称 CURSOR FOR 查询语句 ;</code></p><br><p>（2）打开游标</p><p><code>OPEN 游标名称 ;</code></p><br><p>（3）获取游标记录</p><p><code>FETCH 游标名称 INTO 变量 [ 变量 ] ;</code></p><br><p>（4）关闭游标</p><p><code>CLOSE 游标名称 ;</code></p><br><p>eg . 根据传入的参数 uage，来查询用户表 tb_user 中，所有的用户年龄小于等于 uage 的用户姓名（name）和专业（profession），并将用户的姓名和专业插入到所创建的一张新表 （id, name, profession）中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create procedure p11(in uage int)<br>begin<br>    # 普通变量声明要先于游标声明<br>    declare uname varchar(100);<br>    declare upro varchar(100);<br>    <br>    declare u_cursor cursor for select name, profession<br>                                from tb_user<br>                                where age &lt;=<br>                                      uage;<br>    <br>    drop table if exists tb_user_pro;<br>    create table if not exists tb_user_pro (<br>        id         int primary key auto_increment,<br>        name       varchar(100),<br>        profession varchar(100)<br>    );<br>    <br>    # 开启游标<br>    open u_cursor;<br>    while true<br>        do<br>        # 获取数据<br>            fetch u_cursor into uname,upro;<br>            # 插入新表<br>            insert into tb_user_pro values (null, uname, upro);<br>        end while;<br>    close u_cursor;# 关闭游标<br>end;<br>call p11(30);<br></code></pre></td></tr></table></figure><br><h2 id="存储函数"><a href="#存储函数" class="headerlink" title="存储函数"></a>存储函数</h2><p>存储函数是有返回值的存储过程，存储函数的参数只能是 IN 类型的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE FUNCTION 存储函数名称 ([ 参数列表 ])<br>RETURNS type [characteristic ...]<br>BEGIN<br>-- SQL语句<br>RETURN ...;<br>END ;<br></code></pre></td></tr></table></figure><p>characteristic说明：</p><ul><li>DETERMINISTIC：相同的输入参数总是产生相同的结果</li><li>NO SQL ：不包含 SQL 语句</li><li>READS SQL DATA：包含读取数据的语句，但不包含写入数据的语句</li></ul><p><strong>使用了存储函数的功能实际上都可以用存储过程来代替</strong></p><br><h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h2><p>触发器是与表有关的数据库对象</p><p>指在 insert &#x2F; update &#x2F; delete 之前（BEFORE）或之后（AFTER），触发并执行触发器中定义的SQL语句集合</p><p>触发器的这种特性可以协助应用在数据库端确保数据的完整性，日志记录，数据校验等操作</p><br><table><thead><tr><th>触发器类型</th><th>NEW 和 OLD</th></tr></thead><tbody><tr><td>INSERT 型触发器</td><td>NEW 表示将要或者已经新增的数据</td></tr><tr><td>UPDATE 型触发器</td><td>OLD 表示修改之前的数据 , NEW 表示将要或已经修改后的数据</td></tr><tr><td>DELETE 型触发器</td><td>OLD 表示将要或者已经删除的数据</td></tr></tbody></table><br><p>（1）创建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TRIGGER trigger_name<br>BEFORE/AFTER INSERT/UPDATE/DELETE<br>ON tbl_name FOR EACH ROW -- 行级触发器<br>BEGIN<br>trigger_stmt ;<br>END;<br></code></pre></td></tr></table></figure><p>（2）查看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SHOW TRIGGERS ;<br></code></pre></td></tr></table></figure><p>（3）删除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 如果没有指定 schema_name，默认为当前数据库<br>DROP TRIGGER [ schema_name ]trigger_name ; <br></code></pre></td></tr></table></figure></font>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【笔记】Linux</title>
      <link href="/post/e511c25d.html"/>
      <url>/post/e511c25d.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-网络连接三种模式"><a href="#1-网络连接三种模式" class="headerlink" title="1 网络连接三种模式"></a>1 网络连接三种模式</h1><ul><li>桥接模式</li></ul><p>虚拟主机的 ip 和本地主机 ip 可以互相访问，虚拟机也可以访问互联网，虚拟机相当于互联网中的一台主机，在桥接模式下，虚拟机 ip 地址需要与主机在同一个网段，如果需要联网，则网关与 DNS 需要与主机网卡一致</p><p>虚拟系统可以和外部系统相互通讯，但是容易造成 IP 冲突</p> <br><ul><li>NAP模式</li></ul><p>虚拟机可以访问互联网和本地（物理）主机，但本地主机不可以访问虚拟机。</p><p>网络地址转换模式。虚拟系统可以和外部（间接）联系，不会造成 IP 冲突</p> <br><ul><li>主机模式</li></ul><p>独立系统，不与外部发生联系</p><p>虚拟机不可以访问本地主机互联网，发现虚拟机和本地（物理）主机网络是隔离的</p><br><h1 id="2-linux目录结构"><a href="#2-Linux目录结构" class="headerlink" title="2 Linux目录结构"></a>2 Linux目录结构</h1><p>linux 的文件系统是采用级层式的树状目录结构，在此结构的最上层是根目录 “&#x2F;“，然后再此目录下创建其他的目录</p><p><strong>可以说，Linux 中的一切都是文件，具体的目录结构有：</strong></p><ul><li>&#x2F;bin</li></ul><p>是 Binary 的缩写，这个目录存放着最经常使用的命令</p><ul><li>&#x2F;sbin</li></ul><p>s就是 Super User 的意思，这里存放的是系统管理员使用的系统管理程序</p><ul><li>&#x2F;home</li></ul><p>存放普通用户的主目录，在 Linux 中每个用户都有一个自己的目录，一般该目录名是以用户的账号命名</p><ul><li>&#x2F;root</li></ul><p>该目录为系统管理员，也称作超级权限者的用户主目录</p><ul><li>&#x2F;etc</li></ul><p>所有的系统管理所需要的配置文件和子目录</p><ul><li>&#x2F;usr</li></ul><p>这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似与 windows 下的 program files 目录</p><ul><li>&#x2F;boot</li></ul><p>存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件</p><ul><li>&#x2F;proc</li></ul><p>这个目录是一个虛拟的目录，它是系统内存的映射，访问这个目录来获取系统信息</p><ul><li>&#x2F;srv</li></ul><p>service 缩写，该目录存放一些服务启动之后需要提取的数据</p><ul><li>&#x2F;sys</li></ul><p>这是 linux2.6 内核的一个很大的变化，该目录下安装了2.6内核中新出现的一个文件系统 sysfs</p><ul><li>&#x2F;tmp</li></ul><p>这个目录是用来存放一些临时文件的</p><ul><li>&#x2F; dev</li></ul><p>类似于 windows 的设备管理器，把所有的硬件用文件的形式存储</p><ul><li>&#x2F;media</li></ul><p>linux 系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux 会把识别的设备挂载到这个目录下</p><ul><li>&#x2F;mnt</li></ul><p>系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将外部的存储挂载在 &#x2F;mnt&#x2F; 上，然后进入该目录就可以查看里的内容了</p><ul><li>&#x2F;opt</li></ul><p>这是给主机额外安装软件所摆放的目录，如安装 ORACLE 数据库就可放到该目录下。默认为空</p><ul><li>&#x2F;lib</li></ul><p>系统开机所需要最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要用到这些共享库</p><ul><li>&#x2F;lost + found</li></ul><p>这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件</p><ul><li>&#x2F;usr&#x2F;local</li></ul><p>这是另一个给主机额外安装软件所安装的目录。一般是通过编译源码方式安装的程序</p><ul><li>&#x2F;var</li></ul><p>这个目录中存放着在不断扩充着的东西，习惯将经常被修改的目录放在这个目录下。包括各种日志文件<br><br></p><h1 id="3-vim-x2f-vi"><a href="#3-vim-x2F-vi" class="headerlink" title="3 vim &#x2F; vi"></a>3 vim &#x2F; vi</h1><p>Linux 系统会内置 vi 文本编辑器<br>Vim 具有程序编辑的能力，可以看做是 Vi 的增强版本，可以主动的以字体颜色辨别语法的正确性，方便程序设计。代码补全、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用</p><br><h3 id="常用的三种模式"><a href="#常用的三种模式" class="headerlink" title="常用的三种模式"></a>常用的三种模式</h3><ol><li>正常模式</li></ol><p>以 vim 打开一个档案就直接进入一般模式（默认模式）。在这个模式中，可以使用 [上下左右] 按键来移动光标，可以使用 [删除字符] 或 [删除整行] 来处理档案内容，也可以使用复制、粘贴来处理文件数据</p><ol start="2"><li>插入模式</li></ol><p>按下 i，I，o，O，a，A，r，R 等任何一个字母之后才会进入编辑模式，一般来说按 i 即可</p><ol start="3"><li>命令行模式</li></ol><p>先 esc 再输入 : 就进入命令行模式。在这个模式当中，可以提供你相关指令。完成读取、存盘、替换、离开 vim、显示行号等的动作则是在此模式中达成的</p><br><p>命令行模式下的常用指令有</p><p>:wq         – 保存并退出</p><p>:q            – 退出</p><p>:q!           – 强制退出不保存</p><br><table><thead><tr><th>常用的快捷键</th></tr></thead><tbody><tr><td>1.  拷贝当前行 yy，拷贝当前行向下的5行 5yy，并粘贴（输入 p ）</td></tr><tr><td>2.  删除当前行 dd，删除当前行向下的5行 5dd</td></tr><tr><td>3.  在文件中查找某个单词 [命令行模式下  &#x2F;  关键字，回车查找，输入 n 就是查找下一个]</td></tr><tr><td>4.  设置文件的行号，取消文件的行号 [命令行模式下  :et  nu  和  :set  nonu]</td></tr><tr><td>5.  编辑 &#x2F;etc&#x2F;profile 文件，使用快捷键到该文档的最末行 [G] 和最首行 [gg]</td></tr><tr><td>6.  在一个文件中输入 “hello” 然后又撤销这个动作[u]</td></tr></tbody></table><br><h1 id="4-基本指令"><a href="#4-基本指令" class="headerlink" title="4 基本指令"></a>4 基本指令</h1><h2 id="41-关机-amp-重启"><a href="#4-1-关机-amp-重启" class="headerlink" title="4.1 关机 &amp; 重启"></a>4.1 关机 &amp; 重启</h2><p>shutdown  -h  now           立即关机</p><p>shutdown  -h  1                 一分钟后关机</p><p>shutdown  -r  now            立即重启</p><p>halt                 关机</p><p>reboot            重启</p><p>sync                把内存的数据同步到磁盘</p><br><p>PS：</p><ol><li>不管是重启系统还是关闭系统，首先要运行 sync 命令，把内存中的数据写到磁盘中</li><li>目前的 shutdown  &#x2F;  reboot  &#x2F;  halt 等命令均已经在关机前进行了 sync，但建议谨慎</li></ol><br><h2 id="42-切换用户"><a href="#4-2-切换用户" class="headerlink" title="4.2 切换用户"></a>4.2 切换用户</h2><ul><li>登录时尽量少用 root 帐号登录，因为它是系统管理员，有最大的权限，避免操作失误</li><li>可以利用普通用户登录，登录后再用 “su  -  用户名” 命令来切换成系统管理员身份</li><li>输入 logout 即可注销用户</li></ul><br><ul><li>logout 注销指令在 图形运行级别 无效，在 运行级别3 下才有效</li></ul><p>如果以普通用户 tom 登陆，再切换为 root。此时 logout 会切换为 tom，再次 logout 则直接登出</p><br><h2 id="43-管理用户"><a href="#4-3-管理用户" class="headerlink" title="4.3 管理用户"></a>4.3 管理用户</h2><p>Linux 系统是一个多用户多任务的操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统。</p><br><h3 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h3><p>基本语法：useradd   用户名<br>PS：</p><ul><li>当创建用户成功后，会自动的创建和用户同名的家目录</li><li>也可以通过 useradd  -d 指定目录新的用户名，给新创建的用户指定家目录</li></ul><p>eg.  在创建家目录时直接指定家目录useradd   -d   &#x2F;home&#x2F;test   king</p><br><h3 id="指定-x2f-修改密码"><a href="#指定-x2F-修改密码" class="headerlink" title="指定 &#x2F; 修改密码"></a>指定 &#x2F; 修改密码</h3><p>基本语法：passwd   用户名</p><br><h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><p>基本语法：userdel   用户名</p><ul><li><p>删除用户 milan，但是保留家目录            userdel  milan</p></li><li><p>删除用户及其家目录                                   userdel  -r  milan</p></li></ul><p>PS：一般情况下家目录都不删，慎重删除</p><br><h3 id="查询用户信息"><a href="#查询用户信息" class="headerlink" title="查询用户信息"></a>查询用户信息</h3><p>基本语法：id   用户名</p><br><br><h3 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h3><p>基本语法：su   -   切换用户名</p><p>在操作 Linux 中，如果当前用户的权限不够，可以通过 su  -  指令，切换到高权限用户，比如 root</p><p>PS：</p><ul><li>从权限高的用户切换到权限低的用户，不需要输入密码，反之需要</li><li>当需要返回到原来用户时，使用 exit &#x2F; logout 指令</li></ul><br><h3 id="查看当前用户"><a href="#查看当前用户" class="headerlink" title="查看当前用户"></a>查看当前用户</h3><p>基本语法：whoami</p><br><h2 id="44-管理用户组"><a href="#4-4-管理用户组" class="headerlink" title="4.4 管理用户组"></a>4.4 管理用户组</h2><p>类似于角色，系统可以对有共性的多个用户进行统一的管理</p><ul><li><p>新增组           groupadd   组名</p></li><li><p>删除组           groupdel     组名</p></li><li><p>增加用户时直接加上组                 useradd   -g   用户组   用户名</p></li></ul><p>当添加一个用户但是没有指定他的组时，会默认的创建一个与它同名的组，将该用户添加到这个组内</p><br><p>也可以在添加用户时直接指定组</p><p>eg. 增加一个用户 zwj，直接将他指定到 wudang</p><ol><li>groupadd   wudang</li><li>useradd   -g   wudang   zwj</li></ol><br><p>修改用户的组</p><p>基本语法：usermod   -g   [新组名]   [用户名]</p><p>eg.  把 zwh 再转移到 mojiao中</p><ol><li>groupadd   mojiao</li><li>usermod   -g   mojiao   zwj</li></ol><br><p>用户组的相关文件</p><p>（1）&#x2F;etc&#x2F;passwd 文件</p><p>用户（user）的配置文件，记录用户的各种信息</p><p>每行的含义</p><p>用户名：口令：用户标识号：组标识号：注释性描述：主目录：登录Shell</p><br><p>（2）&#x2F;etc&#x2F;shadow 文件</p><p>口令的配置文件</p><p>每行的含义</p><p>登录名：加密口令：最后一次修改时间：最小时间间隔：最大时间间隔：警告时间：不活动时间：失效时间：标志</p><br><p>（3）&#x2F;etc&#x2F;group 文件</p><p>组（group）的配置文件，记录 Linux 包含的组的信息</p><p>每行含义</p><p>组名：口令：组标识号：组内用户列表</p><br><h1 id="5-实用指令"><a href="#5-实用指令" class="headerlink" title="5 实用指令"></a>5 实用指令</h1><h2 id="51-找回root密码"><a href="#5-1-找回root密码" class="headerlink" title="5.1 找回root密码"></a>5.1 找回root密码</h2><p>如何找回root密码？ </p><p>（1）首先，启动系统，进入开机界面，在界面中按 ‘e’ 进入编辑界面（要快</p><p>（2）进入编辑界面，使用键盘上的上下键把光标往下移动，找到以 “linux16” 开头内容所在的行数，在行的最后输入：init&#x3D;&#x2F;bin&#x2F;sh</p><p>（3）输入完成后直接快捷键 ctrl+x，进入单用户模式</p><p>（4）接着在光标闪烁的位置输入：mount   -o   remount,rw&#x2F;  再按回车确定</p><p>（5）在新的一行后面输入：passwd，完成后回车，输入密码后再次确认密码即可，修改密码后，会出现passwd… 的格式，则说明密码修改成功</p><p>（6）再在鼠标闪烁的位置输入：exec   &#x2F;sbin&#x2F;init 完成后按回车等待系统修改密码（时间较长），接着系统重启新密码生效</p><br><h2 id="52-帮助指令"><a href="#5-2-帮助指令" class="headerlink" title="5.2 帮助指令"></a>5.2 帮助指令</h2><h3 id="man-获得帮助信息"><a href="#man-–-获得帮助信息" class="headerlink" title="man – 获得帮助信息"></a>man – 获得帮助信息</h3><p>基本语法：man   [命令或者配置文件]</p><p>按小写 q 退出</p><p>eg.  查看 ls 命令的帮助信息                 man   ls</p><p>ls 的常用选项：</p><p>-a    列出所有文件，包括以 ‘.’ 开头的隐含文件</p><p>-l    表示单列输出</p><ul><li><p>各选项可以混合使用，没有顺序要求      ls   -a   -l 表示单列显示所有文件</p></li><li><p>也可以指定要操作的目录                         ls   &#x2F;root   -a   -l</p></li></ul> <br><h3 id="help-获得shell内置命令的帮助信息"><a href="#help-–-获得shell内置命令的帮助信息" class="headerlink" title="help – 获得shell内置命令的帮助信息"></a>help – 获得shell内置命令的帮助信息</h3><p>基本语法：help  [命令]</p><p>eg.  查询 cd 命令的帮助信息               help   cd</p><br><h2 id="53-文件目录"><a href="#5-3-文件目录" class="headerlink" title="5.3 文件目录"></a>5.3 文件目录</h2><h3 id="pwd-指令-显示当前工作目录的绝对路径"><a href="#pwd-指令-–-显示当前工作目录的绝对路径" class="headerlink" title="pwd 指令 – 显示当前工作目录的绝对路径"></a>pwd 指令 – 显示当前工作目录的绝对路径</h3><br><br><h3 id="cd-指令-切换到指定的目录下"><a href="#cd-指令-–-切换到指定的目录下" class="headerlink" title="cd 指令 – 切换到指定的目录下"></a>cd 指令 – 切换到指定的目录下</h3><p>cd  ~ 或者 cd     回到当前登录用户的家目录</p><p>cd  ..                   回到当前目录的上一级</p> <br> <br><h3 id="mkdir-创建目录"><a href="#mkdir-–-创建目录" class="headerlink" title="mkdir – 创建目录"></a>mkdir – 创建目录</h3><p>基本语法：mkdir   [选项]</p><p>-p    表示创建多级目录</p><p>eg.</p><ol><li>创建一个目录     mkdir   &#x2F;home&#x2F;tiger</li><li>创建多级目录     mkdir   -p   &#x2F;home&#x2F;animal&#x2F;tiger</li></ol><br><br><h3 id="rmdir-删除空目录"><a href="#rmdir-–-删除空目录" class="headerlink" title="rmdir – 删除空目录"></a>rmdir – 删除空目录</h3><p>基本语法：rmdir   [选项]</p><p>PS:</p><ol><li>rmdir 删除的是空目录，如果目录下有内容是不可删除</li><li>如果想要删除非空目录，则需要使用 rm  -rf 删除 (谨慎</li></ol><p>eg.  删除一个目录               rmdir   &#x2F;home&#x2F;dog</p> <br> <br><h3 id="touch-创建一个空文件"><a href="#touch-–-创建一个空文件" class="headerlink" title="touch – 创建一个空文件"></a>touch – 创建一个空文件</h3><p>基本语法：touch   [文件名称]</p><p>eg.  在 &#x2F;home 目录下，创建一个空文件 hello.txt                touch   &#x2F;home   hello.txt</p> <br><br><h3 id="cp-拷贝文件到指定的目录下"><a href="#cp-–-拷贝文件到指定的目录下" class="headerlink" title="cp – 拷贝文件到指定的目录下"></a>cp – 拷贝文件到指定的目录下</h3><p>基本语法：cp   [选项]   source   dest</p><p>常用选项：</p><p>-r    递归复制整个文件夹</p><p>eg.</p><ol><li><p>将 &#x2F;home&#x2F;hello.txt 拷贝到 &#x2F;home&#x2F;bbb 目录下</p><ul><li>cp   &#x2F;home&#x2F;hello.txt   &#x2F;home&#x2F;bbb</li></ul></li><li><p>将 &#x2F;home&#x2F;bbb 整个文件夹拷贝到 &#x2F;opt</p><ul><li>cp   -r   &#x2F;home&#x2F;bbb   &#x2F;opt</li></ul></li></ol><p>PS：强制覆盖不提醒 \cp   -r   &#x2F;home&#x2F;bbb   &#x2F;opt</p><br> <br><h3 id="rm-移除文件或者目录"><a href="#rm-–-移除文件或者目录" class="headerlink" title="rm – 移除文件或者目录"></a>rm – 移除文件或者目录</h3><p>基本语法：rm   [选项]</p><p>常用选项：</p><p>-r    递归删除整个文件夹</p><p>-f    强制删除不提示</p> <br> <br><h3 id="mv-移动文件与目录或者重命名"><a href="#mv-–-移动文件与目录或者重命名" class="headerlink" title="mv –  移动文件与目录或者重命名"></a>mv –  移动文件与目录或者重命名</h3><p>基本语法：</p><ul><li>mv   [文件或目录]   [文件或目录]               移动文件</li><li>mv   oldNameFile   newNameFile            重命名</li></ul> <br> <br><h3 id="cat-查看文件内容"><a href="#cat-–-查看文件内容" class="headerlink" title="cat – 查看文件内容"></a>cat – 查看文件内容</h3><p>基本语法：cat   [选项]   要查看的文件</p><p>常用选项：</p><p>-n    显示行号</p><p>eg.  查看 hello.txt 并显示行号              cat   -n   hello.txt</p><p>PS：cat 只能浏览文件并不能修改，为了方便一般会带上管道命令  |  more</p><p>（管道命令：将处理的结果交给下一个命令，即一种组合使用）</p> <br> <br><h3 id="more-以全屏的方式按页显示文本的内容"><a href="#more-–-以全屏的方式按页显示文本的内容" class="headerlink" title="more – 以全屏的方式按页显示文本的内容"></a>more – 以全屏的方式按页显示文本的内容</h3><p>是一个基于 VI 编辑器 的文本过滤器，内置了若干的快捷键</p><table><thead><tr><th>操作</th><th>功能</th></tr></thead><tbody><tr><td>空格</td><td>向下翻一页</td></tr><tr><td>Enter</td><td>向下翻一行</td></tr><tr><td>q</td><td>离开，不再显示内容</td></tr><tr><td>Ctrl + F</td><td>向下滚动一屏</td></tr><tr><td>Ctrl + B</td><td>返回上一屏</td></tr><tr><td>&#x3D;</td><td>输出当前行的行号</td></tr><tr><td>:f</td><td>输出文件名和当前行的行号</td></tr></tbody></table><br><br><h3 id="less-分屏查看文件内容"><a href="#less-–-分屏查看文件内容" class="headerlink" title="less – 分屏查看文件内容"></a>less – 分屏查看文件内容</h3><p>它的功能与 more 指令类似，但是比 more 指令更加强大，支持各种显示终端</p><p>less 指令在显示文件内容时，并不是一次将整个文件加载之后才显示，而是根据显示需要加载内容，对于显示大型文件具有较高的效率。</p><p>基本语法：less   [要查看的文件]</p><table><thead><tr><th>操作</th><th>功能</th></tr></thead><tbody><tr><td>空格</td><td>向下翻动一页</td></tr><tr><td>[pagedown]</td><td>向下翻动一页</td></tr><tr><td>[pageup]</td><td>向上翻动一页</td></tr><tr><td>&#x2F;  字串</td><td>向下搜寻[字串]     n  -  向下查找  N  -  向上查找</td></tr><tr><td>?  字串</td><td>向下搜寻[字串]     n  -  向上查找  N  -  向下查找</td></tr><tr><td>q</td><td>离开less这个程序</td></tr></tbody></table><br><br><h3 id="echo-输出内容到控制台"><a href="#echo-–-输出内容到控制台" class="headerlink" title="echo – 输出内容到控制台"></a>echo – 输出内容到控制台</h3><p>基本：echo   [选项]   [输出内容]</p><p>$PATH                     环境变量</p><p>$POSTNAME          主机名</p><p>…</p><p>eg.</p><ol><li>使用 echo 指令输出环境变量                   echo $PATH</li><li>使用 echo 指令输出 hello,world!             echo “hello,world!”</li></ol> <br> <br><h3 id="head-显示文件的开头部分"><a href="#head-–-显示文件的开头部分" class="headerlink" title="head – 显示文件的开头部分"></a>head – 显示文件的开头部分</h3><p>默认情况下 head 指令显示文件的前10 行内容</p><p>基本语法：</p><p>head   [文件]</p><p>head   -n   x   [文件]        表示显示文件前 x 行，x可以是任何的数字</p> <br> <br><h3 id="tail-显示文件的末尾部分"><a href="#tail-–-显示文件的末尾部分" class="headerlink" title="tail – 显示文件的末尾部分"></a>tail – 显示文件的末尾部分</h3><p>默认情况下 tail 指令显示文件的最后10 行内容</p><p>基本语法：</p><p>tail  [文件]</p><p>tail   -n   x   [文件]        表示显示文件最后x行，x可以是任何的数字</p><p>tail   -f   [文件]              表示实时追踪该文档的所有更新</p> <br> <br><h3 id="gt和-gtgt-输出重定向和追加"><a href="#gt-和-gt-gt-–-输出重定向和追加" class="headerlink" title="&gt;和 &gt;&gt;   – 输出重定向和追加"></a>&gt;和 &gt;&gt;   – 输出重定向和追加</h3><p>基本语法：</p><p>Is   -l   &gt;   文件                         列表的内容写入文件a.txt中(覆盖写)</p><p>ls   -al   &gt;&gt;   文件                     列表的内容追加到文件aa.txt的末尾</p><p>cat   文件1   &gt;   文件2             将文件1的内容覆盖到文件2</p><p>echo   “内容”   &gt;&gt;   文件         将字符串内容追加到指定文件中</p><p>eg.</p><ol><li><p>将 &#x2F;home 目录下的文件列表写入到 &#x2F;home&#x2F;info.txt 中，覆盖写入</p><ul><li>ls   -l   &#x2F;home   &gt;   &#x2F;home&#x2F;info.txt[若无info.txt，则会创建]</li></ul></li><li><p>将当前日历信息追加到 &#x2F;home&#x2F;mycal 文件中</p><ul><li>cal   &gt;&gt;   &#x2F;home&#x2F;mycal （cal – 显示当前日历信息）</li></ul></li></ol> <br> <br><h3 id="ln-软链接"><a href="#ln-–-软链接" class="headerlink" title="ln   –  软链接"></a>ln   –  软链接</h3><p>也称为符号链接，类似于 windows 里的快捷方式，主要存放了连接其他文件的路径</p><p>基本语法：ln   -s   [原文件或目录]   [软连接名]               给原文件创建了一个软链接</p><p>eg.</p><ol><li>在 &#x2F;home目录下创建一个软连接 myroot，连接到 &#x2F;root<ul><li>ln   -s   &#x2F;root &#x2F;home&#x2F;myroot</li></ul></li><li>删除软连接 myroot <ul><li>rm   &#x2F;home&#x2F;myroot</li></ul></li></ol><p>PS：当我们使用 pwd 指令查看目录时，仍然看到的是软链接所在目录</p> <br> <br><h3 id="history-查看已经执行过的历史命令"><a href="#history-–-查看已经执行过的历史命令" class="headerlink" title="history – 查看已经执行过的历史命令"></a>history – 查看已经执行过的历史命令</h3><p>也可以执行历史命令</p><p>基本语法：history</p><p>eg.</p><ol><li>显示所有的历史命令                     history</li><li>显示最近使用过的10 个指令        history 10</li><li>执行历史编号为5的指令                !5</li></ol><br><h2 id="54-时间日期"><a href="#5-4-时间日期" class="headerlink" title="5.4 时间日期"></a>5.4 时间日期</h2><h3 id="date-显示当前的日期"><a href="#date-–-显示当前的日期" class="headerlink" title="date – 显示当前的日期"></a>date – 显示当前的日期</h3><p>基本语法：</p><p>date                  显示当前时间</p><p>date  +%Y        显示当前年份</p><p>date  +%m       显示当前月份</p><p>date  +%d        显示当前是哪一天</p><p>date  “+%Y-%m-%d  %H:%M:%S”             显示年月日时分秒</p> <br> <br><h3 id="date-设置日期"><a href="#date-–-设置日期" class="headerlink" title="date – 设置日期"></a>date – 设置日期</h3><p>基本语法：date   -s   字符串表示的时间</p><p>eg.  将系统的当前时间设置为 2020-11-03  20:02:10            date   -s   “2020-11-03   20:02:10”</p> <br><br><h3 id="cal-查看当前的日历信息"><a href="#cal-–-查看当前的日历信息" class="headerlink" title="cal – 查看当前的日历信息"></a>cal – 查看当前的日历信息</h3><p>基本语法：cal   [选项]           不加选项的话就默认显示本月的日历</p><p>eg.  显示2020年日历             cal   2020</p><br><h2 id="55-搜索查找"><a href="#5-5-搜索查找" class="headerlink" title="5.5 搜索查找"></a>5.5 搜索查找</h2><h3 id="find-查找文件x2f目录"><a href="#find-–-查找文件-x2F-目录" class="headerlink" title="find – 查找文件&#x2F;目录"></a>find – 查找文件&#x2F;目录</h3><p>find 指令将从指定目录向下递归地遍历其各个子目录，将满足条件的文件或者目录显示在终端</p><p>基本语法：find   [搜索范围]   [选项]</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-name&lt;查询方式&gt;</td><td>按照指定的文件名查找模式查找文件</td></tr><tr><td>-user&lt;用户名&gt;</td><td>查找属于指定用户名所有的文件</td></tr><tr><td>-size&lt;文件大小&gt;</td><td>按照指定的文件大小查找文件</td></tr></tbody></table><p>eg.  查找整个 linux 系统下所有大于 200M 的文件           find   &#x2F;   -size   +200M</p><p>PS：+n大于    -n小于    n等于，单位有 k，M，G</p><br><br><h3 id="locate-快速定位文件的路径"><a href="#locate-–-快速定位文件的路径" class="headerlink" title="locate – 快速定位文件的路径"></a>locate – 快速定位文件的路径</h3><p>locate 指令利用事先建立的系统中所有文件名称及路径的 locate 数据库实现快速定位给定的文件</p><p>Locate 指令无需遍历整个文件系统，查询速度较快。为了保证查询结果的准确度，管理员必须定期更新 locate 时刻。</p><p>基本语法：locate   [文件]</p><p>PS：由于 locate 指令基于数据库进行查找（速度很快），所以第一次运行之前，必须使用 updatedb 指令创建 locate 数据库</p><p>eg. 请使用 locate 指令快速定位 hello.txt 文件的位置</p><ul><li>updatedb</li><li>locate   hello.txt</li></ul><br><br><h3 id="which-可以查看某个指令在哪个目录下"><a href="#which-–-可以查看某个指令在哪个目录下" class="headerlink" title="which – 可以查看某个指令在哪个目录下"></a>which – 可以查看某个指令在哪个目录下</h3><p>基本语法：which   [指令]</p><p>eg.  查看 ls 指令在哪个文件下           which   ls</p> <br><br><h3 id="grep-和"><a href="#grep-和" class="headerlink" title="grep 和 |"></a>grep 和 |</h3><p>grep 过滤查找，常常与 ‘|’ 一起使用，’|’ 为管道符，表示将前一个命令的处理结果输出传送给后面的指令处理。</p><p>基本语法：grep   [选项]   查找内容   源文件</p><p>常用选项：</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-v</td><td>反向匹配，只选择不匹配的行</td></tr><tr><td>-n</td><td>显示匹配行及行号</td></tr><tr><td>-i</td><td>忽略字母大小写</td></tr></tbody></table><p>eg. </p><ol><li>在 shan.java 文件中查找 “main”，并显示其行号<ul><li>grep   -n   “main”   &#x2F;home&#x2F;shan.java </li><li>cat   &#x2F;home&#x2F;shan.java   |   grep   -n   “main”</li></ul></li><li>在 shan.java 文件中查找 “main”，显示其行号并且不区分大小写<ul><li>grep   -n   -i   “main”   &#x2F;home&#x2F;shan.java</li><li>cat   shan.java   |   grep   -n   -i   “main”</li></ul></li><li>在 abc 中不选择 a<ul><li>grep   -v   “a”</li></ul></li></ol><p>PS：-n  -i  可以缩写为  -ni  或者  -in</p><br><h3 id="gzip-压缩文件-gunzip-解压"><a href="#gzip-–-压缩文件-gunzip-–-解压" class="headerlink" title="gzip – 压缩文件 gunzip – 解压"></a>gzip – 压缩文件 gunzip – 解压</h3><p>基本语法：</p><p>gzip   [文件]                     压缩文件，只能将文件压缩为*.gz文件</p><p>gunzip   [文件.gz]           解压缩文件</p><p>eg.</p><ol><li><p>gzip 压缩,将 &#x2F;home 下的 shan.java 文件进行压缩</p><ul><li>gzip   &#x2F;home&#x2F;shan.java</li></ul></li><li><p>gunzip 解压，将 &#x2F;home 下的 shan.java.gz 文件进行解压缩</p><ul><li>gunzip   &#x2F;home&#x2F;shan.java.gz</li></ul></li></ol><br><br><h3 id="zip-压缩文件-unzip-解压"><a href="#zip-–-压缩文件-unzip-–-解压" class="headerlink" title="zip – 压缩文件 unzip – 解压"></a>zip – 压缩文件 unzip – 解压</h3><p>这个指令在项目打包发布时很常用</p><p>基本语法：</p><p>zip   [选项]   要压缩的内容</p><p>unzip   [选项]   要解压的内容</p><ul><li>zip 常用选项</li></ul><p>​-r    递归压缩，即压缩目录</p><ul><li>unzip的常用选项</li></ul><p>​-d  [目录]    指定解压后文件的存放目录</p><p>eg.</p><ol><li><p>将 &#x2F;home&#x2F;bbb 下的所有文件&#x2F;文件夹进行压缩成 myhome.zip</p><ul><li>zip   -r   myhome.zip   &#x2F;home&#x2F;bbb&#x2F;</li></ul></li><li><p>将 mybbb.zip 解压到 &#x2F;opt&#x2F;tmp 目录下</p><ul><li>mkdir   &#x2F;opt&#x2F;tmp</li><li>unzip   -d   &#x2F;opt&#x2F;tmp   &#x2F;home&#x2F;mybbb.zip</li></ul></li></ol><br><br><h3 id="tar-打包"><a href="#tar-–-打包" class="headerlink" title="tar – 打包"></a>tar – 打包</h3><p>可以压缩可以解压，根据选项而定，最后打包的文件是 .tar.gz 的文件</p><p>基本语法： tar   [选项]   XXX.tar.gz   打包的内容</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-C</td><td>解压到指定位置</td></tr><tr><td>-c</td><td>产生.tar打包文件</td></tr><tr><td>-v</td><td>显示详细信息</td></tr><tr><td>-f</td><td>指定压缩后的文件名</td></tr><tr><td>-z</td><td>打包同时压缩</td></tr><tr><td>-x</td><td>解包.tar文件</td></tr></tbody></table><p>eg.</p><ol><li><p>压缩个文件，将 &#x2F;home&#x2F;pig.txt  和 &#x2F;home&#x2F;cat.txt 压缩成 pc.tar.gz</p><ul><li>tar   -zcvf   pc.tar.gz   &#x2F;home&#x2F;pig.txt   &#x2F;home&#x2F;cat.txt</li></ul></li><li><p>将 &#x2F;home 的文件夹压缩成 myhome.tar.gz </p><ul><li>tar   -zcvf   myhome.tar.gz   &#x2F;home&#x2F;</li></ul></li><li><p>将 pc.tar.gz 解压到当前目录</p><ul><li>tar   -zxvf   pc.tar.gz</li></ul></li><li><p>将 myhome.tar.gz 解压到 &#x2F;opt&#x2F;tmp2 目录下</p><ul><li>mkdir   &#x2F;opt&#x2F;tmp2 </li><li>tar   -zxvf   &#x2F;home&#x2F;myhome.tar.gz   -C   &#x2F;opt&#x2F;tmp2</li></ul></li></ol><br><h1 id="6-组管理和权限管理"><a href="#6-组管理和权限管理" class="headerlink" title="6 组管理和权限管理"></a>6 组管理和权限管理</h1><h2 id="61-组的介绍"><a href="#6-1-组的介绍" class="headerlink" title="6.1 组的介绍"></a>6.1 组的介绍</h2><p>在 linux 中的每个用户必须属于一个组，不能独立于组外。在 linux 中每个文件有所有者、所在组、其它组的概念。</p><br><p><strong>（1）文件&#x2F;目录 的所有者</strong></p><p>一般为文件的创建者，谁创建了该文件，就自然的成为该文件的所有者</p><br><p><strong>（2）文件&#x2F;目录 的所在组</strong></p><p>当某个用户创建了一个文件后，这个文件的所在组就是该用户所在的组（默认）</p><br><p><strong>（3）文件&#x2F;目录 的其他组</strong></p><p>除文件的所有者和所在组的用户外，系统的其它用户都是文件的其它组</p><br><h3 id="用户-的所在组"><a href="#用户-的所在组" class="headerlink" title="用户 的所在组"></a>用户 的所在组</h3><p>在添加用户时，可以指定将该用户添加到哪个组中，同样的用 root 的管理权限可以改变某个用户所在的组</p><p><strong>改变用户所在组</strong></p><p>usermod   -g   [新组名]   [用户名]</p><p>usermod   -d   [目录名]   [用户名]          改变用户登录的初始目录</p><br><h2 id="62-权限的介绍"><a href="#6-2-权限的介绍" class="headerlink" title="6.2 权限的介绍"></a>6.2 权限的介绍</h2><p>ls   -l 中显示的内容如下:</p><p>-rwxrw-r–    1    root    root    1213    Feb  2  09:39    abc</p><p>0 - 9 位：</p><p>第 0 位确定文件类型（d，l，c，b）</p><p>​    l 是链接，相当于 windows 的快捷方式</p><p>​    d 是目录，相当于 windows 的文件夹</p><p>​    c 是字符设备文件，鼠标，键盘</p><p>​    b 是块设备，比如硬盘</p><p>第 1 - 3 位确定该文件的所有者拥有的权限                   – User</p><p>第 4 - 6 位确定该文件的所在组拥有的权限                   – Group</p><p>第 7 - 9 位确定其他用户拥有该文件的权限                   – Other</p><br><p>1            文件：硬链接数            目录：子目录数</p><p>root      所有者</p><p>root      所在组</p><p>1213     文件大小（单位是字节，为目录时显示4096）</p><p>Feb  2  09:39     文件的最后修改日期</p><p>abc       文件名</p><br><p><strong>rwx 作用到文件</strong></p><p>[ r ] 代表可读（read）： 可以读取，查看</p><p>[ w ] 代表可写（write）： 可以修改，但是不可以删除该文件。删除一个文件的前提条件是对该文件所在的目录有写的权限</p><p>[ x ] 代表可执行（execute）：可以被执行</p><br><p><strong>rwx 作用到目录</strong></p><p>[ r ] 代表可读（read）： 可以读取，ls 查看目录内容</p><p>[ w ] 代表可写（write）： 可以修改，对目录下的内容 创建 &#x2F; 删除 &#x2F; 重命名</p><p>[ x ] 代表可执行（execute）：可以进入该目录，比如 cd 指令</p><br><h3 id="chmod-修改权限"><a href="#chmod-–-修改权限" class="headerlink" title="chmod – 修改权限"></a>chmod – 修改权限</h3><p><strong>第一种方式：通过 +、-、&#x3D; 变更权限</strong></p><p>u：所有者      g：所在组     o：其他人     a：所有的人</p><p>chmod    u&#x3D;rwx,g&#x3D;rx,o&#x3D;x    文件&#x2F;目录名</p><br><p><strong>第二种方式：通过数字变更权限</strong></p><p>权限可以用数字来表示，r &#x3D; 4，w &#x3D; 2，x &#x3D; 1</p><p>所以      chmod    u&#x3D;rwx,g&#x3D;rx,o&#x3D;x    文件&#x2F;目录名</p><p>相当于  chmod    751    文件&#x2F;目录名</p><br><h3 id="chown-修改文件所有者"><a href="#chown-–-修改文件所有者" class="headerlink" title="chown – 修改文件所有者"></a>chown – 修改文件所有者</h3><p>修改所有者：chown   newowner   文件&#x2F;目录</p><p>修改所有者和所在组：chown   newowner:newgroup   文件&#x2F;目录</p><p>-R    如果是目录，则使其下所有子文件或目录递归生效</p><br><h3 id="chgrp-修改文件所在组"><a href="#chgrp-–-修改文件所在组" class="headerlink" title="chgrp – 修改文件所在组"></a>chgrp – 修改文件所在组</h3><p>修改文件&#x2F;目录 的所在组：chgrp   [组名]   [文件名]</p><p>eg. 使用 root 用户创建文件 orange.txt，然后将这个文件的所在组修改到 fruit 组</p><ul><li>groupadd   fruit</li><li>touch   orange.txt</li><li>chgrp   fruit   orange.txt</li></ul><br><p>PS：</p><p>当我们要对文件夹内的文件进行操作，则必须先拥有对该文件夹的相应操作</p><br><h1 id="7-定时任务调度"><a href="#7-定时任务调度" class="headerlink" title="7 定时任务调度"></a>7 定时任务调度</h1><p>任务调度：是指系统在某个时间执行的特定的命令或程序</p><p>任务调度分类：</p><p>系统工作：有些重要的工作必须周而复始地执行。如病毒扫描等</p><p>个别用户工作：个别用户可能希望执行某些程序，比如对 mysql 数据库的备份</p><br><h2 id="71-crontab-进行定时任务的设置"><a href="#7-1-crontab-–-进行定时任务的设置" class="headerlink" title="7.1 crontab – 进行定时任务的设置"></a>7.1 crontab – 进行定时任务的设置</h2><p>  基本语法：crontab   [选项]</p><table><thead><tr><th>常见选项</th><th>功能</th></tr></thead><tbody><tr><td>-e</td><td>编辑 crontab 定时任务</td></tr><tr><td>-l</td><td>查询 crontab 任务</td></tr><tr><td>-r</td><td>删除当前用户所有的 crontab 任务</td></tr></tbody></table><br><p>快速入门</p><p>执行 crontab   -e 命令</p><p>接着输入任务到调度文件</p><p>如：* &#x2F; * * * *   ls   -l   &#x2F;etc&#x2F;   &gt;   &#x2F;tmp&#x2F;to.txt</p><p>即：每小时的每分钟执行一次 ls  -l  &#x2F;etc&#x2F;  &gt;  &#x2F;tmp&#x2F;to.txt 命令</p><p><strong>五个占位符的说明</strong></p><table><thead><tr><th>项目</th><th>含义</th><th>范围</th></tr></thead><tbody><tr><td>第一个 ‘*’</td><td>一小时中的第几分钟</td><td>0 - 59</td></tr><tr><td>第二个 ‘*’</td><td>一天中的第几小时</td><td>0 - 23</td></tr><tr><td>第三个 ‘*’</td><td>一个月中的第几天</td><td>1 - 31</td></tr><tr><td>第四个 ‘*’</td><td>一年中的第几个月</td><td>1 - 12</td></tr><tr><td>第五个 ‘*’</td><td>一周当中的星期几</td><td>0 - 7</td></tr></tbody></table><br><p><strong>特殊符号的说明</strong></p><table><thead><tr><th>特殊符号</th><th>含义</th></tr></thead><tbody><tr><td>*</td><td>代表任何时间。比如第一个 ‘*’ 就代表一小时中每分钟都执行次的意思</td></tr><tr><td>，</td><td>代表不连续的时间</td></tr><tr><td>-</td><td>代表连续的时间范围</td></tr><tr><td>*&#x2F;n</td><td>代表每隔多久执行一次</td></tr></tbody></table><p>比如：</p><p>“0  8,12,16  *  *  *”    代表在每天的8点0分, 12点0分, 16点0分都执行命令</p><p>“0  5  *  *  1-6”           代表在周一到周六的5点0分执行命令</p><p>“*&#x2F;10  *  *  *  *”         代表每隔10分钟就执行遍命令</p><br><p>案例1：每隔 1 分钟，就将当前的日期信息，追加到 &#x2F;tmp&#x2F;mydate 文件中</p><p>（1）crontab   -e</p><p>（2）*&#x2F;1   *   *   *   *   date   &gt;&gt;   &#x2F;tmp&#x2F;mydate</p><p>案例2：每隔 1 分钟，将当前日期和日历都追加到 &#x2F;home&#x2F;mycal 文件中</p><p>（1）vim   &#x2F;home&#x2F;my.sh    写入内容：date   &gt;&gt;   &#x2F;home&#x2F;mycal   和   cal   &gt;&gt; &#x2F;home&#x2F;mycal</p><p>（2）给 my.sh 增加执行权限：chmod   u+x   &#x2F;home&#x2F;my.sh</p><p>（3）crontab   -e   增加   *&#x2F;1   *   *   *   *   &#x2F;home&#x2F;my.sh</p><br><p><strong>crond 相关指令</strong></p><p>crontab   -r        终止任务调度</p><p>crontab   -l        列出当前有哪些任务调度</p><p>service   crond   restart        重启任务调度</p><br><h2 id="72-at-定时任务"><a href="#7-2-at-–-定时任务" class="headerlink" title="7.2 at –  定时任务"></a>7.2 at –  定时任务</h2><p>at 命令是一次性定时计划任务，at 的守护进程 atd 会以后台模式运行，检查作业队列来运行。</p><p>默认情况下，atd 守护进程每 60 秒检查作业队列，有作业时，会检查作业运行时间，如果时间与当前时间匹配，运行此作业</p><p>at 命令是一次性定时计划任务，执行完一个任务后不再执行此任务了</p><p>在使用 at 命令的时候，一定要保证 atd 进程的启动，可以使用相关指令来查看</p><p>ps   -ef   |   grep   atd            可以检测 atd 是否在运行</p><br><p>基本语法：at   [选项]   [时间]</p><p>Ctrl + D        结束 at 命令的输入（输入两次）</p><p>atq               查看系统中没有执行的工作任务</p><p>atrm            删除已经设置的任务</p><p>artm  4       表示删除编号为 4 的任务</p><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-m</td><td>当指定的任务被完成后，将给用户发送邮件，即使没有标准输出</td></tr><tr><td>-I</td><td>atq 的别名</td></tr><tr><td>-d</td><td>atrm 的别名</td></tr><tr><td>-v</td><td>显示任务将被执行的时间</td></tr><tr><td>-c</td><td>打印任务的内容到标准输出</td></tr><tr><td>-V</td><td>显示版本信息</td></tr><tr><td>-q &lt;队列&gt;</td><td>使用指定的队列</td></tr><tr><td>-f &lt;文件&gt;</td><td>从指定文件读入任务而不是从标准输入读入</td></tr><tr><td>-t &lt;时间参数&gt;</td><td>以时间参数的形式提交要运行的任务</td></tr></tbody></table><p><strong>关于指定时间的说明</strong></p><p>接受在当天的 hh:mm 式的时间指定。假如该时间已过去，那么就放在第二天执行</p><p>使用 midnight (深夜)，noon (中午)，teatime (饮茶时间，一般是下午4点) 等比较模糊的词语来指定时间</p><p>采用12小时计时制，即在时间后面加上AM (上午) 或 PM (下午) 来说明是上午还是下午</p><p>指定命令执行的具体日期，指定格式为 month day 或 mm&#x2F;dd&#x2F;yy 或 dd.mm.yy，指定的日期必须跟在指定时间的后面。例如: 04:00 2021-03-1 </p><p>使用相对计时法。指定格式为：now + count time-units，now 就是当前时间，time-units 是时间单位，这里能够是 minutes、hours、days、weeks。count 是时间的数量，几天，几小时。例如: now + 5 minutes</p><p>直接使用 today、tomorrow来指定完成命令的时间</p><br><p>eg. 2 天后的下午 5 点执行 &#x2F;bin&#x2F;ls   &#x2F;home</p><p>at   5pm   +   2   days     [回车]</p><p>&#x2F;bin&#x2F;ls   &#x2F;home               [两次 Ctrl + D]</p><br><h1 id="8-磁盘分区-挂载"><a href="#8-磁盘分区、挂载" class="headerlink" title="8 磁盘分区、挂载"></a>8 磁盘分区、挂载</h1><h2 id="81-linux-分区"><a href="#8-1-Linux-分区" class="headerlink" title="8.1 Linux 分区"></a>8.1 Linux 分区</h2><p>Linux 来说无论有几个分区，分给哪一个目录使用，它归根结底就只有一个根目录，一个独立且唯一的文件结构，Linux 中每个分区都是用来组成整个文件系统的一部分</p><p>Linux 采用了一种叫 “载入” 的处理方法，它的整个文件系统中包含了一整套的文件和目录，且将一个分区和一个目录联系起来。这时要载入的一个分区将使它的存储空间在一个目录下获得</p><br><p><strong>硬盘说明</strong></p><p>Linux 硬盘分 IDE 硬盘和 SCSI 硬盘，目前基本上是 SCSI 硬盘</p><br><p>对于 IDE 硬盘，驱动器标识符为 “hdx~”，其中 “hd” 表明分区所在设备的类型，这里是指 IDE 硬盘了。</p><p>“x” 为盘号（a 为基本盘，b 为基本从属盘，c 为辅助主盘，d 为辅助从属盘）</p><p>“~” 代表分区，前四个分区用数字 1 到 4 表示，它们是主分区或扩展分区，从 5 开始就是逻辑分区。</p><p>例，hda3 表示为第一个 IDE 硬盘上的第三个主分区 或 扩展分区</p><p>hdb2 表示为第二个 IDE 硬盘上的第二个主分区 或 扩展分区</p><br><p>对于 SCSI 硬盘则标识为 “sdx~”，SCSI 硬盘是用 “sd” 来表示分区所在设备的类型的，其余则和IDE 硬盘的表示方法一样</p><br><h3 id="查看所有设备的挂载情况"><a href="#查看所有设备的挂载情况" class="headerlink" title="查看所有设备的挂载情况"></a>查看所有设备的挂载情况</h3><p>指令：lsblk     或者     lsblk   -f</p><br><h2 id="82-挂载的案例"><a href="#8-2-挂载的案例" class="headerlink" title="8.2 挂载的案例"></a>8.2 挂载的案例</h2><p><strong>如何增加一块硬盘？</strong></p><p>1）虚拟机添加硬盘</p><p>2）分区</p><p>3）格式化</p><p>4）挂载</p><p>5）设置可以自动挂载</p><h3 id="增加一块硬盘"><a href="#增加一块硬盘" class="headerlink" title="增加一块硬盘"></a>增加一块硬盘</h3><p>1）</p><p>在【虚拟机】菜单中，选择【设置】，然后设备列表里添加硬盘，然后一路【下一步】，中间只有选择磁盘大小的地方需要修改，至到完成。然后重启系统</p><p>2）</p><p>分区命令：fdisk    &#x2F;dev&#x2F;sdb         开始对 &#x2F;sdb 分区</p><p>m       显示命令列表</p><p>P        显示磁盘分区    同    fdisk   -l</p><p>n        新增分区</p><p>d        删除分区</p><p>w       写入并退出</p><p>q        不保存直接退出</p><p>PS：开始分区后输入 n，新增分区，然后选择p，分区类型为主分区。两次回车默认剩余全部空间。最后输入 w 写入分区并退出，若不保存退出输入 q</p><p>3）</p><p>格式化磁盘</p><p>分区命令：mkfs   -t   ext4   &#x2F;dev&#x2F;sdb1 </p><p>其中 ext4 是分区类型</p><p>4）</p><p>挂载：将一个分区与一个目录联系起来</p><p>mount   [设备名称]   [挂载目录]</p><p>eg. mount    &#x2F;dev&#x2F;sdb1    &#x2F;newdisk</p><p>卸载：将一个分区与一个目录断连</p><p>umount   [设备名称]  或者  [挂载目录]</p><p>eg. umount    &#x2F;dev&#x2F;sdb1  或者  umount    &#x2F;newdisk</p><p>PS：用命令行挂载，重启后会失效</p><p>5）</p><p>永久挂载：通过修改 &#x2F;etc&#x2F;fstab 实现挂载</p><p>添加完成后执行 mount  -a 即刻生效</p><h2 id="83-磁盘情况查询"><a href="#8-3-磁盘情况查询" class="headerlink" title="8.3 磁盘情况查询"></a>8.3 磁盘情况查询</h2><h3 id="查询系统整体磁盘的使用情况"><a href="#查询系统整体磁盘的使用情况" class="headerlink" title="查询系统整体磁盘的使用情况"></a>查询系统整体磁盘的使用情况</h3><p>基本语法：df   -h</p><br><h3 id="查询指定目录的磁盘占用情况"><a href="#查询指定目录的磁盘占用情况" class="headerlink" title="查询指定目录的磁盘占用情况"></a>查询指定目录的磁盘占用情况</h3><p>基本语法：du -h</p><p>查询指定目录的磁盘占用情况，默认为当前目录</p><p>-s    指定目录占用大小汇总.</p><p>-h    带计量单位</p><p>-a    含文件</p><p>–max-depth&#x3D;1    子目录深度</p><p>-c    列出明细的同时，增加汇总值</p><p>eg. 查询 &#x2F;opt 目录的磁盘占用情况，深度为1</p><p>du   -hac   –max-depth&#x3D;1   &#x2F;opt</p><br><h2 id="84-工作实用指令"><a href="#8-4-工作实用指令" class="headerlink" title="8.4 工作实用指令"></a>8.4 工作实用指令</h2><p>统计 &#x2F;opt 文件夹下文件的个数         ls   -l   &#x2F;opt   |   grep   “^-“   |   wc   -l</p><p>统计 &#x2F;opt 文件夹下目录的个数         ls   -l   &#x2F;opt   |   grep   “^d”   |   wc   -l</p><p>统计 &#x2F;opt 文件夹下文件的个数，包括子文件夹里的               ls   -lR   &#x2F;opt   |   grep   “^-“   |   wc   -l</p><p>统计 &#x2F;opt 文件夹下目录的个数，包括子文件夹里的               ls   -lR   &#x2F;opt   |   grep   “^d”   |   wc   -l</p><p>以树状显示目录结构 tree 目录     tree   [目录名]</p><p>PS：如果没有tree，则使用 yum install tree 安装</p><br><h1 id="9-网络配置"><a href="#9-网络配置" class="headerlink" title="9 网络配置"></a>9 网络配置</h1><h2 id="91-nat-网络原理"><a href="#9-1-NAT-网络原理" class="headerlink" title="9.1 NAT 网络原理"></a>9.1 NAT 网络原理</h2><p>查看 windows 环境的中 VMnet8 网络配置：ipconfig</p><p>查看 linux 环境中的网络配置：ifconfig</p><br><h3 id="ping-测试主机之间网络连通性"><a href="#ping-–-测试主机之间网络连通性" class="headerlink" title="ping – 测试主机之间网络连通性"></a>ping – 测试主机之间网络连通性</h3><p>基本语法：ping   [目的主机]</p><p>eg. 测试当前服务器是否可以连接百度           ping   <a href="http://www.baidu.com/">www.baidu.com</a></p><br><h2 id="92-linux-网络环境配置"><a href="#9-2-linux-网络环境配置" class="headerlink" title="9.2 linux 网络环境配置"></a>9.2 linux 网络环境配置</h2><p><strong>第一种方法（自动获取）</strong></p><p>登陆后，通过界面的来设置自动获取 ip</p><p>特点： linux 启动后会自动获取 IP，优点是方便，缺点是每次自动获取的 ip 地址可能不一样</p><p><strong>第二种方法（指定 ip）</strong><br>直接修改配置文件来指定 IP，并可以连接到外网</p><p>vim   &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33</p><p><strong>ifcfg-ens33   文件说明：</strong></p><p>DEVICE&#x3D;eth0                                            #接口名（设备，网卡）</p><p>HWADDR&#x3D;00:0C:2x:6x:0x:xx                 #MAC 地址</p><p>TYPE&#x3D;Ethernet                                        #网络类型（通常是 Ethemet）</p><p>UUID&#x3D;926a57ba-92c6-4231-bacb-f27e5e6a9f44                  #随机 id</p><p>#系统启动的时候网络接口是否有效（yes &#x2F; no）</p><p>ONBOOT&#x3D;yes</p><p>IP 的配置方法[nonelstatic|bootp|dhcp] （引导时不使用协议|静态分配IP|BOOTP协议|DHCP协议）</p><br><p>要求：将 ip 地址配置的静态的，比如：ip 地址为 192.168.200.130</p><p>（1）BOOTPROTO&#x3D;static（网络连接方式为指定 ip 地址）</p><p>（2）指定 ip 地址、网关、域名解释器</p><p>​        #IP地址</p><p>​        IPADDR&#x3D;192.168.200.130</p><p>​        #网关</p><p>​        GATEWAY&#x3D;192.168.200.2</p><p>​        #域名解析器</p><p>​        DNS1&#x3D;192.1 68.200.2</p><p>（3）在虚拟器设置中修改 VMnet8 的子网 ip</p><p>（4）重启网络服务或者重启系统生效           service   network   restart  或者 reboot</p><br><h2 id="93-设置主机名和-hosts-映射"><a href="#9-3-设置主机名和-hosts-映射" class="headerlink" title="9.3 设置主机名和 hosts 映射"></a>9.3 设置主机名和 hosts 映射</h2><p>为了方便记忆，可以给 linux 系统设置主机名，也可以根据需要修改主机名</p><p>基本语法：hostname   查看主机名</p><p>修改文件在 &#x2F;etc&#x2F;hostname 指定。修改后，重启生效</p><br><p><strong>设置 hosts 映射</strong></p><p>思考：如何通过主机名能够找到（比如ping）某个linux系统？</p><p>windows 环境下：</p><p>在 C:\Windows\System32\drivers\etc\hosts 文件指定即可</p><p>案例：192.168.200.128   firtree01</p><p>linux 环境下：</p><p>在 &#x2F;etc&#x2F;hosts 文件指定</p><p>案例：192.168.200.1   LAPTOP-HTKFCLVA</p><br>**Hosts** <p>一个文本文件，用来记录 IP 和 Hostname（主机名）的映射关系</p><p><strong>DNS</strong></p><p>就是 Domain Name System 的缩写，即域名系统。是互联网上作为域名和 IP 地址相互映射的一个分布式数据库</p><br><p>应用实例：用户在浏览器输入了 www. baidu.com</p><p>1）浏览器先检查浏览器缓存中有没有该域名解析 IP 地址，有就先调用这个 IP 完成解析。如果没有，就检查 DNS 解析器缓存，如果有直接返回 IP 完成解析。这两个缓存，可以理解为本地解析器缓存</p><p>2）一般来说，当电脑第一次成功访问某一个网站后，在一定时间内，浏览器或操作系统会缓存他的 IP 地址（DNS解析记录）如在 cmd 窗口中输入</p><p>​    ipconfig   &#x2F;displaydns      &#x2F;&#x2F; DNS 域名解析缓存<br>​    ipconfig   &#x2F;flushdns         &#x2F;&#x2F; 手动清理 DNS 缓存</p><p>3）如果本地解析器缓存没有找到对应映射，检查系统中 hosts 文件中有没有配置对应的域名 IP 映射，如果有，则完成解析并返回</p><p>4）如果本地 DNS 解析器缓存和 hosts 文件中均没有找到对应的 IP，则到域名服务 DNS 进行解析</p><br><h1 id="10-进程管理"><a href="#10-进程管理" class="headerlink" title="10 进程管理"></a>10 进程管理</h1><p><strong>基本介绍</strong></p><p>在LINUX中，每个执行的程序都称为一个进程。每一个进程都分配一个ID号（pid，进程号）</p><p>每个进程都可能以两种方式存在。前台与后台，所谓前台进程就是用户目前的屏幕上可以进行操作的。后台进程则是实际在操作，但屏幕上无法看到</p><p>一般系统的服务都是以后台进程的方式存在，而且都会常驻在系统中。直到关机才才结束。</p><br><h3 id="ps-显示系统执行的进程"><a href="#ps-–-显示系统执行的进程" class="headerlink" title="ps – 显示系统执行的进程"></a>ps – 显示系统执行的进程</h3><p>基本语法：ps</p><p>ps 命令是用来查看目前系统中，有哪些正在执行，以及它们执行的状况。可以不加任何参数</p><p><strong>ps显示的信息选项：</strong></p><table><thead><tr><th>字段</th><th>说明</th></tr></thead><tbody><tr><td>PID</td><td>进程识别号</td></tr><tr><td>TTY</td><td>终端机号</td></tr><tr><td>TIME</td><td>此进程消耗CPU时间</td></tr><tr><td>CMD</td><td>正在执行的命令或者进程名</td></tr></tbody></table><p><strong>ps 可选参数：</strong></p><p>ps   -a     显示当前终端的所有进程信息</p><p>ps   -u     以用户的格式显示进程信息</p><p>ps   -x     显示后台进程运行的参数</p><p>ps   -e     显示当前的所有进程</p><p>ps   -f      全格式</p><p><strong>ps 详解</strong></p><p>指令：ps   -aux|grep   xxx</p><p>说明：</p><p>USER：用户名称</p><p>PID：进程号</p><p>%CPU：进程占用 CPU 的百分比</p><p>%MEM：进程占用物理内存的百分比</p><p>VSZ：进程占用的虚拟内存大小（单位: KB）</p><p>RSS：进程占用的物理内存大小（单位: KB）</p><p>TT：终端名称，缩写</p><p>STAT：进程状态，其中 S - 睡眠，s - 表示该进程是会话的先导进程，N - 表示进程拥有比普通优先级更低的优先级，R - 正在运行，D - 短期等待，Z - 僵死进程，T - 被跟踪或者被停止等</p><p>STARTED：进程的启动时间</p><p>TIME：CPU 时间，即进程使用CPU的总时间</p><p>COMMAND：启动进程所用的命令和参数，如果过长会被截断显示</p><br><p><strong>ps   -ef  则表示以全格式显示当前的所有进程</strong></p><p>UID：用户ID</p><p>PID：进程ID</p><p>PPID：父进程ID</p><p>C：CPU用于计算执行优先级的因子。数值越大，表明进程是 CPU 密集型运算，执行优先级会降低；数值越小，表明进程是 I&#x2F;O 密集型运算，执行优先级会提高</p><p>STIME：进程启动的时间</p><p>TTY：完整的终端名称</p><p>TIME： CPU 时间</p><p>CMD：启动进程所用的命令和参数</p><br><h3 id="终止进程"><a href="#终止进程" class="headerlink" title="终止进程"></a>终止进程</h3><p>若是某个进程执行一半需要停止时，或是已消了很大的系统资源时，此时可以考虑停止该进程。使用kill命令来完成此项任务</p><p><strong>基本语法：</strong></p><p>kill   [选项]   [进程号]      通过进程号杀死&#x2F;终止进程</p><p>killall   [进程名称]           通过进程名杀死&#x2F;终止进程，此时该进程的子进程也会被终止，也支持通配符，系统负载很大时较为有用</p><p><strong>常用选项：</strong></p><p>-9    表示强迫进程立即停止</p><p>eg. 踢掉某个非法用户</p><ul><li>ps  -aux  |  grep  sshd            得到用户登录的进程号</li><li>kill   [得到的进程号]                 终止进程</li></ul><br><h3 id="pstree-查看进程树"><a href="#pstree-–-查看进程树" class="headerlink" title="pstree – 查看进程树"></a>pstree – 查看进程树</h3><p>基本语法：pstree   [选项]         可以更加直观的查看进程信息</p><p>常用选项：</p><p>-p    显示进程的 PID</p><p>-u    显示进程的所属用户</p><br><h1 id="11-服务管理"><a href="#11-服务管理" class="headerlink" title="11 服务管理"></a>11 服务管理</h1><p>服务本质就是进程，但是是运行在后台的，通常都会监听某个端口，等待其它程序的请求</p><p>比如（mysqld，sshd，防火墙等）因此我们又称为守护进程，是Linux中非常重要的知识点</p><br><h2 id="111-service-服务管理指令"><a href="#11-1-service-服务管理指令" class="headerlink" title="11.1 service 服务管理指令"></a>11.1 service 服务管理指令</h2><p>（1）service   服务名   [start | stop | restart | reload I status]</p><p>（2）在 CentOS7.0 后很多服务不再使用 service，而是 systemctl</p><p>（3）service 指令管理的服务在 &#x2F;etc&#x2F;init.d 查看</p><br><h3 id="查看服务名"><a href="#查看服务名" class="headerlink" title="查看服务名"></a>查看服务名</h3><p>方式一：使用 setup 查看系统服务</p><p>方式二：在 &#x2F;etc&#x2F;init.d 下可以看到 service 指令管理的服务</p><br><h2 id="112-服务的运行级别"><a href="#11-2-服务的运行级别" class="headerlink" title="11.2 服务的运行级别"></a>11.2 服务的运行级别</h2><p>Linux 有 7 种运行级别，常用的级别是 3 和 5</p><p>运行级别0：系统停机状态，系统默认运行级别不能设为0，否则不能正常启动</p><p>运行级别1：单用户工作状态，root 权限，用于系统维护，禁止远程登陆</p><p>运行级别2：多用户状态（没有NFS）不支持网络</p><p>运行级别3：完全的多用户状态（有NFS）无界面，登陆后进入控制台命令行模式</p><p>运行级别4：系统未使用，保留</p><p>运行级别5： X11 控制台，登陆后进入图形 GUI 模式</p><p>运行级别6：系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动</p><br><h3 id="默认的运行级别"><a href="#默认的运行级别" class="headerlink" title="默认的运行级别"></a>默认的运行级别</h3><p>在 centos7 以前，存储在 &#x2F;etc&#x2F;inittab 文件中</p><p>之后做了简化：</p><p>multi-user.target:ansalogous   to   runlevel   3</p><p>grapjical.target:ansalogous   to   runlevel   5</p> <br><ul><li><p>查看当前的运行级别         systemctl   get-default</p></li><li><p>设置默认的运行级别         systemctl   set-default   TARGET.target</p></li></ul><br><h3 id="chkconfig-指令"><a href="#chkconfig-指令" class="headerlink" title="chkconfig 指令"></a>chkconfig 指令</h3><p>通过 chkconfig 命令可以给服务的各个运行级别设置自启动&#x2F;关闭</p><p>chkconfig 指令管理的服务在 &#x2F;etc&#x2F;init.d 查看</p><p>注意：Centos7.0 后，很多服务使用 systemctl 管理</p><br><p>chkconfig 基本语法：</p><p>（1）查看服务    chkconfig    –list  [|  grep  xxx]</p><p>（2）chkconfig    服务名    –list</p><p>（3）chkconfig    –level    5    服务名    on&#x2F;off</p><p>PS：chkconfig 重新设置服务后自启动或关闭，需要重启机器reboot生效</p><br><h3 id="systemctl-指令"><a href="#systemctl-指令" class="headerlink" title="systemctl 指令"></a>systemctl 指令</h3><p>基本语法：systemctl    [start I stop | restart I status]    服务名<br>systemctl 指令管理的服务在 &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system 查看</p><br><p><strong>systemctl 设置服务的自启动状态</strong></p><p>systemctl   list-unit-files   [| grep   服务名]       查看服务开机启动状态，grep进行过滤</p><p>systemctl   enable   服务名                                  设置服务开机启动</p><p>systemctl   disable   服务名                                  关闭服务开机启动</p><p>systemctl   is-enabled   服务名                            查询某个服务是否是自启动的</p><p>eg. 查看防火墙服务的开机启动状态     systemctl   list-unit-files  |  grep   firewalld</p> <br><p>关闭或者启用防火墙后，立即生效</p><p>但这种方式只是临时生效，当重启系统后，还是回归以前对服务的设置</p><p>如果希望设置某个服务自启动或关闭永久生效，要使用systemctl   [enable&#x2F;disable]   服务名</p><br><h2 id="113-打开x2f关闭端口"><a href="#11-3-打开-x2F-关闭端口" class="headerlink" title="11.3 打开&#x2F;关闭端口"></a>11.3 打开&#x2F;关闭端口</h2><p>在真正的生产环境，往往需要将防火墙打开，但如果我们把防火墙打开，那么外部请求数据包就不能跟服务器监听端口通讯。这时，需要打开指定的端口。比如80、22、8080 等。</p><h3 id="firewall-指令"><a href="#firewall-指令" class="headerlink" title="firewall 指令"></a>firewall 指令</h3><p>（1）打开端口：firewall-cmd   –permanent   –add-port&#x3D;端口号&#x2F;协议</p><p>（2）关闭端口：firewall-cmd   –permanent   –remove-port&#x3D;端口号&#x2F;协议</p><p>（3）重新载入，才能生效：firewall-cmd   –reload</p><p>（4）查询端口是否开放：firewall-cmd   –query-port&#x3D;端口号&#x2F;协议</p><p>PS：可以通过 netstat   -anp  |  more 查看端口号&#x2F;协议</p><br><h2 id="114-动态监控进程"><a href="#11-4-动态监控进程" class="headerlink" title="11.4 动态监控进程"></a>11.4 动态监控进程</h2><p>top 与 ps 命令很相似。它们都用来显示正在执行的进程。</p><p>top 与 ps 最大的不同之处，在于 top 在执行段时间可以更新正在运行的的进程</p><p>基本语法：top   [选项]</p><p>常用选项：</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-d  秒数</td><td>指定 top 命令每几秒更新，默认是 3 秒</td></tr><tr><td>-i</td><td>使 top 不显示任何闲置或者僵死进程</td></tr><tr><td>-p</td><td>通过指定监控进程ID来仅仅监控某个进程的状态</td></tr></tbody></table><br><p>交互操作说明：</p><table><thead><tr><th>操作</th><th>功能</th></tr></thead><tbody><tr><td>P</td><td>以CPU使用率排序，默认就是此选项</td></tr><tr><td>M</td><td>以内存的使用率排序</td></tr><tr><td>N</td><td>以PID排序</td></tr><tr><td>q</td><td>退出top</td></tr></tbody></table><br><p>（1）监视特定用户，比如 tom 用户</p><ul><li>top   进入查看进程页面</li><li>u    再输入要查看的用户</li></ul><p>（2）终止指定的进程</p><ul><li>top   进入查看进程页面</li><li>k     再输入要结束的进程 ID 号</li></ul><br><h2 id="115-监控网络信息"><a href="#11-5-监控网络信息" class="headerlink" title="11.5 监控网络信息"></a>11.5 监控网络信息</h2><h3 id="netastat-查看系统网络状态"><a href="#netastat-–-查看系统网络状态" class="headerlink" title="netastat – 查看系统网络状态"></a>netastat – 查看系统网络状态</h3><p>基本语法：netstat   [选项]</p><p>常用选项：</p><p>-an   按一定顺序排列输出</p><p>-p      显示哪一个进程在调用</p><p>eg. 请查看服务名为 sshd 的服务的信息              netstat   -anp  |  grep   sshd</p><br><h1 id="12-rpm-和-yum"><a href="#12-RPM-和-YUM" class="headerlink" title="12 RPM 和 YUM"></a>12 RPM 和 YUM</h1><h2 id="121-rpm-包"><a href="#12-1-rpm-包" class="headerlink" title="12.1 rpm 包"></a>12.1 rpm 包</h2><p>rpm 用于互联网下载包的打包及安装工具，它包含在某些 Linux 分发版中。它生成具有.RPM扩展名的文件</p><p>RPM是 RedHat Package Manager（RedHat 软件包管理工具）的缩写，类似 windows 的setup.exe，这一文件格式名称虽然打上了 RedHat 的标志，但理念是通用的</p><p>Linux 的分发版本都有采用（suse，redhat，centos等）可以算是公认的行业标准了</p><br><h3 id="rpm-包的简单查询指令"><a href="#rpm-包的简单查询指令" class="headerlink" title="rpm 包的简单查询指令"></a>rpm 包的简单查询指令</h3><p>基本语法：rpm   -qa  l  grep   XX                 查询已安装的 rpm 列表</p><p>eg. 查看当前系统是否安装了firefox             rpm   -qa  |  grep   firefox</p><br><h3 id="rpm-包名基本格式"><a href="#rpm-包名基本格式" class="headerlink" title="rpm 包名基本格式"></a>rpm 包名基本格式</h3><p>一个 rpm 包名：firefox-68.10.0-1.el7.centos.x86_64</p><p>名称：firefox</p><p>版本号：68.10.0-1</p><p>适用操作系统：el7.centos.x86_64</p><p>表示 centos7.x 的 64 位系统</p><p>i686、i386 表示 32 位系统，noarch 表示通用</p><br><h3 id="rpm-包的其他查询指令"><a href="#rpm-包的其他查询指令" class="headerlink" title="rpm 包的其他查询指令"></a>rpm 包的其他查询指令</h3><p>rpm   -qa：查询所安装的所有 rpm 软件包</p><p>rpm   -qa  |  more<br>rpm   -qa  |  grep   XXX</p><br><p>rpm   -q    软件包名：查询软件包是否安装</p><p>rpm   -qi   软件包名：查询软件包信息</p><p>rpm   -ql   软件包名：查询软件包中的文件</p><p>rpm   -qf   文件全路径名：查询文件所属的软件包</p><br><h3 id="卸载-rpm-包"><a href="#卸载-rpm-包" class="headerlink" title="卸载 rpm 包"></a>卸载 rpm 包</h3><p>基本语法：rpm   -e   RPM   [包的名称]</p><p>eg. 删除 firefox 软件包           rpm   -e   firefox</p><p><strong>PS：</strong></p><p>（1）如果其它软件包依赖于您要卸载的软件包，卸载时则会产生错误信息</p><p>（2）如果我们就是要删除 foo 这个 rpm 包，可以增加参数  –nodeps，就可以强制删除，但是一般不推荐这样做， 因为依赖于该软件包的程序可能无法运行</p><br><h3 id="安装-rpm-包"><a href="#安装-rpm-包" class="headerlink" title="安装 rpm 包"></a>安装 rpm 包</h3><p>基本语法：rpm   -ivh   [RPM包路径名称]</p><p>说明：</p><p>i &#x3D; intall         安装</p><p>v &#x3D; verbose   提示</p><p>h &#x3D; hash        进度条</p><br><h2 id="122-yum-包"><a href="#12-2-yum-包" class="headerlink" title="12.2 yum 包"></a>12.2 yum 包</h2><p> Yum 是一个 Shell 前端软件包管理器。基于 RPM 包管理，能够从指定的服务器自动<br>下载 RPM 包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包</p><br><h3 id="yum-基本指令"><a href="#yum-基本指令" class="headerlink" title="yum 基本指令"></a>yum 基本指令</h3><p>yum   list  |  grep   xx   [软件列表]          查询 yum 服务器是否有需要安装的软件</p><p>yum   install   XXX                 下载安装指定的 yum 包</p><p>eg. 下载并安装 firefox</p><p>rpm   -e   firefox</p><p>yum   list  |  grep   firefox</p><p>yum   install   firefox</p><br><h1 id="12-shell"><a href="#12-Shell" class="headerlink" title="12 Shell"></a>12 Shell</h1><h2 id="121-shell-脚本"><a href="#12-1-shell-脚本" class="headerlink" title="12.1 shell 脚本"></a>12.1 shell 脚本</h2><p>Shell 是一个命令行解释器，它为用户提供了一个向 Linux 内核发送请求以便运行程序的界面系统级程序，用户可以 用 Shell 来启动、挂起、停止甚至是编写一些程序</p><br><p><strong>脚本格式要求</strong> </p><p>（1）脚本以 #!&#x2F;bin&#x2F;bash 开头</p><p>（2）脚本需要有可执行权限</p><br><p><strong>编写第一个 Shell 脚本</strong></p><p>需求说明：创建一个 Shell 脚本，输出 hello world! </p><p>vim   hello.sh</p><p>#!&#x2F;bin&#x2F;bash</p><p>echo   “hello,world~”</p><br><p><strong>脚本的常用执行方式</strong> </p><p>方式一：(输入脚本的绝对路径或相对路径)</p><p>说明：首先要赋予 helloworld.sh 脚本的 +x 权限， 再执行脚本</p><p>比如 .&#x2F;hello.sh 或者使用绝对路径 &#x2F;root&#x2F;shcode&#x2F;hello.sh</p><p>方式二：(sh + 脚本)</p><p>说明：不用赋予脚本+x 权限，直接执行即可</p><p>比如 sh   hello.sh，也可以使用绝对路径</p><br><h2 id="122-shell-变量"><a href="#12-2-shell-变量" class="headerlink" title="12.2 shell 变量"></a>12.2 shell 变量</h2><p><strong>Shell 变量介绍</strong> </p><p>（1）Linux Shell 中的变量分为，系统变量和用户自定义变量</p><p>（2）系统变量：$HOME、$PWD、$SHELL、$USER 等等，比如：echo   $HOME 等</p><p>（3）显示当前 shell 中所有变量：set</p><br><p><strong>shell 变量的定义</strong> </p><p>基本语法</p><p>（1）定义变量：变量名&#x3D;值</p><p>（2）撤销变量：unset   变量</p><p>（3）声明静态变量：readonly   变量（此时不能 unset）</p><p><strong>PS：shell 里不要打空格</strong></p><br><p><strong>shell 定义变量的规则</strong> </p><p>（1）变量名称可以由字母、数字和下划线组成，但是不能以数字开头</p><p>（2）等号两侧不能有空格</p><p>（3）变量名称一般习惯为大写， 这是一个规范，我们遵守即可</p><br><p><strong>将命令的返回值赋给变量</strong> </p><p>（1） A&#x3D;`date&#96;反引号，运行里面的命令，并把结果返回给变量 A</p><p>（2）A&#x3D;$(date)    等价于反引</p><br><h2 id="123-设置环境变量"><a href="#12-3-设置环境变量" class="headerlink" title="12.3 设置环境变量"></a>12.3 设置环境变量</h2><p><strong>基本步骤：</strong></p><p>（1）export   变量名&#x3D;变量值 （功能描述：将 shell 变量输出为环境变量&#x2F;全局变量）</p><p>（2）source   配置文件           （功能描述：让修改后的配置信息立即生效）</p><p>（3）echo   $变量名                （功能描述：查询环境变量的值）</p><br><p>eg. </p><p>（1）在 &#x2F;etc&#x2F;profile 文件中定义 TOMCAT_HOME 环境变量</p><ul><li><p>vim   &#x2F;etc&#x2F;profile</p></li><li><p>在文件最后加上 export   TOMCAT_HOME&#x3D;&#x2F;etc&#x2F;tomcat</p></li><li><p>source   &#x2F;etc&#x2F;profile               刷新</p></li><li><p>echo   $TOMCAT_HOME       测试</p></li></ul><br><p><strong>shell 语法里的注释</strong></p><p>#                    （单行注释）</p><p>:&lt;&lt;!  内容  !   （多行注释）</p><br><h2 id="124-位置参数变量"><a href="#12-4-位置参数变量" class="headerlink" title="12.4 位置参数变量"></a>12.4 位置参数变量</h2><p>当我们执行一个 shell 脚本时，如果希望获取到命令行的参数信息，就可以使用到位置参数变量</p><p><strong>基本语法：</strong></p><p>$n （n 为数字）</p><p>$0 代表命令本身，$1 - $9 代表第一到第九个参数，十以上的参数需要用大括号包含，如${10}） </p><p>$* （这个变量代表命令行中所有的参数，$* 把所有的参数看成一个整体）</p><p>$@（这个变量也代表命令行中所有的参数，但是 $@ 把每个参数区分对待） </p><p>$#（这个变量代表命令行中所有参数的个数）</p><br><h2 id="125-预定义变量"><a href="#12-5-预定义变量" class="headerlink" title="12.5 预定义变量"></a>12.5 预定义变量</h2><p>就是 shell 设计者事先已经定义好的变量，可以直接在 shell 脚本中使用</p><br><p>$$ （当前进程的进程号（PID））</p><p>$! （后台运行的最后一个进程的进程号（PID））</p><p>$?（最后一次执行的命令的返回状态。如果这个变量的值为 0，证明上一个命令正确执行；否则，证明上一个命令执行不正确）</p><br><h2 id="126-运算符"><a href="#12-6-运算符" class="headerlink" title="12.6 运算符"></a>12.6 运算符</h2><p>（1） “$((运算式))”  或  “$[运算式]”  或  expr  m + n</p><p>（2）注意 expr 运算符间要有空格，如果希望将 expr 的结果赋给某个变量，使用 &#96;&#96;</p><p>（3）expr  m - n</p><p>（4）expr    \*， &#x2F;，% 乘，除，取余</p><br><p><em><em>一、计算（2+4）</em> 3</em>*</p><p>方式一：RES1&#x3D;$(((2+4)*3))</p><p>方式二：RES2&#x3D;$[(2+4)*3]</p><p>方式三：</p><p>TMP&#x3D;`expr   2  +  4&#96;</p><p>RES3&#x3D;`expr   $TMP    \*  3&#96;</p><p><strong>二、计算命令行的两个参数之和</strong></p><p>SUM&#x3D;$(($1+$2))</p><p>echo “SUM&#x3D;”$SUM</p><br><h1 id="13-shell流程控制"><a href="#13-shell流程控制" class="headerlink" title="13 shell流程控制"></a>13 shell流程控制</h1><h2 id="131-条件判断"><a href="#13-1-条件判断" class="headerlink" title="13.1 条件判断"></a>13.1 条件判断</h2><p>基本语法</p><p>[ condition ]（注意 condition 前后要有空格） </p><p>非空返回 true，可使用 $? 验证（0 为 true，非0 为 false）</p><p>[ condition ]   &amp;&amp;   echo   OK   ||   echo   notok          条件满足就执行后面的语句</p><br><p><strong>常用的判断条件：</strong></p><p>（1） &#x3D; 字符串比较 </p><p>（2）两个整数的比较</p><p>-lt     小于</p><p>-le    小于等于     little equal</p><p>-eq   等于</p><p>-gt    大于</p><p>-ge   大于等于</p><p>-ne   不等于 </p><p>（3）按照文件权限进行判断</p><p> -r   有读的权限</p><p>-w   有写的权限</p><p>-x   有执行的权限</p><p>（4）按照文件类型进行判断</p><p>-f    文件存在并且是一个常规的文件</p><p>-e   文件存在</p><p>-d   文件存在并是一个目录</p><br><h2 id="132-if-语句"><a href="#13-2-if-语句" class="headerlink" title="13.2 if 语句"></a>13.2 if 语句</h2><p><strong>基本语法：</strong></p><p>if   [ 条件判断式 ]</p><p>then 代码</p><p>fi</p><p><strong>多分支语法：</strong></p><p>if   [ 条件判断式 ]</p><p>then</p><p>代码</p><p>elif   [条件判断式]</p><p>then</p><p>代码</p><p>fi</p><br><h2 id="133-case-语句"><a href="#13-3-case-语句" class="headerlink" title="13.3 case 语句"></a>13.3 case 语句</h2><p><strong>基本语法：</strong> </p><p>case   $变量名   in</p><p>“值 1”)</p><p>如果变量的值等于值 1，则执行程序 1</p><p>;;</p><p>“值 2”)</p><p>如果变量的值等于值 2，则执行程序 2</p><p>;;</p><p>…省略其他分支…</p><p>*)</p><p>如果变量的值都不是以上的值，则执行此程序</p><p>;;</p><p>esac</p><br><h2 id="134-for-循环"><a href="#13-4-for-循环" class="headerlink" title="13.4 for 循环"></a>13.4 for 循环</h2><p> <strong>基本语法1：</strong> </p><p>for   变量   in   值1   值2   值3… </p><p>do</p><p>程序&#x2F;代码</p><p>done</p><p>eg.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span><br><span class="hljs-keyword">do</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;now = &quot;</span><span class="hljs-variable">$i</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><br><p><strong>基本语法2：</strong> </p><p>for   (( 初始值；循环控制条件；变量变化 ))</p><p>do</p><p>程序&#x2F;代码</p><p>done</p><p><strong>eg. 求 1 - 100 的和</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>SUM=0<br><span class="hljs-keyword">for</span> (( i=<span class="hljs-number">1</span>; i&lt;=<span class="hljs-number">100</span>; i++ ))<br><span class="hljs-keyword">do</span><br>        SUM=$[<span class="hljs-variable">$SUM</span>+<span class="hljs-variable">$i</span>]<br><span class="hljs-keyword">done</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;SUM = &quot;</span><span class="hljs-variable">$SUM</span>                 <br></code></pre></td></tr></table></figure><br><h2 id="135-while-循环"><a href="#13-5-while-循环" class="headerlink" title="13.5 while 循环"></a>13.5 while 循环</h2><p><strong>基本语法：</strong></p><p>while   [ 条件判断式 ]</p><p>do</p><p>程序&#x2F;代码</p><p>done</p><p><strong>eg. 求 1 - 输入值 的和</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>SUM=0<br>i=0<br><br><span class="hljs-keyword">while</span> [ <span class="hljs-variable">$i</span> -le <span class="hljs-variable">$1</span> ]<br><span class="hljs-keyword">do</span><br>        SUM=$[<span class="hljs-variable">$SUM</span>+<span class="hljs-variable">$i</span>]<br>        i=$[<span class="hljs-variable">$i</span>+1]<br><span class="hljs-keyword">done</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;SUM = &quot;</span><span class="hljs-variable">$SUM</span><br><br></code></pre></td></tr></table></figure><br><h2 id="136-read-读取控制台输入"><a href="#13-6-read-读取控制台输入" class="headerlink" title="13.6 read 读取控制台输入"></a>13.6 read 读取控制台输入</h2><p>read（选项）（参数）</p><p>选项：</p><p>-p       指定读取值时的提示符</p><p>-t        指定读取值时等待的时间（秒），如果没有在指定的时间内输入，就不再等待了</p><p>参数</p><p>变量：指定读取值的变量名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#案例 1：读取控制台输入一个 NUM1 值</span><br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;请输入一个数 NUM1=&quot;</span> NUM1<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;你输入的 NUM1=<span class="hljs-variable">$NUM1</span>&quot;</span> <br><br><span class="hljs-comment">#案例 2：读取控制台输入一个 NUM2 值，在 10 秒内输入</span><br><span class="hljs-built_in">read</span> -t 10 -p <span class="hljs-string">&quot;请输入一个数 NUM2=&quot;</span> NUM2<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;你输入的 NUM2=<span class="hljs-variable">$NUM2</span>&quot;</span><br></code></pre></td></tr></table></figure><br><h1 id="14-shell-函数"><a href="#14-shell-函数" class="headerlink" title="14 shell 函数"></a>14 shell 函数</h1><p>shell 编程和其它编程语言一样，有系统函数，也可以自定义函数</p><h2 id="141-系统函数"><a href="#14-1-系统函数" class="headerlink" title="14.1 系统函数"></a>14.1 系统函数</h2><p>basename   – 返回完整路径最后 &#x2F; 的后面部分，常用于获取文件名</p><p>基本语法：</p><p>basename   [pathname]   [suffix] </p><p>basename   [string]   [suffix] </p><p>功能描述：basename 命令会删掉所有的前缀包括最后一个 “ &#x2F; ” 字符，然后将字符串显示出来</p><p>选项： </p><p>suffix 为后缀，如果 suffix 被指定了，basename 会将 pathname 或 string 中的 suffix 去掉</p><br><p>dirname   – 返回完整路径最后 &#x2F; 的前面的部分，常用于返回路径</p><p>基本语法：</p><p>dirname   文件绝对路径</p><p>功能描述：从给定的包含绝对路径的文件名中去除文件名（非目录的部分），然后返回剩下部分</p><br><h2 id="142-自定义函数"><a href="#14-2-自定义函数" class="headerlink" title="14.2 自定义函数"></a>14.2 自定义函数</h2><p>基本语法：</p><p>[ function ]   funname[()] </p><p>{</p><p>​        Action;</p><p>​        [return int;] </p><p>} </p><p>调用函数        funname [值]</p><p>eg. 计算输入的两个数之和   getSum</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment">#定义函数 getSum</span><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">getSum</span></span>() &#123;<br>    SUM=$[<span class="hljs-variable">$n1</span>+<span class="hljs-variable">$n2</span>]<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;和是=<span class="hljs-variable">$SUM</span>&quot;</span> <br>&#125;<br><br><span class="hljs-comment">#输入两个值</span><br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;请输入一个数 n1=&quot;</span> n1<br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;请输入一个数 n2=&quot;</span> n2<br><br><span class="hljs-comment">#调用自定义函数</span><br>getSum <span class="hljs-variable">$n1</span> <span class="hljs-variable">$n2</span><br></code></pre></td></tr></table></figure><br><h2 id="143-综合案例"><a href="#14-3-综合案例" class="headerlink" title="14.3 综合案例"></a>14.3 综合案例</h2><p>（1）每天凌晨 2:30 备份数据库 hspedu 到 &#x2F;data&#x2F;backup&#x2F;db</p><p>（2）备份开始和备份结束能够给出相应的提示信息</p><p>（3）备份后的文件要求以备份时间为文件名，并打包成 .tar.gz 的形式</p><p>（4）在备份的同时，检查是否有 10 天前备份的数据库文件，如果有就将其删除</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#！/bin/bash</span><br><br><span class="hljs-comment">#备份目录</span><br><span class="hljs-attribute">BACKUP</span>=/data/backup/db<br><br><span class="hljs-comment">#当前时间</span><br><span class="hljs-attribute">DATETIME</span>=$(date +%Y-%m-%d_%H%M%S)<br>echo <span class="hljs-variable">$DATETIME</span><br><br><span class="hljs-comment">#数据库的地址</span><br><span class="hljs-attribute">HOST</span>=localhost<br><br><span class="hljs-comment">#数据库用户名</span><br><span class="hljs-attribute">DB_USER</span>=root<br><br><span class="hljs-comment">#数据库密码</span><br><span class="hljs-attribute">DB_PW</span>=hspedu100<br><br><span class="hljs-comment">#备份的数据库名</span><br><span class="hljs-attribute">DATABASE</span>=hspedu<br><br><span class="hljs-comment">#创建备份目录, 如果不存在，就创建</span><br>[ ! -d <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;BACKUP&#125;</span>/<span class="hljs-variable">$&#123;DATETIME&#125;</span>&quot;</span> ] &amp;&amp; mkdir -p <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;BACKUP&#125;</span>/<span class="hljs-variable">$&#123;DATETIME&#125;</span>&quot;</span><br><br><span class="hljs-comment">#备份数据库</span><br>mysqldump -u<span class="hljs-variable">$&#123;DB_USER&#125;</span> -p<span class="hljs-variable">$&#123;DB_PW&#125;</span> <span class="hljs-attribute">--host</span>=<span class="hljs-variable">$&#123;HOST&#125;</span> -q -R --databases <span class="hljs-variable">$&#123;DATABASE&#125;</span> | gzip &gt;<br><span class="hljs-variable">$&#123;BACKUP&#125;</span>/<span class="hljs-variable">$&#123;DATETIME&#125;</span>/<span class="hljs-variable">$DATETIME</span>.sql.gz<br><br><span class="hljs-comment">#将文件处理成 tar.gz</span><br>cd <span class="hljs-variable">$&#123;BACKUP&#125;</span><br>tar -zcvf <span class="hljs-variable">$DATETIME</span>.tar.gz <span class="hljs-variable">$&#123;DATETIME&#125;</span><br><br><span class="hljs-comment">#删除对应的备份目录</span><br>rm -rf <span class="hljs-variable">$&#123;BACKUP&#125;</span>/<span class="hljs-variable">$&#123;DATETIME&#125;</span><br><br><span class="hljs-comment">#删除 10 天前的备份文件</span><br><span class="hljs-built_in">find</span> <span class="hljs-variable">$&#123;BACKUP&#125;</span> -atime +10 -name <span class="hljs-string">&quot;*.tar.gz&quot;</span> -exec rm -rf &#123;&#125; \;<br>echo <span class="hljs-string">&quot;备份数据库<span class="hljs-variable">$&#123;DATABASE&#125;</span> 成功~</span><br></code></pre></td></tr></table></figure><br><p># 每天两点半执行脚本 </p><p>crontab  -e</p><p>30   2   *   *   *   &#x2F;usr&#x2F;sbin&#x2F;mysql_db_backup.sh</p><br><br><h1 id="15-日志管理"><a href="#15-日志管理" class="headerlink" title="15 日志管理"></a>15 日志管理</h1><p><strong>基本介绍：</strong></p><p>日志文件是重要的系统信息文件，其中记录了许多重要的系统事件，包括用户的登录信息、系统的启动信息、系统 的安全信息、邮件相关信息、各种服务相关信息等</p><p>日志对于安全来说也很重要，它记录了系统每天发生的各种事情，通过日志来检查错误发生的原因，或者受到攻击 时攻击者留下的痕迹</p><p>可以这样理解 日志是用来记录重大事件的工具</p><br><h2 id="151-系统常用的日志"><a href="#15-1-系统常用的日志" class="headerlink" title="15.1 系统常用的日志"></a>15.1 系统常用的日志</h2><p>&#x2F;var&#x2F;log&#x2F;    目录就是系统日志文件的保存位置</p><table><thead><tr><th>日志文件</th><th>说明</th></tr></thead><tbody><tr><td>&#x2F;var&#x2F;log&#x2F;boot.log</td><td>系统启动日志</td></tr><tr><td>&#x2F;var&#x2F;log&#x2F;cron</td><td>记录与系统定时任务相关的日志</td></tr><tr><td>&#x2F;var&#x2F;log&#x2F;cups&#x2F;</td><td>记录打印信息的日志</td></tr><tr><td>&#x2F;var&#x2F;log&#x2F;dmesg</td><td>记录了系统在开机时内核自检的信总。也可以使用 dmesg 命令直接查看内核自检信息</td></tr><tr><td>&#x2F;var&#x2F;log&#x2F;btmp</td><td>记录错误登陆的日志。这个文件是二进制文件，不能直接用 Vi 查看，而要使用 lastb 命令查看。[root@localhost  log]#lastb</td></tr><tr><td>&#x2F;var&#x2F;log&#x2F;lastlog</td><td>记录系统中所有用户最后一次的登录时间的日志。这个文件也是二进制文件。要使用 lastlog 命令查看</td></tr><tr><td>&#x2F;var&#x2F;log&#x2F;maillog</td><td>记录邮件信息的日志</td></tr><tr><td>&#x2F;var&#x2F;log&#x2F;message</td><td>记录系统重要消息的日志，这个日志文件中会记录 Linux 系统的绝大多数重要信息。如果系统出现问题，首先要检查的应该就是这个日志文件</td></tr><tr><td>&#x2F;var&#x2F;log&#x2F;secure</td><td>记录验证和授权方面的信息，只要涉及账户和密码的程序都会记录，比如系统的登录、ssh的登录、su切换用户甚至添加用户和修改用户密码都会记录在这个日志文件中</td></tr><tr><td>&#x2F;var&#x2F;log&#x2F;wtmp</td><td>永久记录所有用户的登陆、注销信息，同时记录系统的后动、重启、关机事件。是二进制文件。要使用 last 命令查看</td></tr><tr><td>&#x2F;var&#x2F;run&#x2F;ulmp</td><td>记录当前已经登录的用户的信息。这个文件会随着用户的登录和注销而不断变化，只记录当前登录用户的信息。这个文件不能用 Vi 查看，要使用w、who、users等命令查看</td></tr></tbody></table><br><h2 id="152-日志管理服务-rsyslogd"><a href="#15-2-日志管理服务-rsyslogd" class="headerlink" title="15.2 日志管理服务 rsyslogd"></a>15.2 日志管理服务 rsyslogd</h2><p>CentOS7.6 日志服务是 rsyslogd ， CentOS6.x 日志服务是 syslogd</p><p>rsyslogd 功能更强大。rsyslogd 的使用、日志 文件的格式，和 syslogd 服务是兼容的</p><br><p><strong>查询 Linux 中的 rsyslogd 服务是否启动</strong></p><p>ps   aux   |   grep   “rsyslog”   |   grep   -v   “grep”</p><p><strong>查询 rsyslogd 服务的自启动状态</strong></p><p>systemctl   list-unit-files   |   grep   rsyslog</p><p><strong>配置文件：&#x2F;etc&#x2F;rsyslog.conf</strong></p><p>编辑文件时的格式为：* .*        存放日志文件</p><p>其中第一个 * 代表日志类型，第二个 * 代表日志级别</p><br><p><strong>（1）日志类型分为：</strong></p><p>auth               ##pam 产生的日志</p><p>authpriv        ##ssh、ftp 等登录信息的验证信息</p><p>corn               ##时间任务相关</p><p>kern               ##内核</p><p>lpr                  ##打印</p><p>mail               ##邮件</p><p>mark(syslog)-rsyslog          ##服务内部的信息，时间标识</p><p>news             ##新闻组</p><p>user              ##用户程序产生的相关信息 </p><p>uucp             ##unix   to   nuix   copy 主机之间相关的通信</p><p>local   1-7     ##自定义的日志设备</p><p><strong>（2）日志级别分为：</strong></p><p>debug           ##有调试信息的，日志通信最多</p><p>info               ##一般信息日志，最常用</p><p>notice           ##最具有重要性的普通条件的信息</p><p>warning       ##警告级别</p><p>err                ##错误级别，阻止某个功能或者模块不能正常工作的信息</p><p>crit                ##严重级别，阻止整个系统或者整个软件不能正常工作的信息</p><p>alert             ##需要立刻修改的信息</p><p>emerg          ##内核崩溃等重要信息</p><p>none             ##什么都不记录</p><p>注意：从上到下，级别从低到高，记录信息越来越少</p><br><p>由日志服务 rsyslogd 记录的日志文件，日志文件的格式包含以下 4 列</p><p>（1）事件产生的时间</p><p>（2）产生事件的服务器的主机名  </p><p>（3）产生事件的服务名或程序名</p><p>（4）事件的具体信息（事件的描述）</p><br><p><strong>想要创建一个自定义日志</strong></p><p>（1）在配置文件 &#x2F;etc&#x2F;rsyslog.conf 中添加描述</p><p>​           *.*                                  &#x2F;var&#x2F;log&#x2F;shan.log</p><p>（2）新键 &#x2F;var&#x2F;log&#x2F;shan.log 文件</p><p>（3）重启</p><br><h2 id="153-日志轮换"><a href="#15-3-日志轮换" class="headerlink" title="15.3 日志轮换"></a>15.3 日志轮换</h2><p>日志轮替就是把旧的日志文件移动并改名，同时建立新的空日志文件，当旧日志文件超出保存的范围之后，就会进行删除</p><br><p><strong>日志轮替文件命名</strong></p><p>（1）centos7 使用 logrotate 进行日志轮替管理，要想改变日志轮替文件名字，通过 &#x2F;etc&#x2F;logrotate.conf 配置文件中 “dateext” 参数</p><p>（2）如果配置文件中有 “dateext” 参数，那么日志会用日期来作为日志文件的后缀，例如 “secure-20201010”。这样日志文件名不会重叠，也就不需要日志文件的改名， 只需要指定保存日志个数，删除多余的日志文件即可</p><p>（3）如果配置文件中没有 “dateext” 参数，日志文件就需要进行改名了。</p><p>当第一次进行日志轮替时，当前的 “secure” 日志会自动改名为 “secure.1”，然后新建 “secure” 日志，用来保存新的日志。</p><p>当第二次进行日志轮替时，“secure.1” 会自动改名为 “secure.2”， 当前的 “secure” 日志会自动改名为 “secure.1”，然后也会新建 “secure” 日志，用来 保存新的日志，以此类推</p><br><h2 id="154-logrotate-配置文件"><a href="#15-4-logrotate-配置文件" class="headerlink" title="15.4 logrotate 配置文件"></a>15.4 logrotate 配置文件</h2><p>&#x2F;etc&#x2F;logrotate.conf  配置文件说明：</p><p># rotate log files weekly，每周对日志文件进行一次轮替 </p><p>weekly </p><p># keep 4 weeks worth of backlogs，共保存 4 份日志文件，当建立新的日志文件时，旧的将会被删除</p><p>rotate 4 </p><p># create new (empty) log files after rotating old ones，创建新的空的日志文件，在日志轮替后</p><p>create </p><p># use date as a suffix of the rotated file，使用日期作为日志轮替文件的后缀</p><p>dateext </p><p># uncomment this if you want your log files compressed, 日志文件是否压缩。如果取消注释，则日志会在转储的同时进行压缩 </p><p>#compress</p><p>#RPM packages drop log rotation information into this directory</p><p># 包含 &#x2F;etc&#x2F;logrotate.d&#x2F; 目录中所有的子配置文件。也就是说会把这个目录中所有子配置文件读取进来</p><p>include &#x2F;etc&#x2F;logrotate.d</p><p><strong>#下面是单独设置，优先级更高</strong> </p><p># no packages own wtmp and btmp – we’ll rotate them here </p><p>&#x2F;var&#x2F;log&#x2F;wtmp { </p><p>​        monthly # 每月对日志文件进行一次轮替</p><p>​        create 0664 root utmp # 建立的新日志文件，权限是 0664 ，所有者是 root ，所属组是 utmp 组</p><p>​        minsize 1M   # 日志文件最小轮替大小是 1MB 。也就是日志一定要超过 1MB 才会轮替，否则就算时间达到 一个月，也不进行日志转储</p><p>​        rotate 1         # 仅保留一个日志备份。也就是只有 wtmp 和 wtmp.1 日志保留而已</p><p>}</p><p>&#x2F;var&#x2F;log&#x2F;btmp {</p><p>​        missingok    # 如果日志不存在，则忽略该日志的警告信息</p><p>​        monthly</p><p>​        create 0600 root utmp</p><p>​        rotate 1</p><p>}</p><br><p><strong>参数说明</strong></p><table><thead><tr><th>参数</th><th>参数说明</th></tr></thead><tbody><tr><td>daily</td><td>日志的轮替周期是每天</td></tr><tr><td>weekly</td><td>日志的轮替周期是每周</td></tr><tr><td>monthly</td><td>日志的轮替周期是每月</td></tr><tr><td>rotate 数字</td><td>保留的日志文件的个数。0 指没有备份</td></tr><tr><td>compress</td><td>日志轮替时，旧的日志进行压缩</td></tr><tr><td>create mode owner group</td><td>建立新日志，同时指定新日志的权限与所有者和所属组</td></tr><tr><td>mail address</td><td>当日志轮替时，输出内容通过邮件发送到指定的邮件地址</td></tr><tr><td>missingok</td><td>如果日志不存在，则忽略该日志的警告信息</td></tr><tr><td>notifempty</td><td>如果日志为空文件，则不进行日志轮替</td></tr><tr><td>minsize 大小</td><td>日志轮替的最小值。也就是日志一定要达到这个最小值才会轮替</td></tr><tr><td>size 大小</td><td>日志只有大于指定大小才进行日志轮替，而不是按照时间轮替</td></tr><tr><td>dateext</td><td>使用日期作为日志轮替文件的后缀</td></tr><tr><td>sharedscripts</td><td>在此关键字之后的脚本只执行一次</td></tr><tr><td>prerotate&#x2F;endscript</td><td>在日志轮替之前执行脚本命令</td></tr><tr><td>postrotate&#x2F;endscript</td><td>在日志轮替之后执行脚本命令</td></tr></tbody></table><p><strong>把自己的日志加入日志轮替</strong></p><p>第一种方法是直接在 &#x2F;etc&#x2F;logrotate.conf 配置文件中写入该日志的轮替策略</p><p>第二种方法是在 &#x2F;etc&#x2F;logrotate.d&#x2F; 目录中新建立该日志的轮替文件，在该轮替文件中写入正确的轮替策略，因为该目录中的文件都会被 “include” 到主配置文件中，所以也可以把日志加入轮替</p><p>推荐使用第二种方法，因为系统中需要轮替的日志非常多，如果全都直接写入&#x2F;etc&#x2F;logrotate.conf 配置文件，那么这个文件的可管理性就会非常差，不利于此文件的维护</p><br><p>比如要想给 shan 这个日志以第二种方式配置，就在 &#x2F;etc&#x2F;logrotate.d&#x2F; 目录下创建文件 shan</p><p>&#x2F;var&#x2F;log&#x2F;shan.log</p><p>{</p><p>​        missingok</p><p>​        daily</p><p>​        copytruncate</p><p>​        rotate 7</p><p>​        notifempty</p><p>}</p><p><strong>日志轮替机制原理</strong></p><p>日志轮替之所以可以在指定的时间备份日志，是依赖系统定时任务。在 &#x2F;etc&#x2F;cron.daily&#x2F; 目录，就会发现这个目录中有 logrotate 文件（可执行），logrotate 通过这个文件依赖定时任务执行的</p><br><h2 id="155-查看日志内存"><a href="#15-5-查看日志内存" class="headerlink" title="15.5 查看日志内存"></a>15.5 查看日志内存</h2><p>journalctl   –  可以查看内存日志</p><p><strong>常用指令：</strong></p><p>journalctl                                                                ##查看全部</p><p>journalctl   -n   3                                                    ##查看最新 3 条</p><p>journalctl   –since   19:00   –until   19:10:10    ##查看起始时间到结束时间的日志</p><p>journalctl   -p   err                                                 ##报错日志</p><p>journalctl   -o   verbose                                        ##日志详细内容</p><p>journalctl_PID&#x3D;1245    _COMM&#x3D;sshd                ##查看包含这些参数的日志（在详细日志查看）</p><p>或者 journalctl   |   grep ssh</p><br><p>PS：journalctl 查看的是内存日志，重启清空</p><br><h1 id="16-备份与恢复"><a href="#16-备份与恢复" class="headerlink" title="16 备份与恢复"></a>16 备份与恢复</h1><p>实体机无法做快照，如果系统出现异常或者数据损坏，后果严重， 要重做系统，还会造成数据丢失。</p><p>所以我们可以使用备份和恢复技术</p><p>linux 的备份和恢复很简单，有两种方式： </p><p>（1）把需要的文件（或者分区）用 TAR 打包就行，下次需要恢复的时候，再解压开覆盖即可</p><p>（2）使用 dump 和 restore 命令</p><br><p><strong>安装 dump 和 restore</strong></p><p>如果 linux 上没有 dump 和 restore 指令，需要先按照</p><p>yum   -y   install   dump</p><p>yum   -y   install   restore</p><br><h2 id="161-使用dump-完成备份"><a href="#16-1-使用dump-完成备份" class="headerlink" title="16.1 使用dump 完成备份"></a>16.1 使用dump 完成备份</h2><p>dump 支持分卷和增量备份（所谓增量备份是指备份上次备份后 修改&#x2F;增加过的文件，也称差异备份）</p><p><strong>基本语法：</strong></p><p>dump    [ -cu]    [-123456789]    [ -f &lt;备份后文件名&gt;]    [-T &lt;日期&gt;]    [ 目录或文件系统]</p><p>dump    []-wW</p><p>-c ：创建新的归档文件，并将由一个或多个文件参数所指定的内容写入归档文件的开头</p><p>-0123456789 ：备份的层级。0 为最完整备份，会备份所有文件。若指定 0 以上的层级，则备份至上一次备份以来 修改或新增的文件，到 9 后，可以再次轮替</p><p>-f   &lt;备份后文件名&gt; ：指定备份后文件名</p><p>-j ：调用 bzlib 库压缩备份文件，也就是将备份后的文件压缩成 bz2 格式，让文件更小</p><p>-T   &lt;日期&gt; ：指定开始备份的时间与日期</p><p>-u ：备份完毕后，在&#x2F;etc&#x2F;dumpdares 中记录备份的文件系统，层级，日期与时间等</p><p>-t ：指定文件名，若该文件已存在备份文件中，则列出名称</p><p>-W ：显示需要备份的文件及其最后一次备份的层级，时间 ，日期</p><p>-w ：与-W 类似，但仅显示需要备份的文件</p><br><p><strong>举例：</strong></p><p>（1）将 &#x2F;boot 分区所有内容备份到 &#x2F;opt&#x2F;boot.bak0.bz2 文件中，备份层级为 “0” </p><p>​        dump    -0uj    -f    &#x2F;opt&#x2F;boot.bak0.bz2    &#x2F;boot</p><p>（2）在 &#x2F;boot 目录下增加新文件，备份层级为 “1”（只备份上次使用层次 “0” 备份后发生过改变的数据）</p><p>​        dump    -1uj    -f    &#x2F;opt&#x2F;boot.bak1.bz2    &#x2F;boot</p><p>​        PS：通过 dump 命令在配合 crontab 可以实现无人值守备份</p><br><p><strong>查看备份时间文件</strong></p><p>cat   &#x2F;etc&#x2F;dumpdates</p><br><p><strong>备份文件或者目录</strong></p><p>我们在备份分区时，是可以支持增量备份的</p><p>但是如果备份文件或者目录，不再支持增量备份，即只能使用 0 级别备份</p><p>前面的 -u 指令也不支持，因为不支持层级备份的话，也没有必要记录层级信息</p><br><p>eg. 使用 dump 备份 &#x2F;etc 整个目录</p><p>​    dump   -0j   -f   &#x2F;opt&#x2F;etc.bak.bz2   &#x2F;etc&#x2F;</p><p># 下面这条语句会报错，提示 DUMP: Only level 0 dumps are allowed on a subdirectory</p><p>​    dump   -1j   -f   &#x2F;opt&#x2F;etc.bak.bz2   &#x2F;etc&#x2F;</p><p>PS：如果是重要的备份文件， 比如数据区，建议将文件上传到其它服务器保存</p><br><h2 id="162-使用-restore-完成恢复"><a href="#16-2-使用-restore-完成恢复" class="headerlink" title="16.2 使用 restore 完成恢复"></a>16.2 使用 restore 完成恢复</h2><p>restore 命令用来恢复已备份的文件，可以从 dump 生成的备份文件中恢复原文件</p><p><strong>基本语法：</strong></p><p>restore   [模式选项]   [选项]</p><p>模式有四个， 不能混用，在一次命令中， 只能指定一种</p><p>-C ：使用对比模式，将备份的文件与已存在的文件相互对比</p><p>-i ：使用交互模式，在进行还原操作时，restors 指令将依序询问用户</p><p>-r ：进行还原模式</p><p>-t ：查看模式，看备份文件有哪些文件</p><br><p>选项</p><p>-f   &lt;备份设备&gt;：从指定的文件中读取备份数据，进行还原操作</p><br><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><p>（一）</p><p>分析日志 t.log（访问量），将各个 ip 地址截取，并统计出现次数,并按从大到小排序</p><p>http:&#x2F;&#x2F;<span></span>192.168.200.10&#x2F;index1.html</p><p>http:&#x2F;&#x2F;<span></span>192.168.200.10&#x2F;index2.html</p><p>http:&#x2F;&#x2F;<span></span>192.168.200.20&#x2F;index1.html</p><p>http:&#x2F;&#x2F;<span></span>192.168.200.30&#x2F;index1.html</p><p>http:&#x2F;&#x2F;<span></span>192.168.200.40&#x2F;index1.html</p><p>http:&#x2F;&#x2F;<span></span>192.168.200.30&#x2F;order.html</p><p>http:&#x2F;&#x2F;<span></span>192.168.200.10&#x2F;order.html</p><br><p>先创建文件 t.txt，再将内容复制到文件中</p><p>cat   t.txt   |   cut   -d   ‘&#x2F;‘   -f   3   |   sort   |   uniq   -c   |  sort   -nr</p><p>PS：uniq  -c 是统计相邻行的重复情况，所以要先排序，将相同的 ip 排在一起</p><br><p>（二）</p><p>统计连接到服务器的各个 ip 情况，并按连接数从大到小排序</p><p>netstat  -an  |  grep  ESTABLISHED  |  awk  -F  “ “   ‘{print  $5}’  |  cut  -d  “:”  -f  1 | sort | uniq  -c | sort  -nr</p><br><p>（三）</p><p>统计 ip 访问情况，要求分析 nginx 访问日志（access.log），找出访问页面数量在前 2 位的 ip</p><p>cat   access.log | awk   -F   “ “   ‘{print $1}’  | sort | uniq   -c | sort   -nr | head  -2</p><br><p>（四）忘记了 mysql5.7 数据库的 ROOT 用户的密码，如何找回？</p><p>​        vim   &#x2F;etc&#x2F;my.cnf</p><p>​        添加一句话  skip-grant-tables</p><p>​        service   mysqld   restart</p><p>​        mysql   -u   root   -p    然后输入空密码即可进入</p><p>​        show   databases</p><p>​        use   mysql</p><p>​        update   user   set   authentication_sring&#x3D;password(“shan”)   where   user&#x3D;’root’</p><p>​        flush   privileges;    刷新</p><p>​        exit</p><p>​        再把之前添加在 &#x2F;etc&#x2F;my.cnf 中的一句话注销，再重启 mysqld 即可</p><br><p>（五）</p><p>使用 tcpdump 监听本机，将来自 ip 192.168.200.1，tcp 端口为 22 的数据，保存输出到 tcpdump.log , 用做将来数据分析</p><p>​    tcpdump   -i   ens33   host   192.168.200.1   and   port   22   &gt;&gt;   &#x2F;home&#x2F;tcpdump.log</p><br><p>（六）常用的 Nginx 模块，用来做什么</p><p>rewrite 模块：实现重写功能</p><p>access 模块：来源控制</p><p>ssl 模块：安全加密</p><p>ngx_http_gzip_module：网络传输压缩模块</p><p>ngx_http_proxy_module 模块实现代理</p><p>ngx_http_upstream_module 模块实现定义后端服务器列表</p><p>ngx_cache_purge 实现缓存清除功</p><br><p>（七）如果你是系统管理员，在进行 Linux 系统权限划分时，应考虑哪些因素</p><p>1）首先阐述 Linux 权限的主要对象</p><p>2）根据自己实际经验谈考虑因素</p><p>​    注意权限分离，比如：工作中，Linux 系统权限和数据库权限不要在同一个部门</p><p>​    权限最小原则（即：在满足使用的情况下最少优先）</p><p>​    减少使用 root 用户，尽量用普通用户 + sudo 提权进行日常操作</p><p>​    重要的系统文件，日常建议使用 chattr（change attribute）锁定, 需要操作时再打开</p><p>​    使用 SUID，SGID，Sticky 设置特殊权</p><p>​    可以利用工具，比如 chkrootkit&#x2F;rootkit  hunter 检测 rootkit 脚本</p><p>​    利用工具 Tripwire 检测文件系统完整性</p><br><p>（八）列举 Linux 高级命令，至少 6 个</p><p>​    netstat  &#x2F;&#x2F;网络状态监控               top &#x2F;&#x2F;系统运行状态        lsblk &#x2F;&#x2F;查看硬盘分区</p><p>​    find  ps  -aux  &#x2F;&#x2F;查看运行进程     chkconfig &#x2F;&#x2F;查看服务启动状态     systemctl &#x2F;&#x2F;管理系统服务</p><br><p>（九）Linux 查看内存、io 读写、磁盘存储、端口占用、进程查看命令是什么</p><p>​    top、iotop、df  -  lh、netstat  -  tunlp、ps  -  aux  |  grep</p><p>​    yum   install   iotop       有的指令默认是没有的，需要先安装</p><br><p>（十）使用 Linux 命令计算 t2.txt 第二列的和并输出</p><p>​    张三 40</p><p>​    李四 50</p><p>​    王五 60</p><p>​    cat   t2.txt   |   awk   -F   “ “   ‘{sum+&#x3D;$2}   END    {print   sum}’</p><br><p>（十一）脚本里如何检查一个文件是否存在？并给出提示</p><p>​    if   [ -f   文件名 ]   then   echo   “存在”   else   echo   “不存在”   fi</p><br><p>（十二）用 shell 写一个脚本，对文本 t3.txt 中无序的一列数字排序, 并将总和输出</p><p>​    sort   -nr   t3.txt  |  awk  ‘{sum+&#x3D;$0;  print $0}  END  {print   “和&#x3D;”sum}</p><br><p>（十三）请用指令写出查找当前文件夹（&#x2F;home）下所有的文本文件内容中包含有字符 “ cat” 的文件名称</p><p>​    grep   -r   “cat”   &#x2F;home  |  cut  -d   “:”   -f   1</p><br><p>（十四）统计&#x2F;home 目录下所有文件个数和所有文件总行数的指令</p><p>​    find   &#x2F;home&#x2F;test   -name   “*.*“  |  wc   -l</p><p>​    find   &#x2F;home&#x2F;test   -name   “*.*“  |  xargs   wc  -l</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】CF558_E</title>
      <link href="/post/511433eb.html"/>
      <url>/post/511433eb.html</url>
      
        <content type="html"><![CDATA[<font size="3"><meta name="referrer" content="no-referrer"><p><strong>题目链接：</strong></p><p><a href="https://codeforces.com/contest/558/problem/E">https://codeforces.com/contest/558/problem/E</a></p><br><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p> 给定一个长度为 $n$ 的字符串（由小写英文字母组成），和 $q$ 个操作</p><p><strong>( 1 &lt;&#x3D; n &lt;&#x3D; 1e5、0 &lt;&#x3D; q &lt;&#x3D; 5e4 )</strong></p><p>每个操作 L R K 表示给区间 [L，R] 的字符串排序，K &#x3D; 1为升序，K &#x3D; 0为降序</p><p>要求输出最终的字符串 $s$</p><br><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><strong>举个例子</strong></p><p>假设区间需要从小到大排序，那么先从 a 开始，找到 a 的数量 cnta</p><p>然后把该区间内的原有 a 都删掉，然后从区间左端开始平铺 cnta 个 a </p><p>接着找到 b 的数量 cntb，清空所有的 b，再将 cntb 个 b 平铺在 a 的右边</p><p>重复平铺所有26个字母</p><p>从大到小同理，我们从右边开始平铺就好了。</p><p>差不多就是下图这样</p><p><img src="https://gitee.com/Greedy_firtree/picture/raw/master/blog/image-20230105002011918.png" alt="image-20230105002011918"></p><br><p>所以我们可以用 <strong>26 棵线段树</strong> 维护区间中 <strong>每个字母</strong> 的个数</p><p>对于每个操作，我们只要把这段区间里的字母按 a − z 的顺序依次加入即可</p><ul><li><p>如果是升序，就不停更新加入左端点，右端点即为左端点加这个字母的数量</p></li><li><p>如果是降序，就不停更新加入右端点，左端点即为右端点减这个字母的数量</p></li></ul><p><strong>最后遍历所有线段树输出答案即可</strong></p><br><h2 id="code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>, M = <span class="hljs-number">110</span>, INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MOD = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-comment">// int e[M], ne[M], h[N], w[M], idx;</span><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">char</span> ans[N];    <span class="hljs-comment">// 记录最后的答案</span><br>string s;       <span class="hljs-comment">// 开始时的字符串</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span> &#123;<br>    <span class="hljs-type">int</span> l, r, cnt, tag;<br>&#125; tr[<span class="hljs-number">26</span>][N * <span class="hljs-number">4</span>];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> op)</span> </span>&#123;<br>    tr[op][p].cnt = tr[op][p &lt;&lt; <span class="hljs-number">1</span>].cnt + tr[op][p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].cnt;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(node &amp;c, node &amp;a, node &amp;b)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (c.tag != <span class="hljs-number">-1</span>) &#123;<br>        a.tag = b.tag = c.tag;<br>        a.cnt = a.tag * (a.r - a.l + <span class="hljs-number">1</span>);<br>        b.cnt = b.tag * (b.r - b.l + <span class="hljs-number">1</span>);<br>        c.tag = <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> op)</span> </span>&#123;<br>    <span class="hljs-built_in">pushdown</span>(tr[op][p], tr[op][p &lt;&lt; <span class="hljs-number">1</span>], tr[op][p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> op)</span> </span>&#123;<br>    tr[op][p].l = l, tr[op][p].r = r, tr[op][p].tag = <span class="hljs-number">-1</span>;<br><br>    <span class="hljs-keyword">if</span> (l == r) &#123;<br>        tr[op][p] = &#123;l, r, (s[l] == op + <span class="hljs-string">&#x27;a&#x27;</span>), <span class="hljs-number">-1</span>&#125;;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, mid, op);<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r, op);<br>    <br>    <span class="hljs-built_in">pushup</span>(p, op);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> v, <span class="hljs-type">int</span> op)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (tr[op][p].l &gt;= l &amp;&amp; tr[op][p].r &lt;= r) &#123;<br>        tr[op][p].tag = v;<br>        tr[op][p].cnt = (tr[op][p].r - tr[op][p].l + <span class="hljs-number">1</span>) * v;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-built_in">pushdown</span>(p, op);<br>    <span class="hljs-type">int</span> mid = (tr[op][p].l + tr[op][p].r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (l &lt;= mid)<br>        <span class="hljs-built_in">modify</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, r, v, op);<br>    <span class="hljs-keyword">if</span> (r &gt; mid)<br>        <span class="hljs-built_in">modify</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r, v, op);<br>    <span class="hljs-built_in">pushup</span>(p, op);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> op)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (tr[op][p].l &gt;= l &amp;&amp; tr[op][p].r &lt;= r)<br>        <span class="hljs-keyword">return</span> tr[op][p].cnt;<br>    <br>    <span class="hljs-built_in">pushdown</span>(p, op);<br>    <span class="hljs-type">int</span> mid = (tr[op][p].l + tr[op][p].r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">if</span> (l &lt;= mid)<br>        sum += <span class="hljs-built_in">query</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, r, op);<br>    <span class="hljs-keyword">if</span> (r &gt; mid)<br>        sum += <span class="hljs-built_in">query</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r, op);<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br><br><span class="hljs-comment">// 遍历线段树</span><br><span class="hljs-comment">// 如果该点的权值为1，则答案中该位置为 op + &#x27;a&#x27;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">final</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> op)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (tr[op][p].l == tr[op][p].r) &#123;<br>        <span class="hljs-keyword">if</span> (tr[op][p].cnt == <span class="hljs-number">1</span>)<br>            ans[tr[op][p].l] = op + <span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-built_in">pushdown</span>(p, op);<br>    <span class="hljs-built_in">final</span>(p &lt;&lt; <span class="hljs-number">1</span>, op);<br>    <span class="hljs-built_in">final</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, op);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; s;<br>    s = <span class="hljs-string">&quot; &quot;</span> + s;<br><br>    <span class="hljs-comment">// 建立26棵线段树</span><br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++) &#123;<br>        <span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, i);<br>    &#125;<br><br>    <span class="hljs-type">int</span> l, r, op;<br>    <span class="hljs-keyword">while</span> (m--) &#123;<br>        cin &gt;&gt; l &gt;&gt; r &gt;&gt; op;<br><br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">1</span>) &#123;  <span class="hljs-comment">// 升序</span><br>            <span class="hljs-type">int</span> idx = l, len;<br><br>            <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++) &#123;<br>                len = <span class="hljs-built_in">query</span>(<span class="hljs-number">1</span>, l, r, i);<br><br>                <span class="hljs-keyword">if</span> (len == <span class="hljs-number">0</span>)   <span class="hljs-keyword">continue</span>;   <span class="hljs-comment">// 没出现该字符，跳过</span><br>                <br>                <span class="hljs-built_in">modify</span>(<span class="hljs-number">1</span>, l, r, <span class="hljs-number">0</span>, i);                  <span class="hljs-comment">// 清空</span><br>                <span class="hljs-built_in">modify</span>(<span class="hljs-number">1</span>, idx, idx + len - <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, i);    <span class="hljs-comment">// 向右平铺</span><br>                idx += len;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;          <span class="hljs-comment">// 降序</span><br>            <span class="hljs-type">int</span> idx = r, len;<br>            <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++) &#123;<br>                len = <span class="hljs-built_in">query</span>(<span class="hljs-number">1</span>, l, r, i);<br><br>                <span class="hljs-keyword">if</span> (len == <span class="hljs-number">0</span>)   <span class="hljs-keyword">continue</span>;   <span class="hljs-comment">// 没出现该字符，跳过</span><br><br>                <span class="hljs-built_in">modify</span>(<span class="hljs-number">1</span>, l, r, <span class="hljs-number">0</span>, i);                  <span class="hljs-comment">// 清空</span><br>                <span class="hljs-built_in">modify</span>(<span class="hljs-number">1</span>, idx - len + <span class="hljs-number">1</span>, idx, <span class="hljs-number">1</span>, i);    <span class="hljs-comment">// 向左平铺 </span><br>                idx -= len;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++) <span class="hljs-comment">// 遍历所有线段树</span><br>        <span class="hljs-built_in">final</span>(<span class="hljs-number">1</span>, i);<br><br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) <span class="hljs-comment">// 输出答案</span><br>        cout &lt;&lt; ans[i];<br>    <br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><h2 id="双倍经验"><a href="#双倍经验" class="headerlink" title="双倍经验"></a>双倍经验</h2><p>CF240_F - TorCoder  </p><p><strong>题目链接：</strong></p><p><a href="https://codeforces.com/contest/240/problem/F">https://codeforces.com/contest/240/problem/F</a></p><br><h3 id="题目大意"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h3><p>给定一个长为 n 的由 <strong>小写字母</strong> 组成的字符串，有 m 次操作</p><p>每次操作将 [L，R] 这些位置的字符进行重排，使得到字典序最小的回文字符串</p><p>如果无法操作就不进行</p><p>求 m 次操作后的字符串 $s$</p><br><h3 id="分析"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>跟上面的题目非常像，我们依然用 <strong>26 棵线段树</strong> 维护区间中 <strong>每个字母</strong> 的个数</p><p>不同的是，本题要求我们按照 <strong>字典序最小的回文串</strong> 排序</p><p>首先，我们很容易发现如果区间可以重排为一个回文串则意味下面的任意一种情况：</p><ol><li>所有字母出现的次数都是偶数</li><li>只有一个字母出现的次数是奇数，其余全是偶数</li></ol><p><strong>那么我们怎么保证排列后的回文串是字典序最小的呢？</strong></p><ul><li>只需要把字典序小的字母 放在前面就好了</li></ul><p>具体地说，</p><p>我们先将区间 “清空”</p><p>如果有一个字母出现的是奇数次，将它放到中间</p><p>然后从 ‘a’ 到 ‘z’，每个字母 在区间的两端各放一半，从两边向中间平铺即可，如下图</p><p><img src="https://gitee.com/Greedy_firtree/picture/raw/master/blog/image-20230105201433450.png" alt="image-20230105201433450"></p><p><strong>最后遍历所有线段树输出答案</strong></p><h3 id="code"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 线段树部分 与上题一样的</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>, M = <span class="hljs-number">110</span>, INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MOD = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-comment">// int e[M], ne[M], h[N], w[M], idx;</span><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">char</span> ans[N];    <span class="hljs-comment">// 记录最后的答案</span><br>string s;       <span class="hljs-comment">// 开始时的字符串</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span> &#123;<br>    <span class="hljs-type">int</span> l, r, cnt, tag;<br>&#125; tr[<span class="hljs-number">26</span>][N * <span class="hljs-number">4</span>];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> op)</span> </span>&#123;<br>    tr[op][p].cnt = tr[op][p &lt;&lt; <span class="hljs-number">1</span>].cnt + tr[op][p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].cnt;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(node &amp;c, node &amp;a, node &amp;b)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (c.tag != <span class="hljs-number">-1</span>) &#123;<br>        a.tag = b.tag = c.tag;<br>        a.cnt = a.tag * (a.r - a.l + <span class="hljs-number">1</span>);<br>        b.cnt = b.tag * (b.r - b.l + <span class="hljs-number">1</span>);<br>        c.tag = <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> op)</span> </span>&#123;<br>    <span class="hljs-built_in">pushdown</span>(tr[op][p], tr[op][p &lt;&lt; <span class="hljs-number">1</span>], tr[op][p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> op)</span> </span>&#123;<br>    tr[op][p].l = l, tr[op][p].r = r, tr[op][p].tag = <span class="hljs-number">-1</span>;<br><br>    <span class="hljs-keyword">if</span> (l == r) &#123;<br>        tr[op][p] = &#123;l, r, (s[l] == op + <span class="hljs-string">&#x27;a&#x27;</span>), <span class="hljs-number">-1</span>&#125;;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, mid, op);<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r, op);<br>    <br>    <span class="hljs-built_in">pushup</span>(p, op);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> v, <span class="hljs-type">int</span> op)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (tr[op][p].l &gt;= l &amp;&amp; tr[op][p].r &lt;= r) &#123;<br>        tr[op][p].tag = v;<br>        tr[op][p].cnt = (tr[op][p].r - tr[op][p].l + <span class="hljs-number">1</span>) * v;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-built_in">pushdown</span>(p, op);<br>    <span class="hljs-type">int</span> mid = (tr[op][p].l + tr[op][p].r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (l &lt;= mid)<br>        <span class="hljs-built_in">modify</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, r, v, op);<br>    <span class="hljs-keyword">if</span> (r &gt; mid)<br>        <span class="hljs-built_in">modify</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r, v, op);<br>    <span class="hljs-built_in">pushup</span>(p, op);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> op)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (tr[op][p].l &gt;= l &amp;&amp; tr[op][p].r &lt;= r)<br>        <span class="hljs-keyword">return</span> tr[op][p].cnt;<br>    <br>    <span class="hljs-built_in">pushdown</span>(p, op);<br>    <span class="hljs-type">int</span> mid = (tr[op][p].l + tr[op][p].r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">if</span> (l &lt;= mid)<br>        sum += <span class="hljs-built_in">query</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, r, op);<br>    <span class="hljs-keyword">if</span> (r &gt; mid)<br>        sum += <span class="hljs-built_in">query</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r, op);<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">final</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> op)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (tr[op][p].l == tr[op][p].r) &#123;<br>        <span class="hljs-keyword">if</span> (tr[op][p].cnt == <span class="hljs-number">1</span>)<br>            ans[tr[op][p].l] = op + <span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-built_in">pushdown</span>(p, op);<br>    <span class="hljs-built_in">final</span>(p &lt;&lt; <span class="hljs-number">1</span>, op);<br>    <span class="hljs-built_in">final</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, op);<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; s;<br>    s = <span class="hljs-string">&quot; &quot;</span> + s;<br><br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++) <span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, i);<br><br>    map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; mp;<br>    <span class="hljs-keyword">while</span> (m--) &#123;<br>        <span class="hljs-type">int</span> l, r;<br>        cin &gt;&gt; l &gt;&gt; r;<br><br>        <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++) mp[i] = <span class="hljs-built_in">query</span>(<span class="hljs-number">1</span>, l, r, i);<br><br>        <span class="hljs-type">int</span> odd = <span class="hljs-number">0</span>, idx;<br>        <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (mp[i] &amp; <span class="hljs-number">1</span>)  odd++, idx = i;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (odd &gt; <span class="hljs-number">1</span>)    <span class="hljs-keyword">continue</span>;   <span class="hljs-comment">// 出现奇数次的字母只能有一个</span><br>        <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++) <span class="hljs-built_in">modify</span>(<span class="hljs-number">1</span>, l, r, <span class="hljs-number">0</span>, i);  <span class="hljs-comment">// 清空</span><br><br>        <span class="hljs-keyword">if</span> (odd) &#123;                  <span class="hljs-comment">// 先将出现奇数次的字母放一个到正中间</span><br>            <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>            mp[idx]--, <span class="hljs-built_in">modify</span>(<span class="hljs-number">1</span>, mid, mid, <span class="hljs-number">1</span>, idx);<br>        &#125;<br><br>        <span class="hljs-type">int</span> nl = l, nr = r;         <span class="hljs-comment">// 从两边向中间放，一边放一半</span><br>        <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (mp[i] == <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-built_in">modify</span>(<span class="hljs-number">1</span>, nl, nl + mp[i] / <span class="hljs-number">2</span> - <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, i);<br>            nl += mp[i] / <span class="hljs-number">2</span>;<br>            <span class="hljs-built_in">modify</span>(<span class="hljs-number">1</span>, nr - mp[i] / <span class="hljs-number">2</span> + <span class="hljs-number">1</span>, nr, <span class="hljs-number">1</span>, i);<br>            nr -= mp[i] / <span class="hljs-number">2</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++) <span class="hljs-comment">// 遍历所有线段树</span><br>        <span class="hljs-built_in">final</span>(<span class="hljs-number">1</span>, i);<br><br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) <span class="hljs-comment">// 输出答案</span><br>        cout &lt;&lt; ans[i];<br>    <br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>PS:</strong></p><p>这题要求从文件 <code>input.txt</code> 中读入数据，输出到文件 <code>output.txt</code> 中</p><p>main函数加段代码就行了，具体不懂~</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> ONLINE_JUDGE</span><br>    <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;input.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br>    <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;output.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure></font><br>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】ABC280_F</title>
      <link href="/post/50a3438f.html"/>
      <url>/post/50a3438f.html</url>
      
        <content type="html"><![CDATA[<font size="3"><meta name="referrer" content="no-referrer"><p><strong>题目链接：</strong></p><p><a href="https://atcoder.jp/contests/abc280/tasks/abc280_f">https://atcoder.jp/contests/abc280/tasks/abc280_f</a></p><br><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>对于 n 个点，m 条边的有向图 G </p><p>有 a → b 的长为 c (c ≥ 0) 的边，且有 b → a 的长为 −c 的边</p><p>对于 q 次询问，每次询问两点之间的最长距离</p><p>如果不可能到达输出 “nan”，如果距离无限大输出 “inf”</p><p>$$n,m,k&lt;&#x3D;10^5$$</p><br><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><strong>（1）对于不可能到达的情况</strong></p><p>我们可以直接用并查集维护连通性</p><p>若两个点不在同一个连通分量，则说明他们不连通，输出 “nan”</p><br><p><strong>（2）对于距离无限大的情况</strong></p><p>显然，当连通块内存在正环时，连通块内的任何两个点之间的距离都是无穷大</p><p>（绕着正环一直走）</p><p><strong>寻找正环的方式：</strong></p><p>我们从连通块中任意选择一个点开始 bfs，</p><p>若到达某一点的距离不唯一，则说明存在正权环，输出“inf”</p><p><strong>为什么距离不唯一就存在正环？</strong></p><p><img src="https://gitee.com/Greedy_firtree/picture/raw/master/blog/image-20230102221748726.png" alt="image-20230102221748726"></p><p>如上图，从节点1开始 bfs，到达节点 4 的距离有两个</p><ul><li>dis1 &#x3D; w1 + w2</li><li>dis2 &#x3D; w3 + w4</li></ul><p>我们假设dis1 &gt; dis2，即 w1 + w2 &gt; w3 + w4</p><p>则按照题意，节点1 -&gt; 节点2 -&gt; 节点4 -&gt; 节点3 -&gt; 节点1  </p><p>&#x3D; w1 + w2 - w4 - w3 </p><p>&#x3D; dis1 - dis2&gt; 0</p><p>即存在正环</p><br><p><strong>（3）对于距离有限的情况</strong></p><p>如果以上两种情况都不是，则连通分量内的任意两点联通且距离唯一。</p><p>我们随意找到连通块内的一个点 rt，预处理出所有的点到 rt 的距离，记作 dis[]</p><p>则点 x 和点 y 之间的距离可以表示为 <strong>dis[y] - dis[x]</strong></p><br><p>我们发现（3）中的dis数组可以在 bfs 判断有无正环时得到</p><h2 id="code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>, M = N * <span class="hljs-number">2</span>, INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MOD = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-type">int</span> e[M], ne[M], h[N], w[M], idx;<br><span class="hljs-type">int</span> n, m, k, p[N], dis[N];<br><span class="hljs-type">bool</span> lp[N], vis[N]; <span class="hljs-comment">// lp[i] - 是否存在正环</span><br><br><span class="hljs-function">il <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span> </span>&#123;<br>    e[idx] = b, ne[idx] = h[a], w[idx] = c, h[a] = idx++;<br>&#125;<br><br><span class="hljs-function">il <span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (p[x] != x)  p[x] = <span class="hljs-built_in">find</span>(p[x]);<br>    <span class="hljs-keyword">return</span> p[x];<br>&#125;<br><br><span class="hljs-function">il <span class="hljs-type">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-type">int</span> s)</span> </span>&#123;<br>    vis[s] = <span class="hljs-literal">true</span>, dis[s] = <span class="hljs-number">0</span>;<br><br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    q.<span class="hljs-built_in">push</span>(s);<br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>()) &#123;<br>        <span class="hljs-type">int</span> t = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br><br>        <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = h[t]; ~i; i = ne[i]) &#123;<br>            <span class="hljs-type">int</span> j = e[i];<br>            <span class="hljs-keyword">if</span> (!vis[j]) &#123;<br>                vis[j] = <span class="hljs-literal">true</span>;<br>                dis[j] = dis[t] + w[i];<br>                q.<span class="hljs-built_in">push</span>(j);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (dis[t] + w[i] != dis[j]) &#123;<br>                lp[<span class="hljs-built_in">find</span>(s)] = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;<br><br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-built_in">sizeof</span>(h));<br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n + <span class="hljs-number">10</span>; i++) &#123;<br>        dis[i] = INF;<br>        p[i] = i;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        <span class="hljs-type">int</span> a, b, c;<br>        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;<br><br>        <span class="hljs-built_in">add</span>(a, b, c), <span class="hljs-built_in">add</span>(b, a, -c);<br><br>        <span class="hljs-type">int</span> fa = <span class="hljs-built_in">find</span>(a), fb = <span class="hljs-built_in">find</span>(b);<br>        <span class="hljs-keyword">if</span> (fa != fb)   p[fa] = fb;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-type">int</span> tmp = <span class="hljs-built_in">find</span>(i);<br>        <span class="hljs-keyword">if</span> (vis[tmp])   <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">bfs</span>(tmp);<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (k--) &#123;<br>        <span class="hljs-type">int</span> x, y;   cin &gt;&gt; x &gt;&gt; y;<br>        <br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">find</span>(x) != <span class="hljs-built_in">find</span>(y))<br>            cout &lt;&lt; <span class="hljs-string">&quot;nan&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (lp[<span class="hljs-built_in">find</span>(x)])<br>            cout &lt;&lt; <span class="hljs-string">&quot;inf&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">else</span><br>            cout &lt;&lt; dis[y] - dis[x] &lt;&lt; endl; <br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure></font><br>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 题解 </tag>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java】创建对象时类的调用顺序</title>
      <link href="/post/cc4f59b0.html"/>
      <url>/post/cc4f59b0.html</url>
      
        <content type="html"><![CDATA[<font size="3"><meta name="referrer" content="no-referrer"><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>在Java中，使用 { } 括起来的代码被称为代码块（Code block）</p><br><p>又称作初始化块，属于类中的成员，不需要通过对象名或者类名显式调用，而是在加载类的时候，隐式的被调用。</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>根据其位置和声明的不同，可以分为：</p><ul><li>普通（局部）代码块</li><li>同步代码块</li><li>静态代码块</li><li>构造（实例）代码块</li></ul><h3 id="普通局部代码块"><a href="#普通-局部-代码块" class="headerlink" title="普通(局部)代码块"></a>普通(局部)代码块</h3><p>在类的方法体中出现，可以限定变量生命周期，及早释放，提高内存利用率</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 局部代码块</span><br>        &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>        &#125;<br>        <span class="hljs-comment">// 局部代码块中声明的变量在代码块外部访问不到！</span><br>        <span class="hljs-comment">// System.out.println(n);</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="同步代码块"><a href="#同步代码块" class="headerlink" title="同步代码块"></a>同步代码块</h3><p>同步代码块指的是被Java中Synchronized关键词修饰的代码块</p><p>在Java中，Synchronized关键词不仅仅可以用来修饰代码块，与此同时也可以用来修饰方法，是一种线程同步机制</p><p>被Synchronized关键词修饰的代码块会被加上内置锁</p><br><h3 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h3><p>直接放在类下的代码块，由static修饰的就是静态代码块。</p><p><strong><font color="#006eb1">静态代码块只能调用静态成员</font></strong></p><br><h4 id="静态代码块的形式"><a href="#静态代码块的形式" class="headerlink" title="静态代码块的形式"></a>静态代码块的形式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-comment">// 内容</span><br>        System.out.println(<span class="hljs-string">&quot;执行静态代码块...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><h4 id="调用时机"><a href="#调用时机" class="headerlink" title="调用时机"></a>调用时机</h4><p><font color="#006eb1">与类的加载一起执行，并且仅执行一次</font></p><p><strong>那么，类在什么时候被加载？</strong></p><ol><li>创建对象实例时</li><li>创建子类对象时，其父类也会被加载</li><li>使用类的静态成员时</li></ol><p><strong>如果一个类中有多个静态代码块，会按照书写顺序依次执行</strong></p><br><h3 id="构造代码块"><a href="#构造代码块" class="headerlink" title="构造代码块"></a>构造代码块</h3><p>直接放在类下的代码块，不加任何的修饰符</p><p><strong><font color="#006eb1">构造代码块可以调用任意成员</font></strong></p><br><h4 id="构造代码块的形式"><a href="#构造代码块的形式" class="headerlink" title="构造代码块的形式"></a>构造代码块的形式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>    &#123;<br>        <span class="hljs-comment">// 内容</span><br>        System.out.println(<span class="hljs-string">&quot;执行构造代码块...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><h4 id="调用时机"><a href="#调用时机-1" class="headerlink" title="调用时机"></a>调用时机</h4><p>与对象初始化一起加载，每次调用构造方法（即创建对象）都会执行，<strong>且优先度高于构造方法</strong></p><p>我们可以把它理解为另一种构造器或者说是对构造器的补充。</p><p>比如，当多个构造器都有相同的部分时，我们可以把相同的部分抽取到代码块中。</p><br><p>需要注意的是：</p><p><strong>如果仅使用类的静态成员，构造代码块是不会执行的</strong></p><p>因为构造代码块必须在创建对象时被调用，而使用类的静态成员并不需要创建对象</p><br><h2 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h2><p>根据是否加修饰符【static】可以把类下的代码块分为<strong>静态代码块和构造代码块</strong></p><br><p>在Java中</p><p><font color="#006db0">静态代码块、构造代码块和构造函数的执行顺序是一个笔试的考点</font></p><p>这篇文章主要就是来介绍它们之间的执行顺序</p><h2 id="在单纯的一个类中"><a href="#在单纯的一个类中" class="headerlink" title="在单纯的一个类中"></a>在单纯的一个类中</h2><p><strong>创建一个对象时的调用顺序：</strong></p><ol><li>调用静态代码块和静态属性初始化（优先级一样，存在多个时按定义顺序调用）</li><li>调用构造代码块和普通属性初始化（优先级一样，存在多个时按定义顺序调用）</li><li>调用构造方法（构造器）</li></ol><br><p><strong>简而言之：</strong></p><p><font color="#006db0">静态代码块 &gt; 构造代码块 &gt; 构造器</font></p><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test1_1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">A</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-comment">// 静态属性的初始化</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> getNum1();<br><br>    <span class="hljs-comment">// 静态代码块</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;执行静态代码块1....&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;执行静态代码块2....&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 普通属性的初始化</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> getNum2();<br><br>    <span class="hljs-comment">// 构造代码块</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;执行构造代码块2....&quot;</span>);<br>    &#125;<br><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;执行构造代码块1....&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">A</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;A() 构造器被调用...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getNum1</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;执行静态属性的初始化....&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">100</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getNum2</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;执行普通属性的初始化....&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">200</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">程序的执行结果：</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">执行静态属性的初始化....</span><br><span class="hljs-comment">执行静态代码块1....</span><br><span class="hljs-comment">执行静态代码块2....</span><br><span class="hljs-comment">执行普通属性的初始化....</span><br><span class="hljs-comment">执行构造代码块2....</span><br><span class="hljs-comment">执行构造代码块1....</span><br><span class="hljs-comment">A() 构造器被调用...</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><br><h2 id="在有继承关系的类中"><a href="#在有继承关系的类中" class="headerlink" title="在有继承关系的类中"></a>在有继承关系的类中</h2><p><strong>先不考虑静态构造器和静态属性初始化</strong></p><p>我们可以把子类的构造函数看作是</p><ul><li>supper()– 调用父类的构造器</li><li>调用本类的构造代码块</li><li>执行构造器</li></ul><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test1_1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">B</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;执行父类的构造代码块....&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">A</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>        <span class="hljs-comment">// 调用构造代码块</span><br>        System.out.println(<span class="hljs-string">&quot;父类的 A() 构造器被调用....&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span> &#123;<br><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;执行子类的构造代码块....&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">B</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>        <span class="hljs-comment">// 调用构造代码块</span><br>        System.out.println(<span class="hljs-string">&quot;子类的 B() 构造器被调用...&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">程序的执行结果：</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">执行父类的构造代码块....</span><br><span class="hljs-comment">父类的 A() 构造器被调用....</span><br><span class="hljs-comment">执行子类的构造代码块....</span><br><span class="hljs-comment">子类的 B() 构造器被调用...</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><br><p>如上规律是我们不考虑静态构造器和静态属性初始化</p><p><strong>我们知道在创建一个对象时的步骤是：</strong></p><ol><li>加载类，先加载父类，再加载子类</li><li>创建对象</li></ol><p>所以我们就会先在加载类时执行静态代码块和静态属性初始化（先父类再子类）</p><p><font color="#006eb1">因此静态构造器和静态属性初始化则总是最早发生</font></p><br><p>综上所述</p><p><strong>创建一个带有继承关系的对象时的调用顺序：</strong></p><ol><li>父类的静态代码块和静态属性初始化（优先级一样，按定义顺序调用）</li><li>子类的静态代码块和静态属性初始化（优先级一样，按定义顺序调用）</li><li>父类的构造代码块和普通属性初始化（优先级一样，按定义顺序调用）</li><li>父类的构造器</li><li>子类的构造代码块和普通属性初始化（优先级一样，按定义顺序调用）</li><li>子类的构造器</li></ol><br><p><strong>简而言之：</strong></p><p><font color="#006db0">父静态代码块 &gt; 子静态代码块 &gt; 父构造代码块 &gt; 父构造器 &gt; 子构造代码块 &gt; 子构造器</font></p><p><strong>示例：</strong></p><p><img src="https://gitee.com/Greedy_firtree/picture/raw/master/blog/image-20221223134333437.png" alt="image-20221223134333437"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">程序的执行结果：</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">执行父类的静态属性初始化....</span><br><span class="hljs-comment">执行父类的静态代码块....</span><br><span class="hljs-comment">执行子类的静态属性初始化....</span><br><span class="hljs-comment">执行子类的静态代码块....</span><br><span class="hljs-comment">执行父类的普通属性初始化....</span><br><span class="hljs-comment">执行父类的构造代码块....</span><br><span class="hljs-comment">父类的 A() 构造器被调用....</span><br><span class="hljs-comment">执行子类的普通属性初始化....</span><br><span class="hljs-comment">执行子类的构造代码块....</span><br><span class="hljs-comment">子类的 B() 构造器被调用...</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><br><p><strong>需要注意的是，因为类仅加载一次</strong></p><p><strong><font color="#0089cf">所以当第二次创建该类的对象时，第1 - 2步（即静态代码块和静态属性初始化）就不再进行</font></strong></p><p>如下面的示例，第二次创建的tmp对象就不再执行静态代码块和静态属性初始化</p><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 若上图的主方法改为</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test1_1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">B</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>        System.out.println(<span class="hljs-string">&quot;===============================&quot;</span>);<br>        <span class="hljs-type">B</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">程序的执行结果：</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">执行父类的静态属性初始化....</span><br><span class="hljs-comment">执行父类的静态代码块....</span><br><span class="hljs-comment">执行子类的静态属性初始化....</span><br><span class="hljs-comment">执行子类的静态代码块....</span><br><span class="hljs-comment">执行父类的普通属性初始化....</span><br><span class="hljs-comment">执行父类的构造代码块....</span><br><span class="hljs-comment">父类的 A() 构造器被调用....</span><br><span class="hljs-comment">执行子类的普通属性初始化....</span><br><span class="hljs-comment">执行子类的构造代码块....</span><br><span class="hljs-comment">子类的 B() 构造器被调用...</span><br><span class="hljs-comment">===============================</span><br><span class="hljs-comment">执行父类的普通属性初始化....</span><br><span class="hljs-comment">执行父类的构造代码块....</span><br><span class="hljs-comment">父类的 A() 构造器被调用....</span><br><span class="hljs-comment">执行子类的普通属性初始化....</span><br><span class="hljs-comment">执行子类的构造代码块....</span><br><span class="hljs-comment">子类的 B() 构造器被调用...</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><br><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p><img src="https://gitee.com/Greedy_firtree/picture/raw/master/blog/image-20221223142852604.png" alt="image-20221223142852604"></p><br><p>输出的结果应该是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">静态成员sam初始化<br><span class="hljs-keyword">static</span>块被执行<br>sam1成员初始化<br>test1_1的默认无参构造器被调用<br></code></pre></td></tr></table></figure></font><br>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java类 </tag>
            
            <tag> 代码块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【ACM】网络流-最小割</title>
      <link href="/post/bacb613e.html"/>
      <url>/post/bacb613e.html</url>
      
        <content type="html"><![CDATA[<font size="3"><meta name="referrer" content="no-referrer"><h2 id="最小割"><a href="#最小割" class="headerlink" title="最小割"></a>最小割</h2><p>最小割与最大流问题具有等价性。</p><p>最大流 - 最小割定理保证最大流的流量与最小割的容量相等。</p><p>利用这一性质，我们可以将最小割问题规约到最大流问题，用 EK 算法或者 Dinic 算法来寻找最小割。</p><br><p><strong>首先定义S-T Cut：</strong></p><ul><li><p>将所有的节点分成两个集合，起点 s 属于集合 S，终点 t 属于集合 T。</p></li><li><p>集合 S 和集合 T 的并集是整个节点</p></li></ul><br><p>下图就是一个 S-T Cut</p><p><img src="https://gitee.com/Greedy_firtree/picture/raw/master/blog/image-20230530105236436.png" alt="image-20230530105236436"></p><p>我们可以这样理解割的容量：</p><p>割断从集合 S 流向集合 T 的管道，即上图中的</p><p>$$（v_1-&gt;v_3，v_1-&gt;v_4，v_2-&gt;v_4）$$</p><p>容量就是所有这些管道的容量之和</p><p><strong>上图S-T Cut的容量为 2 + 2 + 2 &#x3D; 6</strong></p><p><img src="https://gitee.com/Greedy_firtree/picture/raw/master/blog/image-20221210120417218.png" alt="image-20221210120417218"></p><p>而这个S-T Cut 的容量就是2 + 1 &#x3D; 3</p><p><strong>最小割就是一个最小容量的 S-T Cut</strong></p><p>也就是我们用最小的成本来截断从集合 S 流向集合 T 的水流。</p><p><strong>注意：最小割不一定唯一，比如下图两种 S-T Cut 的容量都是3。</strong></p><p><img src="https://gitee.com/Greedy_firtree/picture/raw/master/blog/image-20221210120709846.png" alt="image-20221210120709846"></p><br><h2 id="最大流-最小割定理"><a href="#最大流-最小割定理" class="headerlink" title="最大流 - 最小割定理"></a>最大流 - 最小割定理</h2><p>对于一个网络流问题：</p><p><font size="4" color="#004a97">最大流的流量 &#x3D; 最小割的容量</font></p><p><img src="https://gitee.com/Greedy_firtree/picture/raw/master/blog/image-20221210121007819.png" alt="image-20221210121007819"></p><p>将最小割转化成最大流问题：</p><p>1、用任意方式得到最大流问题的残留网络</p><p>2、去掉残留网中的反向边</p><p>3、在最终残留网中，从起点出发，找到所有能达到的点，这些节点作为集合S，剩下的点作为集合T。</p><p>4、此时我们得到了最小割</p><br><h2 id="例题-网络战争"><a href="#例题-网络战争" class="headerlink" title="例题-网络战争"></a>例题-网络战争</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给出一个带权无向图 G &#x3D; (V, E)，每条边 <em>e</em> 有一个权 We</p><p>求将点 s 和点 t 分开的一个边割集 C，使得该割集的平均边权最小，即最小化：</p><p>$$\frac{\displaystyle\sum_{e\in C} w_e}{|C|}$$</p><p><strong>注意：</strong> </p><p>边割集的定义与最小割中的割边的集合不同</p><p>在本题中，一个边割集是指：将这些边删去之后，s 与 t 不再连通</p><br><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>第一行包含四个整数 n，m，s，t，其中 n，m 分别表示无向图的点数、边数</p><p>接下来 m 行，每行包含三个整数 a，b，w，表示点 a 和 b 之间存在一条无向边，边权为 w</p><p>点的编号从 1 到 n</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>输出一个实数，表示将点 s 和点 t 分开的边割集的最小平均边权</p><p>结果保留两位小数</p><br><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><p><strong>输入样例：</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">6 </span><span class="hljs-number">8</span> <span class="hljs-number">1</span> <span class="hljs-number">6</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">4</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">5</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">4</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">5</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">5 </span><span class="hljs-number">6</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">6</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2</span>.<span class="hljs-number">00</span><br></code></pre></td></tr></table></figure><br><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p><strong>根据01分数规划，我们可以进行转化：</strong></p><p>$$\frac{\sum W_e}{|C|}\ \ &lt;\ \ \lambda$$</p><p>等价于</p><p>$$\sum W_e\ \ &lt;\ \ \lambda * |C|$$</p><p>等价于</p><p>$$\sum W_e-\lambda * |C|\ \ &lt;\ \ 0$$</p><p>即</p><p>$$\sum(W_e-\lambda)\ \ &lt;\ \ 0$$</p><p>所以</p><p><img src="https://gitee.com/Greedy_firtree/picture/raw/master/blog/image-20221215163931649.png" alt="image-20221215163931649"></p><p><font color="#2063c0">这个性质具有二段性，可以二分</font></p><br><p>那么式子的左边该怎么得到呢？</p><p>首先我们可以建一个新图，新图上每条边的边权是原图的$W_e-\lambda$</p><p>即 $W_e’&#x3D;W_e-\lambda$</p><br><p><img src="https://gitee.com/Greedy_firtree/picture/raw/master/blog/image-20221215170319645.png" alt="image-20221215170319645"></p><p><strong>我们注意到本题定义的割集并不是最小割中的割集</strong></p><p>如上图所示：</p><ul><li>最小割定义的割集是所有的绿色边</li><li>而本题定义的割集则又额外加了蓝色的边</li></ul><p>因为将绿色边删去之后，s 与 t 已经不再连通，此时再加上蓝色边仍然不连通</p><br><p>所以我们有以下结论：</p><ul><li>当 $W_e’&lt;0$，该边必选</li></ul><p>因为当前的边权小于零，一定会使最后的答案更小（即更优）</p><ul><li><p>对于无向边，添加双向边即可</p></li><li><p>在去掉权值小于零的边以后，就不需要再加额外的边，直接求最小割就是最终的答案</p></li></ul><p>因为额外的边只会令结果更大（而我们要求最小化结果）</p><br><p><strong>综上，本题的思路就是：</strong></p><ol><li>二分</li><li>在当前的 mid 建图</li><li>若边权（$W_e-mid$）小于零，则直接加到答案上</li><li>求最小割</li></ol><p><font color="#1a5cbe"><strong>另外本题的流量并不都是整数，所以需要用double</strong></font></p><br><h3 id="code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>, M = N * <span class="hljs-number">2</span>, INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MOD = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">double</span> eps = <span class="hljs-number">1e-8</span>;<br><span class="hljs-type">int</span> e[M], ne[M], tw[N], h[N], idx;<br><span class="hljs-type">double</span> w[N];<br><span class="hljs-type">int</span> n, m, S, T, cur[N], d[N];<br><br><span class="hljs-function">il <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span> </span>&#123;<br>    e[idx] = b, tw[idx] = c, ne[idx] = h[a], h[a] = idx++;<br>    e[idx] = a, tw[idx] = <span class="hljs-number">0</span>, ne[idx] = h[b], h[b] = idx++;<br>&#125;<br><br><span class="hljs-function">il <span class="hljs-type">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(d, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> d);<br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    q.<span class="hljs-built_in">push</span>(S), d[S] = <span class="hljs-number">0</span>, cur[S] = h[S];<br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>()) &#123;<br>        <span class="hljs-type">int</span> t = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[t]; ~i; i = ne[i]) &#123;<br>            <span class="hljs-type">int</span> j = e[i];<br>            <span class="hljs-keyword">if</span> (d[j] == <span class="hljs-number">-1</span> &amp;&amp; w[i]) &#123;<br>                d[j] = d[t] + <span class="hljs-number">1</span>;<br>                cur[j] = h[j];<br>                <span class="hljs-keyword">if</span> (j == T) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                q.<span class="hljs-built_in">push</span>(j);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">double</span> limit)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (u == T) <span class="hljs-keyword">return</span> limit;<br>    <span class="hljs-type">double</span> flow = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = cur[u]; ~i &amp;&amp; flow &lt; limit; i = ne[i]) &#123;<br>        cur[u] = i;<br>        <span class="hljs-type">int</span> ver = e[i];<br>        <span class="hljs-keyword">if</span> (d[ver] == d[u] + <span class="hljs-number">1</span> &amp;&amp; w[i] &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-type">double</span> t = <span class="hljs-built_in">find</span>(ver, <span class="hljs-built_in">min</span>(w[i], limit - flow)); <br>            <span class="hljs-keyword">if</span> (!t) d[ver] = <span class="hljs-number">-1</span>;<br>            w[i] -= t, w[i ^ <span class="hljs-number">1</span>] += t, flow += t;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (flow == <span class="hljs-number">0</span>)  d[u] = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> flow;<br>&#125;<br><br><span class="hljs-function">il <span class="hljs-type">double</span> <span class="hljs-title">dinic</span><span class="hljs-params">(<span class="hljs-type">double</span> mid)</span> </span>&#123;<br>    <span class="hljs-type">double</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; idx; i += <span class="hljs-number">2</span>)<br>        <span class="hljs-keyword">if</span> (tw[i] &lt;= mid) &#123;<br>            res += tw[i] - mid;      <span class="hljs-comment">// 此时边权 wi - mid &lt; 0，加上更优</span><br>            w[i] = w[i ^ <span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span>    w[i] = w[i ^ <span class="hljs-number">1</span>] = tw[i] - mid;<br>    <br>    <span class="hljs-type">double</span> r = <span class="hljs-number">0</span>, flow;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">bfs</span>()) &#123;<br>        <span class="hljs-keyword">while</span> (flow = <span class="hljs-built_in">find</span>(S, INF))<br>            r += flow;<br>    &#125;<br>    <span class="hljs-keyword">return</span> r + res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld%lld%lld&quot;</span>, &amp;n, &amp;m, &amp;S, &amp;T);<br>    <br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        <span class="hljs-type">int</span> a, b, c;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld%lld&quot;</span>, &amp;a, &amp;b, &amp;c);<br>        <span class="hljs-built_in">add</span>(a, b, c);<span class="hljs-comment">// 此处存边权</span><br>    &#125;<br><br>    <span class="hljs-comment">// 二分</span><br>    <span class="hljs-type">double</span> l = <span class="hljs-number">0</span>, r = <span class="hljs-number">1e7</span>;<br>    <span class="hljs-keyword">while</span> (r - l &gt; eps) &#123;<br>        <span class="hljs-type">double</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">dinic</span>(mid) &lt; <span class="hljs-number">0</span>)r = mid;<br>        <span class="hljs-keyword">else</span>l = mid;<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2lf\n&quot;</span>, r);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure></font><br>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 网络流 </tag>
            
            <tag> 最小割 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】星际转移问题</title>
      <link href="/post/7e22abfa.html"/>
      <url>/post/7e22abfa.html</url>
      
        <content type="html"><![CDATA[<font size="3"><meta name="referrer" content="no-referrer"><p>题目链接：<a href="https://www.luogu.com.cn/problem/P2754">https://www.luogu.com.cn/problem/P2754</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>由于人类对自然资源的消耗，人们意识到大约在 2300 年之后，地球就不能再居住了。于是在月球上建立了新的绿地，以便在需要时移民。令人意想不到的是，2177 年冬由于未知的原因，地球环境发生了连锁崩溃，人类必须在最短的时间内迁往月球。</p><p>现有 $n$ 个太空站位于地球与月球之间，且有 $m$ 艘公共交通太空船在其间来回穿梭。每个太空站可容纳无限多的人，而太空船的容量是有限的，第 $i$ 艘太空船只可容纳  $r_i$ 个人。每艘太空船将周期性地停靠一系列的太空站，例如 (1,3,4) 表示该太空船将周期性地停靠太空站 134134134… 每一艘太空船从一个太空站驶往任一太空站耗时均为 1。人们只能在太空船停靠太空站(或月球、地球)时上、下船。</p><p>初始时所有人全在地球上，太空船全在初始站。试设计一个算法，找出让所有人尽快地全部转移到月球上的运输方案。</p><br><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><strong>首先我们判断是否有解：</strong></p><p>其实就是判断地球和月球之间是否连通，用并查集维护即可</p><p>具体地：</p><p>将一艘飞船可以到达的所有星球并查集连起来，最后如果地球和月球无法连接，则无解</p><br><p><strong>若有解：</strong></p><p>枚举答案 + 最大流判定</p><p>因为有距离（天数）的限制，我们使用分层图，第 i 层表示第 i 天</p><p>以站点为点，太空船为边，人为流量</p><br><p><strong>建图：</strong></p><p>每一层图都有包括地球和月球在内的 n + 2 个点</p><p>有三类边：</p><ol><li>源点和汇点<ul><li>从源点向第0层(即第0天) 的0号点(即地球) 连一条容量为 k 的边，表示一开始有 k 个人</li><li>从每一层的 n + 1 号点(即月球) 向 汇点连一条容量为 INF 的边</li></ul></li><li>从第 i 层向第 i + 1 层可达到的点连一条容量为$r_i$ 的边，表示限制太空船的容纳人数</li><li>第 i 层的每个点向第 i + 1 层连一条容量为 INF 的边，表示人们可以在当前太空站停留</li></ol><p>如下图，我们不同的颜色表示三种类型的边</p><p><img src="https://gitee.com/Greedy_firtree/picture/raw/master/blog/image-20221214123521342.png" alt="image-20221214123521342"></p><p>所以这题的做法就是：</p><ul><li><p>枚举day</p></li><li><p>求最大流，如果最大流大于等于k，说明我们可以把k个人在day天内移动到月球</p></li></ul><br><p>当然二分 day 也是可以的</p><p><strong>但是我们从小到大枚举 day 会比二分更优：</strong></p><p>因为随着层数的增加，点数和边数会越来越多，越来越复杂</p><p>二分的话需要每次都重新建图</p><p>而枚举只需要在当前的基础上加一些额外的边即可</p><h2 id="code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1101</span> * <span class="hljs-number">50</span> + <span class="hljs-number">10</span>, M = (N + <span class="hljs-number">1100</span> + <span class="hljs-number">20</span> * <span class="hljs-number">1101</span>) + <span class="hljs-number">10</span>, INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MOD = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-type">int</span> e[M], ne[M], h[N], w[M], idx;<br><span class="hljs-type">int</span> n, m, k, S, T, cur[N], d[N], p[N];<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Ship</span> &#123;<br>    <span class="hljs-type">int</span> r;<br>    vector&lt;<span class="hljs-type">int</span>&gt; zz;<br>&#125; ships[<span class="hljs-number">30</span>];<br><br><span class="hljs-function">il <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span> </span>&#123;<br>    e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx++;<br>    e[idx] = a, w[idx] = <span class="hljs-number">0</span>, ne[idx] = h[b], h[b] = idx++;<br>&#125;<br><br><span class="hljs-function">il <span class="hljs-type">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(d, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> d);<br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    q.<span class="hljs-built_in">push</span>(S), d[S] = <span class="hljs-number">0</span>, cur[S] = h[S];<br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>()) &#123;<br>        <span class="hljs-type">int</span> t = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[t]; ~i; i = ne[i]) &#123;<br>            <span class="hljs-type">int</span> j = e[i];<br>            <span class="hljs-keyword">if</span> (d[j] == <span class="hljs-number">-1</span> &amp;&amp; w[i]) &#123;<br>                d[j] = d[t] + <span class="hljs-number">1</span>;<br>                cur[j] = h[j];<br>                <span class="hljs-keyword">if</span> (j == T) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                q.<span class="hljs-built_in">push</span>(j);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> limit)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (u == T) <span class="hljs-keyword">return</span> limit;<br>    <span class="hljs-type">int</span> flow = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = cur[u]; ~i &amp;&amp; flow &lt; limit; i = ne[i]) &#123;<br>        cur[u] = i;<br>        <span class="hljs-type">int</span> ver = e[i];<br>        <span class="hljs-keyword">if</span> (d[ver] == d[u] + <span class="hljs-number">1</span> &amp;&amp; w[i]) &#123;<br>            <span class="hljs-type">int</span> t = <span class="hljs-built_in">find</span>(ver, <span class="hljs-built_in">min</span>(w[i], limit - flow)); <br>            <span class="hljs-keyword">if</span> (!t) d[ver] = <span class="hljs-number">-1</span>;<br>            w[i] -= t, w[i ^ <span class="hljs-number">1</span>] += t, flow += t;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (flow == <span class="hljs-number">0</span>)  d[u] = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> flow;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dinic</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> r = <span class="hljs-number">0</span>, flow;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">bfs</span>()) &#123;<br>        <span class="hljs-keyword">while</span> (flow = <span class="hljs-built_in">find</span>(S, INF))<br>            r += flow;<br>    &#125;<br>    <span class="hljs-keyword">return</span> r;<br>&#125;<br><br><span class="hljs-function">il <span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (p[x] != x)  p[x] = <span class="hljs-built_in">find</span>(p[x]);<br>    <span class="hljs-keyword">return</span> p[x];<br>&#125;<br><br><span class="hljs-comment">// 得到第i个点在第day天的编号</span><br><span class="hljs-function">il <span class="hljs-type">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> day)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> day * (n + <span class="hljs-number">2</span>) + i;<br>&#125;<br><br><span class="hljs-function">il <span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>    S = N - <span class="hljs-number">2</span>, T = N - <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-built_in">sizeof</span>(h));<br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">30</span>; i++) p[i] = i;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;<br>    <span class="hljs-built_in">init</span>();<br><br>    <span class="hljs-comment">// 存太空船的信息</span><br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        <span class="hljs-type">int</span> a, b;   cin &gt;&gt; a &gt;&gt; b;<br>        ships[i].r = a;<br>        <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>, x; j &lt; b; j++) &#123;<br>            cin &gt;&gt; x;<br>            <span class="hljs-keyword">if</span> (x == <span class="hljs-number">-1</span>)    x = n + <span class="hljs-number">1</span>;  <span class="hljs-comment">// 是月球</span><br>            ships[i].zz.<span class="hljs-built_in">pb</span>(x);<br>            <span class="hljs-keyword">if</span> (j) &#123;<br>                <span class="hljs-type">int</span> tmp = ships[i].zz[j - <span class="hljs-number">1</span>];<br>                p[<span class="hljs-built_in">find</span>(tmp)] = <span class="hljs-built_in">find</span>(x);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 是否有解</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">find</span>(<span class="hljs-number">0</span>) != <span class="hljs-built_in">find</span>(n + <span class="hljs-number">1</span>)) &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;0&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 第一类边</span><br>    <span class="hljs-built_in">add</span>(S, <span class="hljs-built_in">get</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>), k);<br>    <span class="hljs-built_in">add</span>(<span class="hljs-built_in">get</span>(n + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>), T, INF);<br><br>    <span class="hljs-comment">// 枚举天数day</span><br>    <span class="hljs-type">int</span> day = <span class="hljs-number">1</span>, now = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-comment">// 每一层的月球向汇点连一条容量为INF的边</span><br>        <span class="hljs-built_in">add</span>(<span class="hljs-built_in">get</span>(n + <span class="hljs-number">1</span>, day), T, INF);<br>        <br>        <span class="hljs-comment">// 表示在太空站停留的边</span><br>        <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= n + <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-type">int</span> u = <span class="hljs-built_in">get</span>(i, day - <span class="hljs-number">1</span>), v = <span class="hljs-built_in">get</span>(i, day);<br>            <span class="hljs-built_in">add</span>(u, v, INF);<br>        &#125;<br><br>        <span class="hljs-comment">// 表示从上一层通过太空船到达的边，容量为ri</span><br>        <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>            <span class="hljs-type">int</span> tt = ships[i].zz.<span class="hljs-built_in">size</span>();<br>            <span class="hljs-type">int</span> a = ships[i].zz[(day - <span class="hljs-number">1</span>) % tt], b = ships[i].zz[day % tt];<br>            <span class="hljs-type">int</span> u = <span class="hljs-built_in">get</span>(a, day - <span class="hljs-number">1</span>), v = <span class="hljs-built_in">get</span>(b, day);<br>            <span class="hljs-built_in">add</span>(u, v, ships[i].r);<br>        &#125;<br><br>        now += <span class="hljs-built_in">dinic</span>();<br>        <span class="hljs-keyword">if</span> (now &gt;= k)   <span class="hljs-keyword">break</span>;<br>        day++;<br>    &#125;<br><br>    <span class="hljs-comment">// 输出答案</span><br>    cout &lt;&lt; day &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure></font><br>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 网络流24题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【ACM】最大流模型(二)</title>
      <link href="/post/9be3e0a3.html"/>
      <url>/post/9be3e0a3.html</url>
      
        <content type="html"><![CDATA[<font size="3"><meta name="referrer" content="no-referrer"><h2 id="多源汇最大流"><a href="#多源汇最大流" class="headerlink" title="多源汇最大流"></a>多源汇最大流</h2><p>这种多起点题型很容易就能想到：</p><ul><li><p>建立一个超级源点，从超级源点向所有源点连一条容量是无穷大的边</p></li><li><p>建立一个超级汇点， 所有汇点向超级汇点连一条容量为无穷大的边</p></li></ul><p>在新图跑最大流即可得出原图的最大流。</p><p><img src="https://gitee.com/Greedy_firtree/picture/raw/master/blog/image-20221214091959047.png" alt="image-20221214091959047"></p><h3 id="模板题"><a href="#模板题" class="headerlink" title="模板题"></a>模板题</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个包含 n 个点 m 条边的有向图，并给定每条边的容量，边的容量非负。</p><p>其中有 $S_c$ 个源点，$T_c$ 个汇点，图中可能存在重边和自环。</p><p>保证源点集合和汇点集合没有交集，求整个网络的最大流。</p><br><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><p>第一行包含四个整数 n，m，$S_c$，$T_C$</p><p>第二行包含 $S_c$ 个整数，表示所有源点的编号</p><p>第三行包含 $T_c$ 个整数，表示所有汇点的编号</p><p>接下来 m 行，每行三个整数 u，v，c，表示从点 u 到点 v 存在一条有向边，容量为 c</p><p>点的编号从 1 到 n</p><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><p>输出一个整数表示整个网络的最大流</p><br><h4 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h4><p><strong>输入样例：</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><span class="hljs-number">5</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">2</span> <span class="hljs-number">30</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">3</span> <span class="hljs-number">20</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span> <span class="hljs-number">20</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">1</span> <span class="hljs-number">30</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span> <span class="hljs-number">40</span><br></code></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">70<br></code></pre></td></tr></table></figure><br><h4 id="code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>, M = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>, INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MOD = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-type">int</span> e[M], ne[M], h[N], w[M], idx;<br><span class="hljs-type">int</span> n, m, S, T, cur[N], d[N];<br><span class="hljs-type">int</span> sc, tc;<br><br><span class="hljs-comment">// dinic()</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; sc &gt;&gt; tc;<br>    S = <span class="hljs-number">0</span>, T = n + <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-built_in">sizeof</span>(h));<br>    <br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, x; i &lt;= sc; i++) &#123;<br>        cin &gt;&gt; x;<br>        <span class="hljs-built_in">add</span>(S, x, INF);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, x; i &lt;= tc; i++) &#123;<br>        cin &gt;&gt; x;<br>        <span class="hljs-built_in">add</span>(x, T, INF);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        <span class="hljs-type">int</span> a, b, c;<br>        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;<br>        <span class="hljs-built_in">add</span>(a, b, c);<br>    &#125;<br><br>    cout &lt;&lt; <span class="hljs-built_in">dinic</span>() &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><h2 id="最大流关键边"><a href="#最大流关键边" class="headerlink" title="最大流关键边"></a>最大流关键边</h2><p><font color="#008ad0">只给其扩大容量之后整个流网络的最大流能够变大，对于这样的边我们称之为关键边。</font></p><br><p>判断 u-&gt;v 是否为关键边：</p><ul><li><p>在某一个最大可行流中，这条边的流量是满的</p></li><li><p>在当前残留网络中，存在一条 S-&gt;u 和 v-&gt;T 的路径</p></li></ul><br><p>具体地：</p><ol><li><p>我们先对原图做一遍dinic</p></li><li><p>在当前最大流的残留网络上进行搜索</p><ul><li>在其残留网络上沿着容量大于0的边走，所有从源点能够到达的点和所有汇点能够到达的点打上标记</li></ul></li><li><p>当一条边满足：满流（f[i] &#x3D;&#x3D; 0），并且他的起始点能从 S 点出发搜索到，终止点能够从 T 点出发搜索到，则为关键边。</p></li></ol><br><p><strong>从汇点搜的时候需要用反向边判断，即：</strong></p><p><img src="https://gitee.com/Greedy_firtree/picture/raw/master/blog/image-20221214101357922.png" alt="image-20221214101357922"></p><p>我们用一号类型的边找到点，再用二号类型的边（即反向边）进行判断</p><br><h3 id="模板题"><a href="#模板题-1" class="headerlink" title="模板题"></a>模板题</h3><h4 id="题目描述"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><p>伊基编写了一个最大流程序，并计算出了当前运输网络的最大运输能力。</p><p>他对运输速度的现状十分不满，并希望能够提高国家的运输能力。</p><p>提高运输能力的方法很简单，伊基将在运输网络中重建一些道路，以使这些道路具有更高的运输能力。</p><p>但是不幸的是，凤凰国的财力有限，道路建设经费只够重建一条道路，伊基想要知道共有多少条道路可以纳入重建道路候选名单，这些道路需要满足，将其重建后，国家的总运输能力能够增加。</p><br><h4 id="输入"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h4><p>第一行包含 N 和 M，分别表示城市和道路的数量</p><p>接下来 M 行，每行包含三个整数 a，b，c，表示存在一条道路从城市 a 通往城市 b，且运输能力为 c</p><p>所有道路都是有方向的，城市编号从 0 到 N−1</p><p>生产日常商品的城市为 0 号城市，首都为 N−1 号城市</p><h4 id="输出"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h4><p>输出一个整数 K</p><p>表示存在 K 条道路，对其中每条道路进行重建都会增加运输网络的运输能力。</p><br><h4 id="样例"><a href="#样例-1" class="headerlink" title="样例"></a>样例</h4><p><strong>输入样例：</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">2 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">1</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">1<br></code></pre></td></tr></table></figure><br><h4 id="code"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1000</span> + <span class="hljs-number">10</span>, M = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>, INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MOD = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-type">int</span> e[M], ne[M], h[N], w[M], idx;<br><span class="hljs-type">int</span> n, m, S, T, cur[N], d[N];<br><span class="hljs-type">bool</span> vis_s[N], <span class="hljs-type">vis_t</span>[N];<br><br><span class="hljs-comment">// dinic（）</span><br><br><span class="hljs-function">il <span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">bool</span> st[], <span class="hljs-type">int</span> op)</span> </span>&#123;<br>    st[u] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = h[u]; ~i; i = ne[i]) &#123;<br>        <span class="hljs-type">int</span> j = i ^ op, ver = e[i];<br>        <span class="hljs-keyword">if</span> (w[j] &amp;&amp; !st[ver])   <span class="hljs-built_in">dfs</span>(ver, st, op);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    S = <span class="hljs-number">0</span>, T = n - <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-built_in">sizeof</span>(h));<br><br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        <span class="hljs-type">int</span> a, b, c;    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;<br>        <span class="hljs-built_in">add</span>(a, b, c);<br>    &#125;<br>    <span class="hljs-built_in">dinic</span>();<br><br>    <span class="hljs-built_in">dfs</span>(S, vis_s, <span class="hljs-number">0</span>);   <span class="hljs-comment">// 0 表示不需要用反向边来判断</span><br>    <span class="hljs-built_in">dfs</span>(T, <span class="hljs-type">vis_t</span>, <span class="hljs-number">1</span>);   <span class="hljs-comment">// 1 表示需要用反向边来判断</span><br><br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; idx; i += <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-type">int</span> u = e[i ^ <span class="hljs-number">1</span>], v = e[i];<br>        <span class="hljs-keyword">if</span> (!w[i] &amp;&amp; vis_s[u] &amp;&amp; <span class="hljs-type">vis_t</span>[v])  ans++;<br>    &#125;<br><br>    cout &lt;&lt; ans &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><br><h2 id="最大流判定"><a href="#最大流判定" class="headerlink" title="最大流判定"></a>最大流判定</h2><p>直接看题。</p><br><h3 id="秘密挤奶机"><a href="#秘密挤奶机" class="headerlink" title="秘密挤奶机"></a>秘密挤奶机</h3><p><strong>题目链接：<a href="http://poj.org/problem?id=2455">http://poj.org/problem?id=2455</a></strong></p><h4 id="题目描述"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h4><p>题目说现在有 n 个点，p 条边</p><p>每条边只能走一次，现在要从 1 号点到 n 号点走 t 次</p><p>求出所有走的边的最大值，使这个最大值最小</p><br><h4 id="输入"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h4><p>第一行包含三个整数 N，P，T</p><p>接下来 P 行，每行包含三个整数 a，b，c，表示地标 a 和 b之间存在一条长度为 c 的道路</p><h4 id="输出"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h4><p>输出一个整数，表示约翰必须使用的最长的单个道路的最小可能长度</p><br><h4 id="样例"><a href="#样例-2" class="headerlink" title="样例"></a>样例</h4><p><strong>输入样例：</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">7 </span><span class="hljs-number">9</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span> <span class="hljs-number">5</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">7</span> <span class="hljs-number">5</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">4</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">3</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">5</span> <span class="hljs-number">7</span><br><span class="hljs-symbol">5 </span><span class="hljs-number">7</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">6</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">6 </span><span class="hljs-number">7</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">5<br></code></pre></td></tr></table></figure><br><p><strong>经典最大值最小化问题，可以直接二分出最大的边权 mid</strong></p><p>看是否存在一个最大流，其中所有边权都小于等于 mid，且流量大于 K</p><p>不断二分下去即可找到答案</p><br><p>那么现在的问题就是如何判断我们能不能只用长度小于 mid 的边，能走 t 次</p><p>也就是如何写我们的check函数，我们可以使用最大流判定</p><br><p>我们可以按照这个图建一个网络流，给每条长度小于 mid 的边流量为 1，说明只能走一次</p><p>大于 mid 的边流量为0，说明不能走</p><p>源点设为 1，汇点设为 n，求一遍源点到汇点的最大流就能得到我们能走多少遍，再判断是否大于等于要求的 t 即可</p><br><p><strong>还有一个问题，就是无向图向有向图的转换</strong></p><p>题目给定的是无向图，而网络流用的是有向图</p><p>我们在建图时，对于一条无向边（u，v），我们建两条有向边 u -&gt; v 和 v -&gt; u 两条有向边</p><p>Q：如下图，原网络中只能走一次，但是我们建了双向边的话就可以来回各走一次，不就不符合容量限制了吗？<br><img src="https://gitee.com/Greedy_firtree/picture/raw/master/blog/image-20221214113132889.png" alt="image-20221214113132889"></p><p><strong>我们可以把正反各走一次看作没有流量经过，所以不影响容量限制</strong></p><br><h4 id="code"><a href="#code" class="headerlink" title="code"></a>code</h4><p>这里我们开始时先存边的长度tw[]，在二分时再修改边的容量w[]</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1000</span> + <span class="hljs-number">10</span>, M = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>, INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MOD = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-type">int</span> e[M], ne[M], h[N], w[M], idx;<br><span class="hljs-type">int</span> n, m, S, T, cur[N], d[N];<br><span class="hljs-type">int</span> k, tw[M];<br><br><span class="hljs-function">il <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span> </span>&#123;<br>    e[idx] = b, tw[idx] = c, ne[idx] = h[a], h[a] = idx++;<br>    e[idx] = a, tw[idx] = c, ne[idx] = h[b], h[b] = idx++;<br>&#125;<br><br><span class="hljs-comment">// dinic()</span><br><br><span class="hljs-function">il <span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-comment">// 修改容量限制</span><br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; idx; i++) &#123;<br>        <span class="hljs-keyword">if</span> (tw[i] &gt; x)  w[i] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">else</span>    w[i] = <span class="hljs-number">1</span>;   <br>    &#125;<br><br>    <span class="hljs-type">int</span> res = <span class="hljs-built_in">dinic</span>();<br>    <span class="hljs-keyword">return</span> res &gt;= k;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;<br>    S = <span class="hljs-number">1</span>, T = n;<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-built_in">sizeof</span>(h));<br><br>    <span class="hljs-comment">// 建图，记录边的长度tw[]</span><br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        <span class="hljs-type">int</span> a, b, c;    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;<br>        <span class="hljs-built_in">add</span>(a, b, c);<br>    &#125;<br><br>    <span class="hljs-comment">// 二分</span><br>    <span class="hljs-type">int</span> l = <span class="hljs-number">1</span>, r = <span class="hljs-number">1e6</span>;<br>    <span class="hljs-keyword">while</span> (l &lt; r) &#123;<br>        <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(mid)) r = mid;<br>        <span class="hljs-keyword">else</span>    l = mid + <span class="hljs-number">1</span>;<br>    &#125;<br><br>    cout &lt;&lt; l &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure></font><br>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 网络流 </tag>
            
            <tag> 最大流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【ACM】最大流模型(一)</title>
      <link href="/post/a362395a.html"/>
      <url>/post/a362395a.html</url>
      
        <content type="html"><![CDATA[<font size="3"><meta name="referrer" content="no-referrer"><p>本篇内容大多参考 <a href="https://www.cnblogs.com/liu-runda/p/6262832.html">https://www.cnblogs.com/liu-runda/p/6262832.html</a></p></font><h2 id="无源汇上下界可行流循环流"><a href="#无源汇上下界可行流-循环流" class="headerlink" title="无源汇上下界可行流(循环流)"></a>无源汇上下界可行流(循环流)</h2><font size="3"><p><strong>模型：</strong></p><p>给一个网络，求一个流满足：</p><p>每条边 i 流量在 [low(i), upp(i)] 之间，每个点 u 都要满足流量守恒。</p><br><p><font color="\#004a97">可行流算法的核心是将一个不满足流量守恒的初始流调整成满足流量守恒的流</font></p><br><p>如果存在一个可行流，那么一定满足每条边的流量都大于等于流量的下限。</p><p>因此我们可以令每条边的流量等于流量下限，得到一个初始流。</p><p>然后建出这个流的残量网络。(即：每条边的流量等于这条边的流量上限与流量下限之差)</p><br><p>初始流就是一开始将每条边流量设为low(i)的流，显然这个流不一定满足流量守恒。</p><p>因此我们考虑在残量网络上求出一个另不满足流量守恒的附加流，使得这个附加流和我们的初始流合并之后满足流量守恒。即:</p><ul><li><p>如果某个点在初始流中满足流量守恒，那么这个点在附加流中也满足流量守恒</p></li><li><p>如果某个点在初始流中的流入量比流出量多x，那么这个点在附加流中的流出量比流入量多x</p></li><li><p>如果某个点在初始流中的流入量比流出量少x，那么这个点在附加流中的流出量比流入量少x</p></li></ul><p>X的数值可以枚举x的所有连边求出，比较方便的写法是开一个数组A[]，</p><p><strong>A[i]表示i在初始流中的流入量 - 流出量的值</strong></p><p>那么A[i]的正负表示流入量和流出量的大小关系，下面就用A[i]表示初始流中 i 的流入量 - 流出量</p><br><p>所以在附加流中，让点 u 的流入量 - 流出量 &#x3D; −A[u]，就能保证流量守恒。</p><ul><li><p>当 A[u] &gt; 0（即 -a[u] &lt; 0），需要让u的流入量增加a[u]。</p><ul><li>这可以通过新建超级源点 SS，并增加 SS→u，容量为 A[u] 的边做到</li></ul></li><li><p>当 A[u] &lt; 0（即 -A[u] &gt; 0），需要让u的流出量增加A[u]。</p><ul><li>这可以通过新建超级汇点 TT，并增加 u→TT，容量为 −A[u] 的边做到</li></ul></li></ul><br><p>如果我们能找到一个流满足新加的边都满流，那这个流在原图上的部分就是我们需要的附加流。</p><p>(根据我们的建图方式，<strong>“新加的边都满流”</strong> 和 ”附加流合并上初始流得到流量平衡的流” 是等价的约束条件)</p><br><p><strong>那么怎样找出一个新加的边都满流的流呢？</strong></p><p>可以发现假如存在这样的方案，这样的流一定是我们所建出的图的 SS-TT 最大流。</p><p><strong>解法：</strong></p><p>跑 SS-TT 的最大流，再判断最大流的大小是否等于 SS 出发的所有边的流量上限之和（此时指向 TT 的边也一定满流，因为这两部分边的流量上限之和相等)。</p><p>最后，每条边在可行流中的流量 &#x3D; 容量下界 + 附加流中它的流量（即跑完dinic之后所加反向边的权值）</p><br><h3 id="code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">500</span> + <span class="hljs-number">10</span>, M = <span class="hljs-number">200010</span>, INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MOD = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-type">int</span> e[M], ne[M], h[N], w[M], idx;<br><span class="hljs-type">int</span> n, m, S, T, cur[N], d[N], low[M], upp[M], a[N];<br><br><span class="hljs-function">il <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span> </span>&#123;<br>    e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx++;<br>    e[idx] = a, w[idx] = <span class="hljs-number">0</span>, ne[idx] = h[b], h[b] = idx++;<br>&#125;<br><br><span class="hljs-function">il <span class="hljs-type">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(d, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> d);<br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    q.<span class="hljs-built_in">push</span>(S), d[S] = <span class="hljs-number">0</span>, cur[S] = h[S];<br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>()) &#123;<br>        <span class="hljs-type">int</span> t = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[t]; ~i; i = ne[i]) &#123;<br>            <span class="hljs-type">int</span> j = e[i];<br>            <span class="hljs-keyword">if</span> (d[j] == <span class="hljs-number">-1</span> &amp;&amp; w[i]) &#123;<br>                d[j] = d[t] + <span class="hljs-number">1</span>;<br>                cur[j] = h[j];<br>                <span class="hljs-keyword">if</span> (j == T) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                q.<span class="hljs-built_in">push</span>(j);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> limit)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (u == T) <span class="hljs-keyword">return</span> limit;<br>    <span class="hljs-type">int</span> flow = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = cur[u]; ~i &amp;&amp; flow &lt; limit; i = ne[i]) &#123;<br>        cur[u] = i;<br>        <span class="hljs-type">int</span> ver = e[i];<br>        <span class="hljs-keyword">if</span> (d[ver] == d[u] + <span class="hljs-number">1</span> &amp;&amp; w[i]) &#123;<br>            <span class="hljs-type">int</span> t = <span class="hljs-built_in">find</span>(ver, <span class="hljs-built_in">min</span>(w[i], limit - flow)); <br>            <span class="hljs-keyword">if</span> (!t) d[ver] = <span class="hljs-number">-1</span>;<br>            w[i] -= t, w[i ^ <span class="hljs-number">1</span>] += t, flow += t;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (flow == <span class="hljs-number">0</span>)  d[u] = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> flow;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dinic</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> r = <span class="hljs-number">0</span>, flow;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">bfs</span>()) &#123;<br>        <span class="hljs-keyword">while</span> (flow = <span class="hljs-built_in">find</span>(S, INF))<br>            r += flow;<br>    &#125;<br>    <span class="hljs-keyword">return</span> r;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld&quot;</span>, &amp;n, &amp;m);<br><br>    S = <span class="hljs-number">0</span>, T = n + <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-built_in">sizeof</span>(h));<br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        <span class="hljs-type">int</span> u, v;   <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld%lld%lld&quot;</span>, &amp;u, &amp;v, &amp;low[i], &amp;upp[i]);<br>        a[u] -= low[i], a[v] += low[i]; <span class="hljs-comment">// 构造差</span><br>        <span class="hljs-built_in">add</span>(u, v, upp[i] - low[i]);     <span class="hljs-comment">// 建残留网络</span><br>    &#125;<br><br>    <span class="hljs-type">int</span> tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (a[i] &gt; <span class="hljs-number">0</span>)   <span class="hljs-built_in">add</span>(S, i, a[i]), tot += a[i];<br>        <span class="hljs-keyword">if</span> (a[i] &lt; <span class="hljs-number">0</span>)   <span class="hljs-built_in">add</span>(i, T, -a[i]);<br>    &#125;<br><br>    <span class="hljs-type">int</span> ans = <span class="hljs-built_in">dinic</span>();<br>    <span class="hljs-keyword">if</span> (ans != tot) &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;NO&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;YES&quot;</span>);<br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, w[i &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>] + low[i + <span class="hljs-number">1</span>]);<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br></font><h2 id="有源汇上下界可行流"><a href="#有源汇上下界可行流" class="headerlink" title="有源汇上下界可行流"></a>有源汇上下界可行流</h2><font size="3"><p><strong>模型：</strong></p><p>现在的网络有一个源点 s 和汇点 t。求出一个流使得源点的总流出量等于汇点的总流入量。</p><p>其他的点满足流量守恒，而且每条边的流量满足上界和下界限制。</p><br><p>为了使源汇点满足流量守恒，我们需要有边流入源点 s，有边流出汇点 t。</p><p>注意到源点 s 的流出量等于汇点 t 的流入量，我们就可以从汇点 t 向源点 s 连一条下界为0上界为无穷大的边。</p><p>相当于把从源点 s 流出的流量再流回来。</p><p>在这样的图中套用上面的算法求出一个可行的循环流，拆掉从汇点 t 到源点 s 的边就得到一个可行的有源汇流。</p><br><p><strong>这里有一个小问题：最后得到的可行的有源汇流的流量是多少?</strong></p><p>可以发现，循环流中一定满足 s 流出的总流量 &#x3D; 流入 s 的总流量</p><p>假定原图中没有边流入s，那么s流出的流量就是 t 到 s 的无穷边的流量，也就是 s-t 可行流的流量。</p><p>因此我们最后看一下 t 到 s 的无穷边的流量（即dinic跑完之后反向边的权值）即可知道原图中有源汇可行流的流量。</p><br></font><h2 id="有源汇上下界最大流"><a href="#有源汇上下界最大流" class="headerlink" title="有源汇上下界最大流"></a>有源汇上下界最大流</h2><font size="3"><p><strong>模型：</strong></p><p>现在的网络有一个源点 s 和汇点 t，求出一个流使得源点的总流出量等于汇点的总流入量。</p><p>其他的点满足流量守恒，而且每条边的流量满足上界和下界限制。</p><p>在这些前提下要求<strong>总流量最大</strong></p><br><p>首先套用上面的算法求出一个有源汇有上下界可行流。</p><p>此时的流不一定最大，接下来在残量网络上跑 s-t 最大流即可</p><br><p><strong>最终的最大流流量 &#x3D; 可行流流量(即 t 到 s 的无穷边上跑出的流量) + 新增广出的 s-t 最大流</strong></p></font><br><h3 id="code"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">520</span> + <span class="hljs-number">10</span>, M = <span class="hljs-number">200010</span>, INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MOD = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-type">int</span> e[M], ne[M], h[N], w[M], idx;<br><span class="hljs-type">int</span> n, m, S, T, cur[N], d[N];<br><span class="hljs-type">int</span> a[N], s, t;<br><br><span class="hljs-function">il <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span> </span>&#123;<br>    e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx++;<br>    e[idx] = a, w[idx] = <span class="hljs-number">0</span>, ne[idx] = h[b], h[b] = idx++;<br>&#125;<br><br><span class="hljs-function">il <span class="hljs-type">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(d, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> d);<br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    q.<span class="hljs-built_in">push</span>(S), d[S] = <span class="hljs-number">0</span>, cur[S] = h[S];<br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>()) &#123;<br>        <span class="hljs-type">int</span> t = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[t]; ~i; i = ne[i]) &#123;<br>            <span class="hljs-type">int</span> j = e[i];<br>            <span class="hljs-keyword">if</span> (d[j] == <span class="hljs-number">-1</span> &amp;&amp; w[i]) &#123;<br>                d[j] = d[t] + <span class="hljs-number">1</span>;<br>                cur[j] = h[j];<br>                <span class="hljs-keyword">if</span> (j == T) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                q.<span class="hljs-built_in">push</span>(j);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> limit)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (u == T) <span class="hljs-keyword">return</span> limit;<br>    <span class="hljs-type">int</span> flow = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = cur[u]; ~i &amp;&amp; flow &lt; limit; i = ne[i]) &#123;<br>        cur[u] = i;<br>        <span class="hljs-type">int</span> ver = e[i];<br>        <span class="hljs-keyword">if</span> (d[ver] == d[u] + <span class="hljs-number">1</span> &amp;&amp; w[i]) &#123;<br>            <span class="hljs-type">int</span> t = <span class="hljs-built_in">find</span>(ver, <span class="hljs-built_in">min</span>(w[i], limit - flow)); <br>            <span class="hljs-keyword">if</span> (!t) d[ver] = <span class="hljs-number">-1</span>;<br>            w[i] -= t, w[i ^ <span class="hljs-number">1</span>] += t, flow += t;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (flow == <span class="hljs-number">0</span>)  d[u] = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> flow;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dinic</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> r = <span class="hljs-number">0</span>, flow;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">bfs</span>()) &#123;<br>        <span class="hljs-keyword">while</span> (flow = <span class="hljs-built_in">find</span>(S, INF))<br>            r += flow;<br>    &#125;<br>    <span class="hljs-keyword">return</span> r;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; s &gt;&gt; t;<br><br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-built_in">sizeof</span>(h));<br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        <span class="hljs-type">int</span> u, v, ll, rr;<br>        cin &gt;&gt; u &gt;&gt; v &gt;&gt; ll &gt;&gt; rr;<br>        a[u] -= ll, a[v] += ll;<br>        <span class="hljs-built_in">add</span>(u, v, rr - ll);<br>    &#125;<br><br>    <span class="hljs-comment">// 先利用 虚拟源点S和虚拟汇点T 找到一组可行流</span><br>    <span class="hljs-type">int</span> tot = <span class="hljs-number">0</span>;<br>    S = <span class="hljs-number">0</span>, T = n + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (a[i] &gt; <span class="hljs-number">0</span>)   <span class="hljs-built_in">add</span>(S, i, a[i]), tot += a[i];<br>        <span class="hljs-keyword">if</span> (a[i] &lt; <span class="hljs-number">0</span>)   <span class="hljs-built_in">add</span>(i, T, -a[i]);<br>    &#125;<br><br>    <span class="hljs-built_in">add</span>(t, s, INF);<br><br>    <span class="hljs-type">int</span> tmp = <span class="hljs-built_in">dinic</span>();<br>    <span class="hljs-keyword">if</span> (tmp != tot) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;No Solution&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 可行流的流量就是t到s的无穷边上跑出的流量</span><br>    <span class="hljs-type">int</span> ans = w[idx - <span class="hljs-number">1</span>];<br>    <span class="hljs-comment">// 然后在当前的残留网络上跑 s-t 的最大流</span><br>    S = s, T = t;<br>    w[idx - <span class="hljs-number">1</span>] = w[idx - <span class="hljs-number">2</span>] = <span class="hljs-number">0</span>;<br>    cout &lt;&lt; ans + <span class="hljs-built_in">dinic</span>() &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><h2 id="有源汇上下界最小流"><a href="#有源汇上下界最小流" class="headerlink" title="有源汇上下界最小流"></a>有源汇上下界最小流</h2><font size="3"><p><strong>模型：</strong></p><p>现在的网络有一个源点 s 和汇点 t，求出一个流使得源点的总流出量等于汇点的总流入量。</p><p>其他的点满足流量守恒，而且每条边的流量满足上界和下界限制。</p><p>在这些前提下要求<strong>总流量最小</strong></p><br><p>依然是先跑出一个有源汇可行流，这时候的流也不一定是最小的。</p><p>假如我们能在残量网络上找到一条 s-t 的路径使得去掉这条路径上的流量之后仍然满足流量下限，我们就可以得到一个更小的流。但是好像我们并没有什么算法可以”找到尽可能多的能够去除流量的路径”</p><br><p>这时候需要我们再理解一下dinic的反向边：<font color="\#004a97">反向边的流量增加等价于正向边的的流量减少。</font></p><p>因此我们在残量网络上找出 t 到 s 的流就相当于减小了 s 到 t 的流，那么我们在跑出可行流的残量网络上跑 t-s 最大流，用可行流的大小减去这一次 t-s 最大流的大小就是最小流的大小。</p><p><strong>t-s 最大流其实就是尽量缩减 s-t 方向的流</strong></p></font><br><h3 id="code"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5e4</span> + <span class="hljs-number">10</span>, M = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>, INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MOD = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-type">int</span> e[M], ne[M], h[N], w[M], idx;<br><span class="hljs-type">int</span> n, m, S, T, cur[N], d[N];<br><span class="hljs-type">int</span> s, t, a[N];<br><br><span class="hljs-function">il <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span> </span>&#123;<br>    e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx++;<br>    e[idx] = a, w[idx] = <span class="hljs-number">0</span>, ne[idx] = h[b], h[b] = idx++;<br>&#125;<br><br><span class="hljs-function">il <span class="hljs-type">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(d, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> d);<br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    q.<span class="hljs-built_in">push</span>(S), d[S] = <span class="hljs-number">0</span>, cur[S] = h[S];<br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>()) &#123;<br>        <span class="hljs-type">int</span> t = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[t]; ~i; i = ne[i]) &#123;<br>            <span class="hljs-type">int</span> j = e[i];<br>            <span class="hljs-keyword">if</span> (d[j] == <span class="hljs-number">-1</span> &amp;&amp; w[i]) &#123;<br>                d[j] = d[t] + <span class="hljs-number">1</span>;<br>                cur[j] = h[j];<br>                <span class="hljs-keyword">if</span> (j == T) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                q.<span class="hljs-built_in">push</span>(j);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> limit)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (u == T) <span class="hljs-keyword">return</span> limit;<br>    <span class="hljs-type">int</span> flow = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = cur[u]; ~i &amp;&amp; flow &lt; limit; i = ne[i]) &#123;<br>        cur[u] = i;<br>        <span class="hljs-type">int</span> ver = e[i];<br>        <span class="hljs-keyword">if</span> (d[ver] == d[u] + <span class="hljs-number">1</span> &amp;&amp; w[i]) &#123;<br>            <span class="hljs-type">int</span> t = <span class="hljs-built_in">find</span>(ver, <span class="hljs-built_in">min</span>(w[i], limit - flow)); <br>            <span class="hljs-keyword">if</span> (!t) d[ver] = <span class="hljs-number">-1</span>;<br>            w[i] -= t, w[i ^ <span class="hljs-number">1</span>] += t, flow += t;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (flow == <span class="hljs-number">0</span>)  d[u] = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> flow;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dinic</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> r = <span class="hljs-number">0</span>, flow;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">bfs</span>()) &#123;<br>        <span class="hljs-keyword">while</span> (flow = <span class="hljs-built_in">find</span>(S, INF))<br>            r += flow;<br>    &#125;<br>    <span class="hljs-keyword">return</span> r;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; s &gt;&gt; t;<br><br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-built_in">sizeof</span>(h));<br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        <span class="hljs-type">int</span> u, v, ll, rr;<br>        cin &gt;&gt; u &gt;&gt; v &gt;&gt; ll &gt;&gt; rr;<br>        a[u] -= ll, a[v] += ll;<br>        <span class="hljs-built_in">add</span>(u, v, rr - ll);<br>    &#125;<br><br>    <span class="hljs-comment">// 先利用 虚拟源点S和虚拟汇点T 找到一组可行流</span><br>    <span class="hljs-type">int</span> tot = <span class="hljs-number">0</span>;<br>    S = <span class="hljs-number">0</span>, T = n + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (a[i] &gt; <span class="hljs-number">0</span>)   <span class="hljs-built_in">add</span>(S, i, a[i]), tot += a[i];<br>        <span class="hljs-keyword">if</span> (a[i] &lt; <span class="hljs-number">0</span>)   <span class="hljs-built_in">add</span>(i, T, -a[i]);<br>    &#125;<br>    <span class="hljs-built_in">add</span>(t, s, INF);<br><br>    <span class="hljs-type">int</span> tmp = <span class="hljs-built_in">dinic</span>();<br>    <span class="hljs-keyword">if</span> (tmp != tot) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;No Solution&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 可行流的流量就是t到s的无穷边上跑出的流量</span><br>    <span class="hljs-type">int</span> ans = w[idx - <span class="hljs-number">1</span>];<br>    <span class="hljs-comment">// 然后在当前的残留网络上跑 t-s 的最大流</span><br>    S = t, T = s;<br>    w[idx - <span class="hljs-number">1</span>] = w[idx - <span class="hljs-number">2</span>] = <span class="hljs-number">0</span>;<br>    cout &lt;&lt; ans - <span class="hljs-built_in">dinic</span>() &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 网络流 </tag>
            
            <tag> 最大流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】最长不下降子序列问题</title>
      <link href="/post/da24e842.html"/>
      <url>/post/da24e842.html</url>
      
        <content type="html"><![CDATA[<font size="3"><meta name="referrer" content="no-referrer"><p>题目链接：<a href="https://www.luogu.com.cn/problem/P2766">https://www.luogu.com.cn/problem/P2766</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定正整数序列</p><p>$${x_1,x_2,x_3…x_n}$$</p><ol><li>计算其最长不下降子序列的长度 $s$。 </li><li>计算从给定的序列中最多可取出多少个长度为 $s$ 的不下降子序列。</li><li>如果允许在取出的序列中多次使用 $x_1$ 和 $x_n$ ，则从给定序列中最多可取出多少个长度为$s$ 的不下降子序列。</li></ol><br><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><font color="\#004a97">最大流拆点模型</font></p><p>我们可以通过容量来限制边</p><p>通过拆点来限制点</p><p>(1) <strong>第一问：</strong> 可以dp求解 maxlen</p><p>dp[i] 表示以 a[i] 结尾的最长不下降子序列长度</p><br><p>(2) <strong>第二问：</strong> 因为每个元素只能被取一次，考虑拆点。</p><p>一个点分为 i 和 i”， 并在他们之间连一条容量为 1 的边。</p><ul><li><p>若 dp[i] &#x3D;&#x3D; 1，则 S→i 连一条容量为 1 的边</p></li><li><p>若 dp[i] &#x3D;&#x3D; x，则 i”→T 连一条容量为1 的边</p></li><li><p>若 dp[i] &#x3D;&#x3D; dp[j] + 1，j &lt; i，a[j] ≤ a[i]，则 j”→i 连一条容量为 1 的边</p></li></ul><p>再跑 S-T 的最大流即可</p><br><p>(3) <strong>第三问：</strong> $x_1$ 和 $x_n$ 可以取出多次。</p><p>那么改变的就是与这两点直接相关的边的流量</p><p>我们在第二问的答案基础上，修改一些边。</p><ul><li>1→1” 连一条容量为 INF 的边</li><li>n→n” 连一条容量为 INF 的边</li><li>S→1 连一条容量为 INF 的边</li><li>若 dp[n] &#x3D;&#x3D; maxlen，则 n”→T 连一条容量为 1 的边</li></ul><p>再跑 S-T 的最大流即可</p><br><p><strong>特判：</strong></p><p>对于 n &#x3D;&#x3D; 1 的情况需要特判</p><br><p><strong>那么我们为什么要拆点？</strong></p><p>我们观察序列 {4， 3， 5， 9， 7}</p><p>dp[] &#x3D; {1, 1, 2, 3, 3}</p><p>如果我们不拆点的话，建图就是下图的样子</p><p><img src="https://gitee.com/Greedy_firtree/picture/raw/master/blog/image-20221213215342188.png" alt="image-20221213215342188"></p><p>这个建图方式得到的最大流是2，但是我们很容易得到正确的答案应该是1</p><p>其实我们只需要加上一个虚拟点限制该点的流出量只能为1，即可解决：</p><p><img src="https://gitee.com/Greedy_firtree/picture/raw/master/blog/image-20221213215558828.png" alt="image-20221213215558828"></p><p><font color="#004a97"><strong>所以我们把每个点拆分成两个点，连一条容量为 1 的边，限制住只能取一次这个条件</strong></font></p><br><h2 id="code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1000</span> + <span class="hljs-number">10</span>, M = N * N * <span class="hljs-number">2</span>, INF = <span class="hljs-number">1e18</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MOD = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-type">int</span> e[M], ne[M], h[N], w[M], idx;<br><span class="hljs-type">int</span> n, m, a[N], dp[N], ans1;<br><span class="hljs-type">int</span> d[N], cur[N], S, T;<br><br><span class="hljs-function">il <span class="hljs-type">void</span> <span class="hljs-title">DP</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )&#123;<br>        dp[i] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; i; j ++ )<br>            <span class="hljs-keyword">if</span> (a[j] &lt;= a[i])<br>                dp[i] = <span class="hljs-built_in">max</span>(dp[i], dp[j] + <span class="hljs-number">1</span>);<br>        ans1 = <span class="hljs-built_in">max</span>(ans1, dp[i]);<br>    &#125;<br>&#125;<br><br><span class="hljs-function">il <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span> </span>&#123;<br>    e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx++;<br>    e[idx] = a, w[idx] = <span class="hljs-number">0</span>, ne[idx] = h[b], h[b] = idx++;<br>&#125;<br><br><span class="hljs-function">il <span class="hljs-type">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(d, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> d);<br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    q.<span class="hljs-built_in">push</span>(S), d[S] = <span class="hljs-number">0</span>, cur[S] = h[S];<br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>()) &#123;<br>        <span class="hljs-type">int</span> t = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[t]; ~i; i = ne[i]) &#123;<br>            <span class="hljs-type">int</span> j = e[i];<br>            <span class="hljs-keyword">if</span> (d[j] == <span class="hljs-number">-1</span> &amp;&amp; w[i]) &#123;<br>                d[j] = d[t] + <span class="hljs-number">1</span>;<br>                cur[j] = h[j];<br>                <span class="hljs-keyword">if</span> (j == T) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                q.<span class="hljs-built_in">push</span>(j);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> limit)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (u == T) <span class="hljs-keyword">return</span> limit;<br>    <span class="hljs-type">int</span> flow = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = cur[u]; ~i &amp;&amp; flow &lt; limit; i = ne[i]) &#123;<br>        cur[u] = i;<br>        <span class="hljs-type">int</span> ver = e[i];<br>        <span class="hljs-keyword">if</span> (d[ver] == d[u] + <span class="hljs-number">1</span> &amp;&amp; w[i]) &#123;<br>            <span class="hljs-type">int</span> t = <span class="hljs-built_in">find</span>(ver, <span class="hljs-built_in">min</span>(w[i], limit - flow)); <br>            <span class="hljs-keyword">if</span> (!t) d[ver] = <span class="hljs-number">-1</span>;<br>            w[i] -= t, w[i ^ <span class="hljs-number">1</span>] += t, flow += t;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (flow == <span class="hljs-number">0</span>)  d[u] = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> flow;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dinic</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> r = <span class="hljs-number">0</span>, flow;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">bfs</span>()) &#123;<br>        <span class="hljs-keyword">while</span> (flow = <span class="hljs-built_in">find</span>(S, INF))<br>            r += flow;<br>    &#125;<br>    <span class="hljs-keyword">return</span> r;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-built_in">sizeof</span>(h));<br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;a[i]);<br><br>    <span class="hljs-comment">// 特判</span><br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) &#123;<br>        cout &lt;&lt; <span class="hljs-number">1</span> &lt;&lt; endl;<br>        cout &lt;&lt; <span class="hljs-number">1</span> &lt;&lt; endl;<br>        cout &lt;&lt; <span class="hljs-number">1</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-built_in">DP</span>();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans1);<br><br><span class="hljs-comment">/* ====================================== */</span><br>    <br>    S = <span class="hljs-number">2</span> * n + <span class="hljs-number">1</span>, T = <span class="hljs-number">2</span> * n + <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-built_in">add</span>(i, i + n, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span> (dp[i] == <span class="hljs-number">1</span>)  <span class="hljs-built_in">add</span>(S, i, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span> (dp[i] == ans1)  <span class="hljs-built_in">add</span>(i + n, T, <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt;= n; j++)<br>            <span class="hljs-keyword">if</span> (dp[j] == dp[i] + <span class="hljs-number">1</span> &amp;&amp; a[i] &lt;= a[j])<br>                <span class="hljs-built_in">add</span>(i + n, j, <span class="hljs-number">1</span>);<br><br>    <span class="hljs-type">int</span> ans2 = <span class="hljs-built_in">dinic</span>();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans2);<br><br><span class="hljs-comment">/* ====================================== */</span><br>    <br>    <span class="hljs-comment">// 特殊处理四种边，直接增广</span><br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; idx; i++) &#123;<br>        <span class="hljs-type">int</span> u = e[i ^ <span class="hljs-number">1</span>], v = e[i];<br>        <span class="hljs-keyword">if</span> (u == S &amp;&amp; v == <span class="hljs-number">1</span>)   w[i] = INF;<br>        <span class="hljs-keyword">if</span> (u == <span class="hljs-number">1</span> &amp;&amp; v == n + <span class="hljs-number">1</span>)   w[i] = INF;<br>        <span class="hljs-keyword">if</span> (u == n &amp;&amp; v == n + n)   w[i] = INF;<br>        <span class="hljs-keyword">if</span> (u == n + n &amp;&amp; v == T)   w[i] = INF;<br>    &#125;<br>    <br>    <span class="hljs-type">int</span> ans3 = <span class="hljs-built_in">dinic</span>();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans2 + ans3);  <span class="hljs-comment">// 加上增广前的最大流</span><br>    <br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure></font><br>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 网络流24题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】圆桌问题</title>
      <link href="/post/3f3901b7.html"/>
      <url>/post/3f3901b7.html</url>
      
        <content type="html"><![CDATA[<font size="3"><meta name="referrer" content="no-referrer"><p>题目链接： <a href="https://www.luogu.com.cn/problem/P3254">https://www.luogu.com.cn/problem/P3254</a></p><br><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>有来自 m 个不同单位的代表参加一次国际会议。第 i 个单位派出了 ri 个代表。</p><p>会议的餐厅共有 n 张餐桌，第 i 张餐桌可容纳 ci 个代表就餐。</p><p>为了使代表们充分交流，希望从同一个单位来的代表不在同一个餐桌就餐。</p><p>请给出一个满足要求的代表就餐方案。</p><br><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><font size="4"> <p>与“飞行员配对方案问题”很像</p><p>属于网络流的二分图匹配问题。</p></font><br><p><strong>建图：</strong></p><p>根据流网络的定义，先建立源点S和汇点T。</p><ul><li>源点到每个单位连一条容量为 ri 的边 ，限制每个单位有 ri 个人。</li><li>每个公司到每个桌子连一条容量为1的边 ，限制每桌每个单位只能坐一个人。</li><li>每个桌子到汇点连一条容量为 ci 的边 ，限制每个桌子最多坐 ci 个人。</li></ul><p>可以发现，整个流网络中的可行流满足容量限制和流量守恒。</p><p>所以任意一个可行流都是一个满足题意的解</p><p>如果最大流就是 $∑ri$ 的话，就说明所有的单位里的人都找到一个不同的位置坐。</p><p>也就是可以找到满足题目要求的方案，输出1。</p><br><h2 id="输出方案"><a href="#输出方案" class="headerlink" title="输出方案"></a>输出方案</h2><p>枚举所有左右两个集合之间的边，看哪条边的流量是满的</p><p>流量满则意味着这是一组可行的匹配</p><p>有很多种处理的方式</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 姿势一</span><br><span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> u = <span class="hljs-number">1</span>; u &lt;= m; u++) &#123;<br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = h[u]; ~i; i = ne[i]) &#123;<br>        <span class="hljs-type">int</span> j = e[i];<br>        <span class="hljs-keyword">if</span> (j &gt; m &amp;&amp; j &lt;= m + n &amp;&amp; !w[i])<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld &quot;</span>, j - m);<span class="hljs-comment">// 映射回去</span><br>    &#125;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br><br><br><span class="hljs-comment">// 姿势二</span><br>unordered_map&lt;<span class="hljs-type">int</span>, vector&lt;<span class="hljs-type">int</span>&gt;&gt; mp;<br><span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; idx; i += <span class="hljs-number">2</span>) &#123;<br>    <span class="hljs-type">int</span> v = e[i], u = e[i ^ <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">if</span> (v &gt; m &amp;&amp; v &lt;= m + n &amp;&amp; !w[i])<br>        mp[u].<span class="hljs-built_in">pb</span>(v - m);<span class="hljs-comment">// 映射回去</span><br>&#125;<br><span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it : mp[i])<br>        cout &lt;&lt; it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    cout &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><br><h2 id="code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><p><strong>完整的代码如下：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">500</span> + <span class="hljs-number">10</span>, M = (<span class="hljs-number">150</span> * <span class="hljs-number">270</span> +N) * <span class="hljs-number">2</span>, INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MOD = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-type">int</span> e[M], ne[M], h[N], w[M], idx;<br><span class="hljs-type">int</span> n, m, S, T, cur[N], d[N];<br><br><span class="hljs-function">il <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span> </span>&#123;<br>    e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx++;<br>    e[idx] = a, w[idx] = <span class="hljs-number">0</span>, ne[idx] = h[b], h[b] = idx++;<br>&#125;<br><br><span class="hljs-function">il <span class="hljs-type">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(d, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> d);<br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    q.<span class="hljs-built_in">push</span>(S), d[S] = <span class="hljs-number">0</span>, cur[S] = h[S];<br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>()) &#123;<br>        <span class="hljs-type">int</span> t = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[t]; ~i; i = ne[i]) &#123;<br>            <span class="hljs-type">int</span> j = e[i];<br>            <span class="hljs-keyword">if</span> (d[j] == <span class="hljs-number">-1</span> &amp;&amp; w[i]) &#123;<br>                d[j] = d[t] + <span class="hljs-number">1</span>;<br>                cur[j] = h[j];<br>                <span class="hljs-keyword">if</span> (j == T) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                q.<span class="hljs-built_in">push</span>(j);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> limit)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (u == T) <span class="hljs-keyword">return</span> limit;<br>    <span class="hljs-type">int</span> flow = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = cur[u]; ~i &amp;&amp; flow &lt; limit; i = ne[i]) &#123;<br>        cur[u] = i;<br>        <span class="hljs-type">int</span> ver = e[i];<br>        <span class="hljs-keyword">if</span> (d[ver] == d[u] + <span class="hljs-number">1</span> &amp;&amp; w[i]) &#123;<br>            <span class="hljs-type">int</span> t = <span class="hljs-built_in">find</span>(ver, <span class="hljs-built_in">min</span>(w[i], limit - flow)); <br>            <span class="hljs-keyword">if</span> (!t) d[ver] = <span class="hljs-number">-1</span>;<br>            w[i] -= t, w[i ^ <span class="hljs-number">1</span>] += t, flow += t;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (flow == <span class="hljs-number">0</span>)  d[u] = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> flow;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dinic</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> r = <span class="hljs-number">0</span>, flow;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">bfs</span>()) &#123;<br>        <span class="hljs-keyword">while</span> (flow = <span class="hljs-built_in">find</span>(S, INF))<br>            r += flow;<br>    &#125;<br>    <span class="hljs-keyword">return</span> r;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld&quot;</span>, &amp;m, &amp;n);<br>    S = <span class="hljs-number">0</span>, T = m + n + <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-built_in">sizeof</span>(h));<br><br>    <span class="hljs-comment">// 建图</span><br>    <span class="hljs-type">int</span> tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        <span class="hljs-type">int</span> r;  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;r);<br>        <span class="hljs-built_in">add</span>(S, i, r);<br>        tot += r;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-type">int</span> c;  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;c);<br>        <span class="hljs-built_in">add</span>(m + i, T, c);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>        <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)  <br>            <span class="hljs-built_in">add</span>(i, m + j, <span class="hljs-number">1</span>);<br><br>    <span class="hljs-comment">// 判断是否可以找到满足题意的方案</span><br>    <span class="hljs-type">int</span> ans = <span class="hljs-built_in">dinic</span>();<br>    <span class="hljs-keyword">if</span> (ans != tot) &#123;<br>        cout &lt;&lt; <span class="hljs-number">0</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 输出方案</span><br>    cout &lt;&lt; <span class="hljs-number">1</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> u = <span class="hljs-number">1</span>; u &lt;= m; u++) &#123;<br>        <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = h[u]; ~i; i = ne[i]) &#123;<br>            <span class="hljs-type">int</span> j = e[i];<br>            <span class="hljs-keyword">if</span> (j &gt; m &amp;&amp; j &lt;= m + n &amp;&amp; !w[i])<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld &quot;</span>, j - m);<br>        &#125;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure></font><br>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 网络流24题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】飞行员配对问题</title>
      <link href="/post/85b494b8.html"/>
      <url>/post/85b494b8.html</url>
      
        <content type="html"><![CDATA[<font size="3"><meta name="referrer" content="no-referrer"><p>题目链接： <a href="https://www.luogu.com.cn/problem/P2756">https://www.luogu.com.cn/problem/P2756</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>一共有 n 个飞行员，其中有 m 个外籍飞行员和 (n−m) 个英国飞行员</p><p>外籍飞行员从 1 到 m 编号，英国飞行员从 m+1 到 n 编号</p><p> 对于给定的外籍飞行员与英国飞行员的配合情况，找出最佳飞行员配对方案。</p><p><strong>一句话：</strong></p><p><strong>m 个外籍和 n-m 个英国飞行员两两配对，问最大匹配数和匹配方案</strong></p><br><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><font size="4"> <p>很明显的二分图最大匹配模型。</p></font><p>对于二分图的最大匹配问题：</p><ul><li><p>匈牙利算法的时间复杂度是$O(nm)$</p></li><li><p>Dinic算法的时间复杂度是$O(m\sqrt{n})$</p></li></ul><p>匈牙利算法是每次只找一条增广路的最大流算法。</p><p><strong>所以匈牙利算法本质上就是 EK算法</strong></p><br><p><strong>建图：</strong></p><p>根据流网络的定义，先建立源点S和汇点T。</p><ul><li>从源点S向所有外籍飞行员建立一条容量为1的边</li><li>从所有外籍飞行员向其可搭档的英国飞行员建立一条容量为1的边</li><li>从所有英国飞行员向汇点T建立一条容量为1的边。</li></ul><p>可以发现，整个流网络中的可行流满足容量限制和流量守恒。</p><p>所以任意一个可行流都是一个满足题意的解</p><p>那么，整个流网络中的最大流便是最大匹配方案</p><br><h2 id="输出方案"><a href="#输出方案" class="headerlink" title="输出方案"></a>输出方案</h2><p>枚举所有左右两个集合之间的边，看哪条边的流量是满的</p><p>流满则意味着这是一组可行的匹配</p><p>有很多种处理的方式，下面是其中一种。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 枚举所有的正向边</span><br><span class="hljs-comment">// 因为存图时我们成对存储，所以偶数的边就是正向边</span><br><span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; idx; i += <span class="hljs-number">2</span>) &#123;<br>    <span class="hljs-comment">// 两个端点</span><br>    <span class="hljs-type">int</span> v = e[i], u = e[i ^ <span class="hljs-number">1</span>];<br>    <span class="hljs-comment">// 如果两个端点分别在两个集合中 并且这条边的流量已满</span><br>    <span class="hljs-keyword">if</span> (v &gt; m &amp;&amp; v &lt;= n &amp;&amp; !w[i])<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld %lld\n&quot;</span>, u, v);<span class="hljs-comment">// 输出方案</span><br>&#125;<br></code></pre></td></tr></table></figure><br><h2 id="code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><p><strong>完整的代码如下：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">500</span> + <span class="hljs-number">10</span>, M = <span class="hljs-number">6000</span> + <span class="hljs-number">10</span>, INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MOD = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-type">int</span> e[M], ne[M], h[N], w[M], idx;<br><span class="hljs-type">int</span> n, m, S, T, cur[N], d[N];<br><br><span class="hljs-function">il <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span> </span>&#123;<br>    e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx++;<br>    e[idx] = a, w[idx] = <span class="hljs-number">0</span>, ne[idx] = h[b], h[b] = idx++;<br>&#125;<br><br><span class="hljs-function">il <span class="hljs-type">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(d, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> d);<br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    q.<span class="hljs-built_in">push</span>(S), d[S] = <span class="hljs-number">0</span>, cur[S] = h[S];<br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>()) &#123;<br>        <span class="hljs-type">int</span> t = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[t]; ~i; i = ne[i]) &#123;<br>            <span class="hljs-type">int</span> j = e[i];<br>            <span class="hljs-keyword">if</span> (d[j] == <span class="hljs-number">-1</span> &amp;&amp; w[i]) &#123;<br>                d[j] = d[t] + <span class="hljs-number">1</span>;<br>                cur[j] = h[j];<br>                <span class="hljs-keyword">if</span> (j == T) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                q.<span class="hljs-built_in">push</span>(j);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> limit)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (u == T) <span class="hljs-keyword">return</span> limit;<br>    <span class="hljs-type">int</span> flow = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = cur[u]; ~i &amp;&amp; flow &lt; limit; i = ne[i]) &#123;<br>        cur[u] = i;<br>        <span class="hljs-type">int</span> ver = e[i];<br>        <span class="hljs-keyword">if</span> (d[ver] == d[u] + <span class="hljs-number">1</span> &amp;&amp; w[i]) &#123;<br>            <span class="hljs-type">int</span> t = <span class="hljs-built_in">find</span>(ver, <span class="hljs-built_in">min</span>(w[i], limit - flow)); <br>            <span class="hljs-keyword">if</span> (!t) d[ver] = <span class="hljs-number">-1</span>;<br>            w[i] -= t, w[i ^ <span class="hljs-number">1</span>] += t, flow += t;<br>        &#125; <br>    &#125;<br>    <span class="hljs-keyword">if</span> (flow == <span class="hljs-number">0</span>)  d[u] = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> flow;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dinic</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> r = <span class="hljs-number">0</span>, flow;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">bfs</span>()) &#123;<br>        <span class="hljs-keyword">while</span> (flow = <span class="hljs-built_in">find</span>(S, INF))<br>            r += flow;<br>    &#125;<br>    <span class="hljs-keyword">return</span> r;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld&quot;</span>, &amp;m, &amp;n);<br>    S = <span class="hljs-number">0</span>, T = n + <span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">// 建图</span><br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-built_in">sizeof</span>(h));<br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) <span class="hljs-built_in">add</span>(S, i, <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = m + <span class="hljs-number">1</span>; i &lt;= n; i++) <span class="hljs-built_in">add</span>(i, T, <span class="hljs-number">1</span>);<br>    <br>    <span class="hljs-type">int</span> a, b;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld&quot;</span>, &amp;a, &amp;b), a != <span class="hljs-number">-1</span> &amp;&amp; b != <span class="hljs-number">-1</span>)<br>        <span class="hljs-built_in">add</span>(a, b, <span class="hljs-number">1</span>);<br>    <br>    <span class="hljs-comment">// 求最大流</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, <span class="hljs-built_in">dinic</span>());<br><br>    <span class="hljs-comment">// 输出方案</span><br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; idx; i += <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-type">int</span> v = e[i], u = e[i ^ <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">if</span> (v &gt; m &amp;&amp; v &lt;= n &amp;&amp; !w[i])<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld %lld\n&quot;</span>, u, v); <br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure></font><br>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 网络流24题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【ACM】网络流-最大流</title>
      <link href="/post/8448711d.html"/>
      <url>/post/8448711d.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p>要求：</p><p>给定一个有向带权图，其中有两个特殊的点源S（Sources）和汇T（Sinks）</p><p>每条边有指定的容量（Capacity），求满足条件的从S到T的最大流（MaxFlow）</p><p>本篇内容都基于：<a href="https://www.bilibili.com/video/BV1K64y1C7Do/">https://www.bilibili.com/video/BV1K64y1C7Do/</a></p><h2 id="基本理解"><a href="#基本理解" class="headerlink" title="基本理解"></a>基本理解</h2><p>我们可以这样理解最大流问题：</p><ul><li><p>我们希望把水从起点 S 送到终点 T ，水要通过一些管道来输送，这些管道就是途图中的边。</p></li><li><p>边都有权重，即管道的容量，送水量不能超过管道的容量。</p></li><li><p>给定管道的限制，请问水的最大流量是多少。</p></li></ul><p><font size="4"><strong>我们先了解一种简单但是不能保证正确性的算法</strong></font></p><h2 id="naive-algorithm"><a href="#Naive-Algorithm" class="headerlink" title="Naive Algorithm"></a>Naive Algorithm</h2><p><strong>首先我们先了解什么是增广路径</strong></p><p>增广路就是从起点 S 出发，经过容量大于零的边，到达终点 T 的简单路径（无环）</p><p>我们只考虑基于原图构造的 <strong>Residual Graph</strong>，即边权为空闲量的图（残留网络）</p><p>初始时，由于没有水流经过，残留网络就是原图。</p><p><img src="https://gitee.com/Greedy_firtree/picture/raw/master/blog/image-20221210104305479.png" alt="image-20221210104305479"></p><p>当可以找到增广路径时我们循环进行以下操作</p><ul><li>先找到一条从起点 S 到终点 T 的增广路</li><li>找到此条路经的最小权重 x</li><li>路径上的边权（空闲量）都减去 x</li></ul><p><strong>但是这种算法会根据选择路径的顺序造成不同的答案，不能保证找到的一定是最大流，只能保证找到一个阻塞流 (Blocking Flow)。</strong></p><p>所以我们需要稍微复杂的算法来解决最大流的问题</p><h2 id="ford-fulkerson-algorithm"><a href="#Ford-Fulkerson-Algorithm" class="headerlink" title="Ford-Fulkerson Algorithm"></a>Ford-Fulkerson Algorithm</h2><p>Ford-Fulkerson 算法，由 Ford 和 Fulkerson 两人在 1956 年提出，这种算法可以保证找到最大流。</p><p><font color="#004a97">最坏情况下，算法的时间复杂度是 $O(f m)$，$f$ 是最大流的大小，$m$ 是边的数量。</font></p><p>观察发现简单算法的缺陷是算法不能反悔，不能纠错，一旦坏的路径被找到算法就不能找到最大流。</p><p>而Ford-Fulkerson 算法可以”反悔“，将坏的路径撤销。</p><p>依旧是仅考虑 <strong>Residual Graph</strong></p><p>与简单算法很像，当可以找到增广路时我们循环进行以下操作：</p><ul><li><p>在当前的残留网络中找增广路</p></li><li><p>更新当前的残留网络</p><ul><li><p>找到此条路经的最小权重 x</p></li><li><p>路径上的边权（空闲量）都减去 x</p></li><li><p><font color="red">添加一条权重为 x 的反向路径</font></p></li></ul></li></ul><p><strong>过程中，我们可以通过添加反向边来”纠错“。</strong></p><p><img src="https://gitee.com/Greedy_firtree/picture/raw/master/blog/image-20221210105509117.png" alt="image-20221210105509117"></p><br><h2 id="edmonds-karp-algorithm"><a href="#Edmonds-Karp-Algorithm" class="headerlink" title="Edmonds-Karp Algorithm"></a>Edmonds-Karp Algorithm</h2><p>因为Ford-Fulkerson 算法的复杂度依赖最大流的大小，最坏情况下可能会很大，所以我们常把Ford-Fulkerson 算法叫做<strong>FF方法</strong>，把它当作解决最大流问题的一个核心思路，在此基础上进行不同的实现方法。</p><p>下面我们了解一个新的算法——Edmonds-Karp 算法，由 Edmonds 和 Karp 两人在 1972 年提出。</p><p>我们可以把 EK算法理解为 FF方法的一种具体实现方式，一定能找到最大流。</p><p><font size="4"><strong>核心在于 Edmonds-Karp 算法在寻找简单路径时要使用最短路算法：</strong></font></p><ul><li>寻找最短路的时候，把图当做无权图，也就是边的权重都是1。</li></ul><p><font size="4">可以想到，用基础的bfs就可以解决。</font></p><p><font color="#004a97">最坏情况下，算法的时间复杂度是 $O(nm^2)$</font></p><br><h3 id="如何存图呢"><a href="#如何存图呢" class="headerlink" title="如何存图呢"></a>如何存图呢</h3><p>我们发现，算法的实现过程中需要<strong>快速的找到某条边的反向边</strong></p><p>所以在用<strong>链式前向星</strong>加边的时候，我们把正向边和反向边成对连续添加。</p><p>那么第 i 条边的反向边实际就是第 i ^ 1 条边。</p><p>在记录路径时，我们用 pre[] 数组记录当前点的<strong>前驱边</strong></p><p><img src="https://gitee.com/Greedy_firtree/picture/raw/master/blog/image-20221210220602561.png" alt="image-20221210220602561"></p><p>如上图，假设我们此时找到了点v</p><p>edge1实际就是 pre[i]，反向边edge2就是 pre[i] ^ 1</p><p>而点 u 就是 e[pre[i] ^ 1]。</p><br><h3 id="code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// https://www.luogu.com.cn/problem/P3376</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1000</span> + <span class="hljs-number">10</span>, M = <span class="hljs-number">20010</span>, INF = <span class="hljs-number">1e18</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MOD = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-type">int</span> e[M], ne[M], h[N], w[M], idx;<br><span class="hljs-type">int</span> n, m, S, T, zz[N][N], d[N], pre[N];<br><span class="hljs-type">bool</span> st[N];<br><br><span class="hljs-function">il <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span> </span>&#123;<br>    e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx++;<br>    e[idx] = a, w[idx] = <span class="hljs-number">0</span>, ne[idx] = h[b], h[b] = idx++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(st, <span class="hljs-literal">false</span>, <span class="hljs-built_in">sizeof</span>(st));<br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    q.<span class="hljs-built_in">push</span>(S), st[S] = <span class="hljs-literal">true</span>, d[S] = INF;<br>    <br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>()) &#123;<br>        <span class="hljs-type">int</span> t = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[t]; ~i; i = ne[i]) &#123;<br>            <span class="hljs-type">int</span> j = e[i];<br>            <span class="hljs-keyword">if</span> (st[j] || !w[i]) <span class="hljs-keyword">continue</span>;<br>            st[j] = <span class="hljs-literal">true</span>;<br>            d[j] = <span class="hljs-built_in">min</span>(d[t], w[i]);<br>            pre[j] = i;<span class="hljs-comment">// 这里记录的实际是前驱边</span><br>            <span class="hljs-keyword">if</span> (j == T) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            q.<span class="hljs-built_in">push</span>(j);<br>        &#125; <br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function">il <span class="hljs-type">int</span> <span class="hljs-title">EK</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">bfs</span>()) &#123;<br>        ans += d[T];<span class="hljs-comment">// 这里就是我们存图的技巧</span><br>        <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = T; i != S; i = e[pre[i] ^ <span class="hljs-number">1</span>])<br>            w[pre[i]] -= d[T], w[pre[i] ^ <span class="hljs-number">1</span>] += d[T];<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-built_in">sizeof</span>(h));<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld%lld%lld&quot;</span>, &amp;n, &amp;m, &amp;S, &amp;T);<br><br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        <span class="hljs-type">int</span> a, b, c;    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld%lld&quot;</span>, &amp;a, &amp;b, &amp;c);<br>        zz[a][b] += c;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>            <span class="hljs-keyword">if</span> (zz[i][j])   <span class="hljs-built_in">add</span>(i, j, zz[i][j]);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, <span class="hljs-built_in">EK</span>());<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><h2 id="dinic-algorithm"><a href="#Dinic-Algorithm" class="headerlink" title="Dinic Algorithm"></a>Dinic Algorithm</h2><p>Dinic 算法，它由 Dinitz 在 1970 年提出。</p><p><font color="#004a97">最坏情况下，算法的时间复杂度是 $O(mn^2)$</font></p><p>Ek算法每次在残留网络中找一条增广路，而Dinic算法则是每次找到尽量多的增广路。</p><p>为了防止在找增广路时出现环，我们引入分层图的概念。</p><p> 首先了解什么是<strong>Level Graph：</strong></p><p>我们把从起点走x步可以到达的点看作一层，<strong>Level Graph</strong> 就是只保留相邻层之间的边的图，是原图的一个子图，且一点没有环。</p><p>下面左图就是右图（原图）的分层图，使用 bfs 即可做到。</p><p><img src="https://gitee.com/Greedy_firtree/picture/raw/master/blog/image-20221210113123903.png" alt="image-20221210113123903"></p><p>算法的流程如下：</p><p>1、先构造残留网（边权为空闲量的图）</p><p>2、然后我们进行以下循环：</p><ul><li>构造残留网络的 Leval Graph（bfs）</li><li>在构造的 Leval Graph 中（下面的左图）寻找所有的增广路径</li></ul><p><img src="https://gitee.com/Greedy_firtree/picture/raw/master/blog/image-20221210113843073.png" alt="image-20221210113843073"></p><ul><li>然后我们更新右图，在残留网络中减去 Leval Graph 的流量，再添加反向边</li></ul><p> <img src="https://gitee.com/Greedy_firtree/picture/raw/master/blog/image-20221210114211420.png" alt="image-20221210114211420"></p><br><h3 id="当前弧优化"><a href="#当前弧优化" class="headerlink" title="当前弧优化"></a>当前弧优化</h3><p>如果某条边在搜索的时候已经满了，那么我们可以跳过这条边，从下一条边开始搜。</p><br><h3 id="code"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// https://www.luogu.com.cn/problem/P3376</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">10010</span> + <span class="hljs-number">10</span>, M = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>, INF = <span class="hljs-number">1e18</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MOD = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-type">int</span> e[M], ne[M], h[N], w[M], idx;<br><span class="hljs-type">int</span> n, m, S, T, cur[N], d[N];<br><br><span class="hljs-function">il <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span> </span>&#123;<br>    e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx++;<br>    e[idx] = a, w[idx] = <span class="hljs-number">0</span>, ne[idx] = h[b], h[b] = idx++;<br>&#125;<br><br><span class="hljs-comment">// 判断是否含有增广路</span><br><span class="hljs-comment">// 有则返回true，并且构造分层图</span><br><span class="hljs-comment">// 没有则返回false</span><br><span class="hljs-function">il <span class="hljs-type">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(d, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> d);<br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    q.<span class="hljs-built_in">push</span>(S), d[S] = <span class="hljs-number">0</span>, cur[S] = h[S];<br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>()) &#123;<br>        <span class="hljs-type">int</span> t = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[t]; ~i; i = ne[i]) &#123;<br>            <span class="hljs-type">int</span> j = e[i];<br>            <span class="hljs-keyword">if</span> (d[j] == <span class="hljs-number">-1</span> &amp;&amp; w[i]) &#123;<br>                d[j] = d[t] + <span class="hljs-number">1</span>;<br>                cur[j] = h[j];<br>                <span class="hljs-keyword">if</span> (j == T)<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                q.<span class="hljs-built_in">push</span>(j);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> limit)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (u == T)<span class="hljs-keyword">return</span> limit;<br>    <br>    <span class="hljs-type">int</span> flow = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = cur[u]; ~i &amp;&amp; flow &lt; limit; i = ne[i]) &#123;<br>        cur[u] = i;  <span class="hljs-comment">// 当前弧优化</span><br>        <span class="hljs-type">int</span> ver = e[i];<br>        <span class="hljs-keyword">if</span> (d[ver] == d[u] + <span class="hljs-number">1</span> &amp;&amp; w[i]) &#123;<br>            <span class="hljs-type">int</span> t = <span class="hljs-built_in">find</span>(ver, <span class="hljs-built_in">min</span>(w[i], limit - flow));<br>            <span class="hljs-keyword">if</span> (!t)d[ver] = <span class="hljs-number">-1</span>;<span class="hljs-comment">// 残枝优化</span><br>            w[i] -= t, w[i ^ <span class="hljs-number">1</span>] += t, flow += t;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> flow;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dinic</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> r = <span class="hljs-number">0</span>, flow;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">bfs</span>()) &#123;<br>        <span class="hljs-keyword">while</span> (flow = <span class="hljs-built_in">find</span>(S, INF))<br>            r += flow;<br>    &#125;<br>    <span class="hljs-keyword">return</span> r;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld%lld%lld&quot;</span>, &amp;n, &amp;m, &amp;S, &amp;T);<br>    <span class="hljs-keyword">while</span> (m--) &#123;<br>        <span class="hljs-type">int</span> a, b, c;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld%lld&quot;</span>, &amp;a, &amp;b, &amp;c);<br>        <span class="hljs-built_in">add</span>(a, b, c);<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, <span class="hljs-built_in">dinic</span>());<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>由于一些奇怪的原因，最大流算法中的时间复杂度上限很宽松</p><p><strong>实际运行速度远比理论上的要好很多。</strong></p><p>所以 EK算法 实际上大致可以解决1000~10000的点</p><p>Dinic算法 则大致可以解决10000~100000的点</p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 网络流 </tag>
            
            <tag> 最大流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Template-Math</title>
      <link href="/post/ecb77944.html"/>
      <url>/post/ecb77944.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><img src="https://gitee.com/Greedy_firtree/picture/raw/master/blog/image-20221209135823540.png" alt="image-20221209135823540"></p><p><font size="5" color="#004a97"><strong>数学</strong></font></p><br><h2 id="__int128"><a href="#int128" class="headerlink" title="__int128"></a>__int128</h2><p><strong>从招招那里抄的kuangbin模板。</strong></p><p>范围：$$[-2^{127}, 2^{127}]\space  约10^{38}$$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">inline</span> __int128 <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    __int128 x = <span class="hljs-number">0</span>, f = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">char</span> ch = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (ch &lt; <span class="hljs-string">&#x27;0&#x27;</span> || ch &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<br>        <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;-&#x27;</span>)  f = <span class="hljs-number">-1</span>;<br>        ch = <span class="hljs-built_in">getchar</span>();<br>    &#125;<br>    <span class="hljs-keyword">while</span> (ch &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<br>        x = x * <span class="hljs-number">10</span> + ch - <span class="hljs-string">&#x27;0&#x27;</span>;<br>        ch = <span class="hljs-built_in">getchar</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> x * f;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(__int128 x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;-&#x27;</span>);<br>        x = -x;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">9</span>)  <span class="hljs-built_in">print</span>(x / <span class="hljs-number">10</span>);<br>    <span class="hljs-built_in">putchar</span>(x % <span class="hljs-number">10</span> + <span class="hljs-string">&#x27;0&#x27;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br>    __int128 a = <span class="hljs-built_in">read</span>();<br>    __int128 b = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-built_in">print</span>(a + b);<br>    cout &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><h2 id="最大公约数"><a href="#最大公约数" class="headerlink" title="最大公约数"></a>最大公约数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> b == <span class="hljs-number">0</span> ? a : <span class="hljs-built_in">gcd</span>(b, a % b);<br>&#125;<br></code></pre></td></tr></table></figure><br><h2 id="最小公倍数"><a href="#最小公倍数" class="headerlink" title="最小公倍数"></a>最小公倍数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lcm</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> a / <span class="hljs-built_in">gcd</span>(a, b) * b;<br>&#125;<br></code></pre></td></tr></table></figure><br><h2 id="筛质数"><a href="#筛质数" class="headerlink" title="筛质数"></a>筛质数</h2><h3 id="埃筛"><a href="#埃筛" class="headerlink" title="埃筛"></a>埃筛</h3><p><font color="#004a97">时间复杂度 $O(nloglogn)$   </font></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">bool</span> isprime[N];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; i++)<br>        isprime[i] = <span class="hljs-literal">true</span>;            <span class="hljs-comment">// 先全部置为真</span><br>    isprime[<span class="hljs-number">0</span>] = isprime[<span class="hljs-number">1</span>] = <span class="hljs-literal">false</span>;  <span class="hljs-comment">// 1 0 不是素数</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (isprime[i])<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">2</span> * i; j &lt;= n; j += i)<br>                isprime[j] = <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">if</span> (isprime[i]) &#123;<br>            cnt++;             <span class="hljs-comment">// 素数的个数</span><br>            cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;  <span class="hljs-comment">// 输出该素数</span><br>        &#125;<br>    &#125;<br>    cout &lt;&lt; endl &lt;&lt; cnt;  <span class="hljs-comment">// 输出总个数</span><br></code></pre></td></tr></table></figure><br><h3 id="线性筛"><a href="#线性筛" class="headerlink" title="线性筛"></a>线性筛</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pirme</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (!st[i])<br>            p[cnt++] = i;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; p[j] &lt;= n / i; j++) &#123;<br>            st[p[j] * i] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (i % p[j] == <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><h2 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">qmi</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> p)</span> </span>&#123;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">1</span> % p;<br>    <span class="hljs-keyword">while</span> (b) &#123;<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>)  ans = a * ans % p;<br>        a = a * a % p;<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-comment">// 逆元</span><br><span class="hljs-built_in">test</span>(n, mod - <span class="hljs-number">2</span>, mod)<br></code></pre></td></tr></table></figure><br><h2 id="快速乘"><a href="#快速乘" class="headerlink" title="快速乘"></a>快速乘</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">mul</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (b) &#123;<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>)  ans = (ans + a) % mod;<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>        a = (a * <span class="hljs-number">2</span>) % mod;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><br><h2 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h2><p><font size="4">1 ~ N 中与 N 互质的数</font></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">phi</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-type">int</span> res = x;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= x / i; i++) &#123;<br>        <span class="hljs-keyword">if</span> (x % i == <span class="hljs-number">0</span>) &#123;<br>            res = res / i * (i - <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">while</span> (x % i == <span class="hljs-number">0</span>)<br>                x /= i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">1</span>)  res = res / x * (x - <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><br><span class="hljs-comment">// 筛法欧拉函数</span><br><span class="hljs-comment">// 求 1 - N 中每个数的欧拉函数之和</span><br><span class="hljs-type">int</span> p[N], cnt, e[N];<br><span class="hljs-type">bool</span> st[N];<br><span class="hljs-function">ll <span class="hljs-title">get_eulars</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>    e[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (!st[i]) &#123;<br>            p[cnt++] = i;<br>            e[i] = i - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; p[j] &lt;= n / i; j++) &#123;<br>            <span class="hljs-type">int</span> t = p[j] * i;<br>            st[t] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (i % p[j] == <span class="hljs-number">0</span>) &#123;<br>                e[t] = e[i] * p[j];<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            e[t] = e[i] * (p[j] - <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br><br>    ll ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)ans += e[i];<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><br><h2 id="组合数"><a href="#组合数" class="headerlink" title="组合数"></a>组合数</h2><p>$$C_a^b\ mod\ (1e9+7)$$</p><h3 id="姿势一"><a href="#姿势一" class="headerlink" title="姿势一"></a>姿势一</h3><p>范围：</p><p>$$1≤b≤a≤2000$$</p><p>解法：</p><p>$$C_a^b&#x3D;C_{a-1}^{b-1}+C_{a-1}^b$$</p><p><font color="#004a97">时间复杂度 $O(n^2)$   </font></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2022</span>;<br><span class="hljs-type">int</span> n, p = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-type">int</span> C[N][N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= i; j++) &#123;<br>            <span class="hljs-keyword">if</span> (j == <span class="hljs-number">0</span>)<br>                C[i][j] = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span><br>                C[i][j] = (C[i - <span class="hljs-number">1</span>][j] + C[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>]) % p;<br>        &#125;<br>    <span class="hljs-keyword">while</span> (n--) &#123;<br>        <span class="hljs-type">int</span> a, b;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);<br>        cout &lt;&lt; C[a][b] &lt;&lt; endl;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="姿势二"><a href="#姿势二" class="headerlink" title="姿势二"></a>姿势二</h3><p>范围：</p><p>$$1≤b≤a≤10^5$$</p><p>解法：</p><p>$$C_a^b&#x3D;\frac{a!}{b!(a-b)!}$$</p><p><font color="#004a97">时间复杂度 $O(a*log(mod))$   </font></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>, mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-type">int</span> fact[N], infact[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">qmi</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b,<span class="hljs-type">int</span> mod)</span></span>&#123;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (b)&#123;<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>)  ans = ans * a % mod;<br>        a = a * a % mod;<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    fact[<span class="hljs-number">0</span>] = infact[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; N; i++)&#123;<br>        fact[i] = fact[i - <span class="hljs-number">1</span>] * i % mod;<br>        infact[i] = infact[i - <span class="hljs-number">1</span>] * <span class="hljs-built_in">qmi</span>(i, mod - <span class="hljs-number">2</span>, mod) % mod;<br>    &#125;<br><br>    <span class="hljs-type">int</span> t;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)&#123;<br>        <span class="hljs-type">int</span> a, b;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);<br>        <span class="hljs-type">int</span> ans = fact[a] * infact[a - b] % mod * infact[b] % mod;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%intd\n&quot;</span>, ans);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="姿势三"><a href="#姿势三" class="headerlink" title="姿势三"></a>姿势三</h3><p>范围：</p><p>$$1≤b≤a≤10^{18},\ 1≤p≤10^5$$</p><p>解法：</p><p><strong>卢卡斯定理</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">qmi</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> p)</span> </span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">1</span> % p;<br>    <span class="hljs-keyword">while</span> (b) &#123;<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>)  res = res * a % p;<br>        a = (<span class="hljs-type">int</span>)a * a % p;<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">C</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> p)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (b &gt; a)  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, j = a; i &lt;= b; i++, j--) &#123;<br>        res = (<span class="hljs-type">int</span>)res * j % p;<br>        res = (<span class="hljs-type">int</span>)res * <span class="hljs-built_in">qmi</span>(i, p - <span class="hljs-number">2</span>, p) % p;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lucas</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> p)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (a &lt; p &amp;&amp; b &lt; p) <span class="hljs-keyword">return</span> <span class="hljs-built_in">C</span>(a, b, p);<br>    <span class="hljs-keyword">return</span> (<span class="hljs-type">int</span>)<span class="hljs-built_in">C</span>(a % p, b % p, p) * <span class="hljs-built_in">lucas</span>(a / p, b / p, p) % p;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">while</span> (n--) &#123;<br>        <span class="hljs-type">int</span> a, b, p;<br>        cin &gt;&gt; a &gt;&gt; b &gt;&gt; p;<br>        cout &lt;&lt; <span class="hljs-built_in">lucas</span>(a, b, p) &lt;&lt; endl;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><p><strong>卢卡斯 + 预处理</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> n, p, a[N], dp[N], sz[N], fact[N], infact[N];<br><br><span class="hljs-function">ll <span class="hljs-title">qmi</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> p)</span> </span>&#123;<br>    ll res = <span class="hljs-number">1</span> % p;<br>    <span class="hljs-keyword">while</span> (b) &#123;<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>)  res = res * a % p;<br>        a = (ll)a * a % p;<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">C</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> p)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> fact[a] * infact[a - b] % p * infact[b] % p;<br>&#125;<br><br><span class="hljs-function">il <span class="hljs-type">int</span> <span class="hljs-title">lucas</span><span class="hljs-params">(ll a, ll b, <span class="hljs-type">int</span> p)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (a &lt; p &amp;&amp; b &lt; p)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">C</span>(a, b, p);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">C</span>(a % p, b % p, p) * <span class="hljs-built_in">lucas</span>(a / p, b / p, p) % p;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n &gt;&gt; p;<br><br>    fact[<span class="hljs-number">0</span>] = infact[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        fact[i] = fact[i - <span class="hljs-number">1</span>] * i % p;<br>        infact[i] = infact[i - <span class="hljs-number">1</span>] * <span class="hljs-built_in">qmi</span>(i, p - <span class="hljs-number">2</span>, p) % p;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        sz[i] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = n; i &gt;= <span class="hljs-number">2</span>; i--)<br>        sz[i &gt;&gt; <span class="hljs-number">1</span>] += sz[i];<br><br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = n; i &lt;= <span class="hljs-number">2</span> * n + <span class="hljs-number">1</span>; i++)<br>        dp[i] = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = n; i &gt;= <span class="hljs-number">1</span>; i--) &#123;<br>        <span class="hljs-type">int</span> a = sz[i] - <span class="hljs-number">1</span>, b = sz[i &lt;&lt; <span class="hljs-number">1</span>];<br>        <span class="hljs-type">int</span> num = <span class="hljs-built_in">lucas</span>(a, b, p);<br>        dp[i] = num % p * dp[i &lt;&lt; <span class="hljs-number">1</span>] % p * dp[i &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>] % p;<br>    &#125;<br><br>    cout &lt;&lt; dp[<span class="hljs-number">1</span>] &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><h2 id="整除分块"><a href="#整除分块" class="headerlink" title="整除分块"></a>整除分块</h2><p>抄招招的模板<img src="https://gitee.com/Greedy_firtree/picture/raw/master/blog/image-20221209150128352.png" alt="image-20221209150128352"></p><p>$$\sum_{i&#x3D;1}^n\lfloor\frac{n}{i}\rfloor$$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 下取整</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">getdown</span> <span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br><span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> l = <span class="hljs-number">1</span>, r, len; l &lt;= n; l = r + <span class="hljs-number">1</span>) &#123;<br>        r = n / (n / l), len = r - l + <span class="hljs-number">1</span>;<br>        ans += len * (n / l);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-comment">// 上取整</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">getup</span> <span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br><span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> l = <span class="hljs-number">1</span>, r, len; l &lt;= n; l = r + <span class="hljs-number">1</span>) &#123;<br>        r = n / (n / l), len = r - l + <span class="hljs-number">1</span>;<br>        ans += len * (n / l + <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span> (n % r == <span class="hljs-number">0</span>) ans -= r;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><br><h2 id="正方形长方形"><a href="#正方形长方形" class="headerlink" title="正方形长方形"></a>正方形长方形</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-type">int</span> ta = n * (n + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>    <span class="hljs-type">int</span> tb = m * (m + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>    <span class="hljs-type">int</span> all = ta * tb;<br>    <span class="hljs-type">int</span> zh = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-built_in">min</span>(n, m); i++) &#123;<br>        zh += (m - i + <span class="hljs-number">1</span>) * (n - i + <span class="hljs-number">1</span>);<br>    &#125;<br>    cout &lt;&lt; zh &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; all - zh &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><h2 id="博弈论"><a href="#博弈论" class="headerlink" title="博弈论"></a>博弈论</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 巴什博弈</span><br>只有一堆，n个物品，两个人轮流从这堆物品中取物<br>规定每次至少取一个，最多取m个。最后取光者得胜。<br><br>结论：<br>若 n % (m + <span class="hljs-number">1</span>) = <span class="hljs-number">0</span>，则先手必败。<br>否则先手必胜。<br><br><br><br><span class="hljs-comment">// 尼姆博弈</span><br>有n堆各若干个物品，两个人轮流从某一堆取任意多的物品<br>规定每次至少取一个，多者不限，最后取光者得胜。<br><br>结论：<br>若 a1^a2^...^an = <span class="hljs-number">0</span>，则先手必败。<br>否则先手必胜。<br></code></pre></td></tr></table></figure><br><h2 id="矩阵ksm"><a href="#矩阵ksm" class="headerlink" title="矩阵ksm"></a>矩阵ksm</h2><br><h2 id="线性基"><a href="#线性基" class="headerlink" title="线性基"></a>线性基</h2><br>]]></content>
      
      
      <categories>
          
          <category> ACM-Template </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Template-Graph</title>
      <link href="/post/70dc2d05.html"/>
      <url>/post/70dc2d05.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><img src="https://gitee.com/Greedy_firtree/picture/raw/master/blog/image-20221208195445408.png" alt="image-20221208195445408"></p><p><font size="5" color="#004a97"><strong>图论</strong></font></p><br><h2 id="最短路"><a href="#最短路" class="headerlink" title="最短路"></a>最短路</h2><h3 id="朴素dijkstra"><a href="#朴素Dijkstra" class="headerlink" title="朴素Dijkstra"></a>朴素Dijkstra</h3><p><font color="#004a97">时间复杂度 $O(n^2)$   </font></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//用邻接矩阵储存，适用于稠密图</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">510</span>;<br><span class="hljs-type">int</span> n, m;             <span class="hljs-comment">// n表示点数，m表示边数</span><br><span class="hljs-type">int</span> g[N][N], dis[N];  <span class="hljs-comment">// g表示邻接矩阵，dis表示每个点到起点的距离</span><br><span class="hljs-type">bool</span> used[N];         <span class="hljs-comment">// 记录某个点是否被使用过</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">(<span class="hljs-type">int</span> s)</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0x3f</span>, <span class="hljs-built_in">sizeof</span>(dis));<br>    dis[s] = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-type">int</span> t = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>            <span class="hljs-keyword">if</span> (!used[j] &amp;&amp; (t == <span class="hljs-number">-1</span> || dis[t] &gt; dis[j]))   t = j;<br><br>        <span class="hljs-keyword">if</span> (t == <span class="hljs-number">-1</span>)    <span class="hljs-keyword">break</span>;<br><br>        used[t] = <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>            dis[j] = <span class="hljs-built_in">min</span>(dis[j], dis[t] + g[t][j]);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (dis[n] == <span class="hljs-number">0x3f3f3f3f</span>)   <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">else</span>    <span class="hljs-keyword">return</span> dis[n];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br><br>    <span class="hljs-built_in">memset</span>(g, <span class="hljs-number">0x3f</span>, <span class="hljs-built_in">sizeof</span>(g));<br><br>    <span class="hljs-keyword">while</span> (m--) &#123;<br>        <span class="hljs-type">int</span> a, b, c;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);<br>        <span class="hljs-comment">// 存在重边和自环时，仅需处理最短的边即可</span><br>        g[a][b] = <span class="hljs-built_in">min</span>(g[a][b], c);<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-built_in">dijkstra</span>(<span class="hljs-number">1</span>) &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="堆优化dijkstra"><a href="#堆优化Dijkstra" class="headerlink" title="堆优化Dijkstra"></a>堆优化Dijkstra</h3><p><font color="#004a97">时间复杂度 $O((n+m) logn)$   </font></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> h[N], w[N], e[N], ne[N], idx;<br><span class="hljs-type">int</span> n, m, dist[N];<br><span class="hljs-type">bool</span> used[N];  <span class="hljs-comment">// 记录某个点是否被使用过</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span> </span>&#123;<br>    e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">(<span class="hljs-type">int</span> s)</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(dist, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dist);<br>    dist[s] = <span class="hljs-number">0</span>;<br>    priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; heap;<br>    heap.<span class="hljs-built_in">push</span>(&#123;<span class="hljs-number">0</span>, s&#125;);<br><br>    <span class="hljs-keyword">while</span> (!heap.<span class="hljs-built_in">empty</span>()) &#123;<br>        <span class="hljs-keyword">auto</span> t = heap.<span class="hljs-built_in">top</span>();<br>        heap.<span class="hljs-built_in">pop</span>();<br><br>        <span class="hljs-type">int</span> ver = t.second, distance = t.first;<br><br>        <span class="hljs-keyword">if</span> (used[ver])  <span class="hljs-keyword">continue</span>;<br>        used[ver] = <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[ver]; i != <span class="hljs-number">-1</span>; i = ne[i]) &#123;<br>            <span class="hljs-type">int</span> j = e[i];<br>            <span class="hljs-keyword">if</span> (dist[j] &gt; dist[ver] + w[i]) &#123;<br>                dist[j] = dist[ver] + w[i];<br>                heap.<span class="hljs-built_in">push</span>(&#123;dist[j], j&#125;);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (dist[n] &gt;= <span class="hljs-number">0x3f3f3f3f</span> / <span class="hljs-number">2</span>)  <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> dist[n];<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="bellman-ford"><a href="#Bellman-ford" class="headerlink" title="Bellman-ford"></a>Bellman-ford</h3><p><font color="#004a97">时间复杂度 $O(nm)$   </font></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">510</span>, M = <span class="hljs-number">10010</span>;<br><br><span class="hljs-type">int</span> n, m, k, dis[N], last[N];<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Edge</span>&#123; <span class="hljs-type">int</span> a, b, c; &#125; edges[M];   <span class="hljs-comment">// 结构体存边</span><br><br><span class="hljs-comment">// 从起点s出发到任一点n的最短距离,限制最多经过k条边</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bellman_ford</span><span class="hljs-params">(<span class="hljs-type">int</span> s)</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dis);<br><br>    dis[s] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i ++ ) &#123;<br>        <span class="hljs-built_in">memcpy</span>(last, dis, <span class="hljs-keyword">sizeof</span> dis);<span class="hljs-comment">// 备份数组</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j ++ ) &#123;<br>            <span class="hljs-keyword">auto</span> e = edges[j];<br>            dis[e.b] = <span class="hljs-built_in">min</span>(dis[e.b], last[e.a] + e.c);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 不加边数限制的最短路</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bellman_ford2</span><span class="hljs-params">(<span class="hljs-type">int</span> s)</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dis);<br>    dis[s] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) &#123;                  <span class="hljs-comment">// for (int k = 1; k &lt;= n - 1; k++)</span><br>        <span class="hljs-type">bool</span> update = <span class="hljs-literal">false</span>;    <span class="hljs-comment">// 正常情况下外循环最多进行 n - 1 次即可</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>            <span class="hljs-keyword">auto</span> t = edges[i];<br>            <span class="hljs-keyword">if</span> (dis[t.a] != <span class="hljs-number">0x3f3f3f3f</span> &amp;&amp; dis[t.b] &gt; dis[t.a] + t.c)<br>                dis[t.b] = dis[t.a] + t.c, update = <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(!update) <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// bellman_ford 判断是否存在负环</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">find_negative_loop</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dis);<br>    dis[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j++) &#123;<br>            <span class="hljs-keyword">auto</span> t = edges[j];<br>            <span class="hljs-keyword">if</span> (dis[t.b] &gt; dis[t.a] + t.c) &#123;<br>                dis[t.b] = dis[t.a] + t.c;<br>                <span class="hljs-comment">// 如果第 n 次仍然更新了，则存在负环</span><br>                <span class="hljs-keyword">if</span>(i == n)  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="spfa"><a href="#SPFA" class="headerlink" title="SPFA"></a>SPFA</h3><p><font color="#004a97">谜之时间复杂度</font></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> h[N], w[N], e[N], ne[N], idx;<br><span class="hljs-type">int</span> n, m, dist[N], cnt[N];<br><span class="hljs-type">bool</span> st[N];  <span class="hljs-comment">// 判断当前点是否在队列之中，防止队列中有重复的点</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span> </span>&#123;<br>    e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx++;<br>&#125;<br><br><span class="hljs-comment">// 队列里只存距离变小了的点</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">spfa</span><span class="hljs-params">(<span class="hljs-type">int</span> s)</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(dist, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dist);<br>    dist[s] = <span class="hljs-number">0</span>;<br><br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    q.<span class="hljs-built_in">push</span>(s); st[s] = <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>()) &#123;<br>        <span class="hljs-type">int</span> t = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br><br>        st[t] = <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[t]; ~i; i = ne[i]) &#123;<br>            <span class="hljs-type">int</span> j = e[i];<br>            <span class="hljs-keyword">if</span> (dist[j] &gt; dist[t] + w[i]) &#123;<br>                dist[j] = dist[t] + w[i];<br>                <span class="hljs-keyword">if</span> (!st[j]) &#123;<br>                    q.<span class="hljs-built_in">push</span>(j);<br>                    st[j] = <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dist[n];<br>&#125;<br><br><span class="hljs-comment">// SPFA 判断是否存在负环</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">find_negative_loop</span><span class="hljs-params">(<span class="hljs-type">int</span> s)</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0x3f</span>, <span class="hljs-built_in">sizeof</span>(dis));<br>    <span class="hljs-built_in">memset</span>(cnt, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(cnt));<br>    <span class="hljs-built_in">memset</span>(st, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(st));<br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    dis[s] = <span class="hljs-number">0</span>, st[s] = <span class="hljs-literal">true</span>;<br>    q.<span class="hljs-built_in">push</span>(s);<br><br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>())&#123;<br>        <span class="hljs-type">int</span> t = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>(); st[t] = <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[t]; i != <span class="hljs-number">-1</span>; i = ne[i])&#123;<br>            <span class="hljs-type">int</span> j = e[i];<br>            <span class="hljs-keyword">if</span> (dis[j] &gt; dis[t] + w[i])&#123;<br>                dis[j] = dis[t] + w[i];<br>                cnt[j] = cnt[t] + <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span> (cnt[j] &gt;= n) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">if</span> (!st[j])&#123;<br>                    q.<span class="hljs-built_in">push</span>(j);<br>                    st[j] = <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="floyd"><a href="#Floyd" class="headerlink" title="Floyd"></a>Floyd</h3><p><font color="#004a97">时间复杂度 $O(n^3)$   </font></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// Floyd算法是基于动态规划的原理</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">210</span>, INF = <span class="hljs-number">1e9</span>;<br><span class="hljs-type">int</span> n, m, Q;<br><span class="hljs-type">int</span> d[N][N];  <span class="hljs-comment">// d[i][j]表示从点i到点j的最短距离</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">floyd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt;= n; k++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>                d[i][j] = <span class="hljs-built_in">min</span>(d[i][j], d[i][k] + d[k][j]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;Q);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++) &#123;<br>            <span class="hljs-keyword">if</span> (i == j) d[i][j] = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">else</span>    d[i][j] = INF;<br>        &#125;<br><br>    <span class="hljs-keyword">while</span> (m--) &#123;<br>        <span class="hljs-type">int</span> a, b, c;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);<br>        d[a][b] = <span class="hljs-built_in">min</span>(d[a][b], c);<br>    &#125;<br><br>    <span class="hljs-built_in">floyd</span>();<br><br>    <span class="hljs-keyword">while</span> (Q--) &#123;<br>        <span class="hljs-type">int</span> a, b;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);<br><br>        <span class="hljs-type">int</span> t = d[a][b];<br>        <span class="hljs-keyword">if</span> (t &gt; INF / <span class="hljs-number">2</span>)    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;impossible&quot;</span>);<br>        <span class="hljs-keyword">else</span>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, t);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="传递闭包"><a href="#传递闭包" class="headerlink" title="传递闭包"></a>传递闭包</h3><p><font color="#004a97">使用Floyd解决，时间复杂度 $O(n^3)$   </font></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">350</span>;<br><span class="hljs-type">int</span> n, m, d[N][N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) d[i][i] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        <span class="hljs-type">int</span> x, y;   cin &gt;&gt; x &gt;&gt; y;<br>        d[x][y] = d[y][x] = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt;= n; k++)<br>        <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>            <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>                d[i][j] |= d[i][k] &amp; d[k][j];<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="记录路径"><a href="#记录路径" class="headerlink" title="记录路径"></a>记录路径</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 以朴素dijkstra为例，记录一个path数组，当dist数组被更新时，就同步更新path数组。</span><br><span class="hljs-type">int</span> g[maxn][maxn];<br><span class="hljs-type">int</span> st[maxn], dist[<span class="hljs-number">500010</span>];<br><span class="hljs-type">int</span> path[<span class="hljs-number">500010</span>];  <span class="hljs-comment">// 记录走来的路径</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(dist, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dist);<br>    <span class="hljs-built_in">memset</span>(path, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> path);<br><br>    dist[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-type">int</span> t = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++) &#123;<br>            <span class="hljs-keyword">if</span> (!st[j] &amp;&amp; (t == <span class="hljs-number">-1</span> || dist[j] &lt; dist[t]))<br>                t = j;<br>        &#125;<br><br>        st[t] = <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++) &#123;<br>            <span class="hljs-keyword">if</span> (dist[j] &gt; dist[t] + g[t][j]) &#123;<br>                dist[j] = dist[t] + g[t][j];<br>                path[j] = t;  <span class="hljs-comment">// 记录</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dist[n];<br>&#125;<br><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">get_path</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; p;<br>    <span class="hljs-keyword">for</span> (; x != <span class="hljs-number">-1</span>; x = path[x])<br>        p.<span class="hljs-built_in">push_back</span>(x);<br>    <span class="hljs-comment">// p中存下的是n到1的顺序，我们逆反一下顺序。</span><br>    <span class="hljs-built_in">reverse</span>(p.<span class="hljs-built_in">begin</span>(), p.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>            g[i][j] = (i == j) ? <span class="hljs-number">0</span> : INF;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        <span class="hljs-type">int</span> a, b, c;<br>        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;<br>        g[a][b] = <span class="hljs-built_in">min</span>(g[a][b], c);<br>    &#125;<br><br>    cout &lt;&lt; <span class="hljs-built_in">dijkstra</span>() &lt;&lt; endl;<br><br>    vector&lt;<span class="hljs-type">int</span>&gt; p = <span class="hljs-built_in">get_path</span>(n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it : p)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, it);<br>    cout &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="最短路计数"><a href="#最短路计数" class="headerlink" title="最短路计数"></a>最短路计数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> cnt[maxn];  <span class="hljs-comment">// 长度为i的路径的数量</span><br><br><span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>()) &#123;  <span class="hljs-comment">// 以bfs为例</span><br>    <span class="hljs-keyword">auto</span> t = q.<span class="hljs-built_in">front</span>();<br>    q.<span class="hljs-built_in">pop</span>();<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it : G[t]) &#123;<br>        <span class="hljs-keyword">if</span> (dist[it] &gt; dist[t] + <span class="hljs-number">1</span>) &#123;<br>            dist[it] = dist[t] + <span class="hljs-number">1</span>;<br>            cnt[it] = cnt[t];<br>            q.<span class="hljs-built_in">push</span>(it);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (dist[it] == dist[t] + <span class="hljs-number">1</span>)<br>            cnt[it] = (cnt[it] + cnt[t]) % mod;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><h2 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h2><h3 id="kruskal"><a href="#Kruskal" class="headerlink" title="Kruskal"></a>Kruskal</h3><p><font color="#004a97">时间复杂度 $O(mlogm)$   </font></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">200010</span>, M = <span class="hljs-number">500010</span>, INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">int</span> n, m, p[N];<br><br><span class="hljs-comment">// 结构体存边</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Edge</span> &#123; <span class="hljs-type">int</span> a, b, w; &#125; edges[M]；<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(Edge&amp; a, Edge&amp; b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> a.w &lt; b.w;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (p[x] != x)  p[x] = <span class="hljs-built_in">find</span>(p[x]);<br>    <span class="hljs-keyword">return</span> p[x];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">kruskal</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">sort</span>(edges, edges + m, cmp);<br><br>    <span class="hljs-comment">// 初始化并查集</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)    p[i] = i;<br><br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>, cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>        <span class="hljs-type">int</span> a = edges[i].a, b = edges[i].b, w = edges[i].w;<br>        a = <span class="hljs-built_in">find</span>(a), b = <span class="hljs-built_in">find</span>(b);<br><br>        <span class="hljs-keyword">if</span> (a != b) &#123;<br>            p[a] = b;   <span class="hljs-comment">// 合并集合</span><br>            res += w;   <span class="hljs-comment">// 记录总长</span><br>            cnt++;      <span class="hljs-comment">// 记录边数</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 如果加的边小于n-1, 则原图不连通, 无法构造最小生成树</span><br>    <span class="hljs-keyword">if</span> (cnt &lt; n - <span class="hljs-number">1</span>)    <span class="hljs-keyword">return</span> INF;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>        <span class="hljs-type">int</span> a, b, w;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;w);<br>        edges[i] = &#123;a, b, w&#125;;<br>    &#125;<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-built_in">kruskal</span>();<br><br>    <span class="hljs-keyword">if</span> (t == INF)   <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;impossible&quot;</span>);<br>    <span class="hljs-keyword">else</span>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, t);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="prim"><a href="#Prim" class="headerlink" title="Prim"></a>Prim</h3><p><font color="#004a97">时间复杂度 $O(n^2)$   </font></p><p>适用于稠密图，尤其完全图</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">510</span>, INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">int</span> n, m, g[N][N], dist[N];<br><span class="hljs-type">bool</span> st[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">prim</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(dist, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dist);<br>    dist[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-type">int</span> t = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>            <span class="hljs-keyword">if</span> (!st[j] &amp;&amp; (t == <span class="hljs-number">-1</span> || dist[t] &gt; dist[j]))   t = j;<br><br>        <span class="hljs-keyword">if</span> (dist[t] == INF) <span class="hljs-keyword">return</span> INF;<br><br>        res += dist[t];<br>        st[t] = <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>            dist[j] = <span class="hljs-built_in">min</span>(dist[j], g[t][j]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-built_in">memset</span>(g, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> g);<br><br>    <span class="hljs-keyword">while</span> (m--) &#123;<br>        <span class="hljs-type">int</span> a, b, c;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);<br>        g[a][b] = g[b][a] = <span class="hljs-built_in">min</span>(g[a][b], c);<br>    &#125;<br><br>    <span class="hljs-type">int</span> t = <span class="hljs-built_in">prim</span>();<br>    <span class="hljs-keyword">if</span> (t == INF)   <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;impossible&quot;</span>);<br>    <span class="hljs-keyword">else</span>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, t);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><h2 id="tarjan"><a href="#Tarjan" class="headerlink" title="Tarjan"></a>Tarjan</h2><p>有向图至少加多少条边可以变成强连通分量：</p><p>$$max(p,q)\quad \quad ——\ p,q 分别是出度为零和入度为零的点$$</p><br><p>无向图至少加多少条边可以变成边双连通分量：</p><p>$$\lfloor\frac{cnt+1}{2}\rfloor\quad \quad——\ cnt 是缩点以后叶子节点的个数$$</p><br><h3 id="有向图的强连通分量"><a href="#有向图的强连通分量" class="headerlink" title="有向图的强连通分量"></a>有向图的强连通分量</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">10010</span>, M = <span class="hljs-number">50010</span>;<br><span class="hljs-type">int</span> h[N], e[M], ne[M], idx;<br><span class="hljs-type">int</span> dfn[N], low[N], timetmp;<br><span class="hljs-type">int</span> id[N], scc_cnt, sz[N];<br><span class="hljs-type">int</span> n, m, dout[N];<br><span class="hljs-type">bool</span> st[N];<br>stack&lt;<span class="hljs-type">int</span>&gt; stk;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    e[idx] = b, ne[idx] = h[a], h[a] = idx++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">tarjan</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span> </span>&#123;<br>    dfn[u] = low[u] = ++timetmp;<br>    stk.<span class="hljs-built_in">push</span>(u), st[u] = <span class="hljs-literal">true</span>;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; ~i; i = ne[i]) &#123;<br>        <span class="hljs-type">int</span> j = e[i];<br>        <span class="hljs-keyword">if</span> (!dfn[j]) &#123;<br>            <span class="hljs-built_in">tarjan</span>(j);<br>            low[u] = <span class="hljs-built_in">min</span>(low[u], low[j]);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (st[j]) low[u] = <span class="hljs-built_in">min</span>(low[u], dfn[j]);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (dfn[u] == low[u]) &#123;<br>        ++scc_cnt;<br>        <span class="hljs-type">int</span> tmp;<br>        <span class="hljs-keyword">do</span> &#123;<br>            tmp = stk.<span class="hljs-built_in">top</span>();<br>            stk.<span class="hljs-built_in">pop</span>(), st[tmp] = <span class="hljs-literal">false</span>;<br>            id [tmp] = scc_cnt;<br>            sz[scc_cnt]++;<br>        &#125; <span class="hljs-keyword">while</span>(tmp != u);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-built_in">sizeof</span>(h));<br>    <span class="hljs-keyword">while</span> (m--) &#123;<br>        <span class="hljs-type">int</span> a, b;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);<br>        <span class="hljs-built_in">add</span>(a, b);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">if</span> (!dfn[i])    <span class="hljs-built_in">tarjan</span>(i);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = h[i]; ~j; j = ne[j]) &#123;<br>            <span class="hljs-type">int</span> k = e[j];<br>            <span class="hljs-type">int</span> a = id[i], b = id[k];<br>            <span class="hljs-keyword">if</span> (a != b) dout[a]++;<br>        &#125;<br>    <span class="hljs-type">int</span> zeros = <span class="hljs-number">0</span>, ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= scc_cnt; i++) &#123;<br>        <span class="hljs-keyword">if</span> (!dout[i])   zeros++, ans = sz[i];<br>        <span class="hljs-keyword">if</span> (zeros &gt; <span class="hljs-number">1</span>)  ans = <span class="hljs-number">0</span>, i = scc_cnt;<br>    &#125;<br><br>    cout &lt;&lt; ans &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="无向图的边双连通分量"><a href="#无向图的边双连通分量" class="headerlink" title="无向图的边双连通分量"></a>无向图的边双连通分量</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e6</span> + <span class="hljs-number">10</span>, M = N * <span class="hljs-number">2</span>, INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MOD = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-type">int</span> e[M], ne[M], h[N], w[M], idx;<br><span class="hljs-type">int</span> n, m, dfn[N], low[N];<br><span class="hljs-type">int</span> dcc_cnt, timetmp;<br>stack&lt;<span class="hljs-type">int</span>&gt; stk;<br>vector&lt;<span class="hljs-type">int</span>&gt; zz[M];<br><span class="hljs-type">bool</span> is[M];<br><br><span class="hljs-function">il <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    e[idx] = b, ne[idx] = h[a], h[a] = idx++;<br>&#125;<br><br><span class="hljs-function">il <span class="hljs-type">void</span> <span class="hljs-title">tarjan</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> fr)</span> </span>&#123;<br>    dfn[u] = low[u] = ++timetmp;<br>    stk.<span class="hljs-built_in">push</span>(u);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; ~i; i = ne[i]) &#123;<br>        <span class="hljs-type">int</span> j = e[i];<br>        <span class="hljs-keyword">if</span> (!dfn[j]) &#123;<br>            <span class="hljs-built_in">tarjan</span>(j, i);<br>            low[u] = <span class="hljs-built_in">min</span>(low[u], low[j]);<br>            <span class="hljs-keyword">if</span> (low[j] &gt; dfn[u])    is[i] = is[i ^ <span class="hljs-number">1</span>] = <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i != (fr ^ <span class="hljs-number">1</span>))     low[u] = <span class="hljs-built_in">min</span>(low[u], dfn[j]);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (dfn[u] == low[u]) &#123;<br>        ++dcc_cnt;<br>        <span class="hljs-type">int</span> tmp;<br>        <span class="hljs-keyword">do</span> &#123;<br>            tmp = stk.<span class="hljs-built_in">top</span>();    stk.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-comment">// id[tmp] = dcc_cnt;</span><br>            zz[dcc_cnt].<span class="hljs-built_in">pb</span>(tmp);<br>        &#125; <span class="hljs-keyword">while</span> (tmp != u);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-built_in">sizeof</span>(h));<br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        <span class="hljs-type">int</span> a, b;   <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld&quot;</span>, &amp;a, &amp;b);<br>        <span class="hljs-built_in">add</span>(a, b), <span class="hljs-built_in">add</span>(b, a);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">if</span> (!dfn[i])    <span class="hljs-built_in">tarjan</span>(i, i);<br>    <br>    cout &lt;&lt; dcc_cnt &lt;&lt; endl;<br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= dcc_cnt; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld &quot;</span>, zz[i].<span class="hljs-built_in">size</span>());<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : zz[i])    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld &quot;</span>, x);<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="无向图的点双连通分量"><a href="#无向图的点双连通分量" class="headerlink" title="无向图的点双连通分量"></a>无向图的点双连通分量</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e6</span> + <span class="hljs-number">10</span>, M = N * <span class="hljs-number">4</span>, INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MOD = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-type">int</span> e[M], ne[M], h[N], w[M], idx;<br><span class="hljs-type">int</span> n, m, root, dcc_cnt;<br><span class="hljs-type">int</span> dfn[N], low[N], timetmp;<br><span class="hljs-type">bool</span> cut[N];<br>vector&lt;<span class="hljs-type">int</span>&gt; zz[N];<br>stack&lt;<span class="hljs-type">int</span>&gt; stk;<br><br><span class="hljs-function">il <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    e[idx] = b, ne[idx] = h[a], h[a] = idx++;<br>&#125;<br><br><span class="hljs-function">il <span class="hljs-type">void</span> <span class="hljs-title">tarjan</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span> </span>&#123;<br>    dfn[u] = low[u] = ++timetmp;<br>    stk.<span class="hljs-built_in">push</span>(u);<br><br>    <span class="hljs-keyword">if</span> (u == root &amp;&amp; h[u] == <span class="hljs-number">-1</span>) &#123;<br>        zz[++dcc_cnt].<span class="hljs-built_in">pb</span>(u);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = h[u]; ~i; i = ne[i]) &#123;<br>        <span class="hljs-type">int</span> j = e[i];<br>        <span class="hljs-keyword">if</span> (!dfn[j]) &#123;<br>            <span class="hljs-built_in">tarjan</span>(j);<br>            low[u] = <span class="hljs-built_in">min</span>(low[u], low[j]);<br>            <span class="hljs-keyword">if</span> (dfn[u] &lt;= low[j]) &#123;<br>                cnt++;<br>                <span class="hljs-keyword">if</span> (u != root || cnt &gt; <span class="hljs-number">1</span>)   cut[u] = <span class="hljs-literal">true</span>;<br>                ++dcc_cnt;<br>                <span class="hljs-type">int</span> tmp;<br>                <span class="hljs-keyword">do</span> &#123;<br>                    tmp = stk.<span class="hljs-built_in">top</span>();    stk.<span class="hljs-built_in">pop</span>();<br>                    zz[dcc_cnt].<span class="hljs-built_in">pb</span>(tmp);<br>                &#125; <span class="hljs-keyword">while</span> (tmp != j);<br>                zz[dcc_cnt].<span class="hljs-built_in">pb</span>(u);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span>    low[u] = <span class="hljs-built_in">min</span>(low[u], dfn[j]);<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-built_in">sizeof</span>(h));<br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        <span class="hljs-type">int</span> a, b;   <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld&quot;</span>, &amp;a, &amp;b);<br>        <span class="hljs-keyword">if</span> (a == b) <span class="hljs-keyword">continue</span>;   <span class="hljs-comment">// 判自环</span><br>        <span class="hljs-built_in">add</span>(a, b), <span class="hljs-built_in">add</span>(b, a);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (root = <span class="hljs-number">1</span>; root &lt;= n; root++)<br>        <span class="hljs-keyword">if</span> (!dfn[root]) <span class="hljs-built_in">tarjan</span>(root);<br>    <br>    cout &lt;&lt; dcc_cnt &lt;&lt; endl;<br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= dcc_cnt; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld &quot;</span>, zz[i].<span class="hljs-built_in">size</span>());<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : zz[i])    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld &quot;</span>, x);<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><h2 id="lca"><a href="#LCA" class="headerlink" title="LCA"></a>LCA</h2><h3 id="倍增lca"><a href="#倍增LCA" class="headerlink" title="倍增LCA"></a>倍增LCA</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>, M = <span class="hljs-number">2e6</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxd = <span class="hljs-number">20</span>;    <span class="hljs-comment">// 估计一下就行</span><br><span class="hljs-type">int</span> ne[M], e[M], h[N], idx;<br><span class="hljs-type">int</span> n, m, p, a, b;<br><span class="hljs-type">int</span> dep[N], fa[N][maxd + <span class="hljs-number">1</span>];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    e[idx] = b, ne[idx] = h[a], h[a] = idx++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> p)</span> </span>&#123;<br>    dep[u] = dep[p] + <span class="hljs-number">1</span>;<br>    fa[u][<span class="hljs-number">0</span>] = p;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; (<span class="hljs-number">1</span> &lt;&lt; i) &lt;= n; i++)<br>        fa[u][i] = fa[fa[u][i - <span class="hljs-number">1</span>]][i - <span class="hljs-number">1</span>];<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; ~i; i = ne[i]) &#123;<br>        <span class="hljs-type">int</span> j = e[i];<br>        <span class="hljs-keyword">if</span> (!dep[j])    <span class="hljs-built_in">dfs</span>(j, u);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lca</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (dep[x] &lt; dep[y])    <span class="hljs-built_in">swap</span>(x, y);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = maxd; i &gt;= <span class="hljs-number">0</span>; i--)<br>        <span class="hljs-keyword">if</span> (dep[fa[x][i]] &gt;= dep[y])<br>            x = fa[x][i];<br><br>    <span class="hljs-keyword">if</span> (x == y) <span class="hljs-keyword">return</span> x;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = maxd; i &gt;= <span class="hljs-number">0</span>; i--)<br>        <span class="hljs-keyword">if</span> (fa[x][i] != fa[y][i])<br>            x = fa[x][i], y = fa[y][i];<br><br>    <span class="hljs-keyword">return</span> fa[x][<span class="hljs-number">0</span>];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;p);<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-built_in">sizeof</span>(h));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);<br>        <span class="hljs-built_in">add</span>(a, b), <span class="hljs-built_in">add</span>(b, a);<br>    &#125;<br>    <br>    <span class="hljs-built_in">dfs</span>(p, <span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">lca</span>(a, b));<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="欧拉序lca"><a href="#欧拉序LCA" class="headerlink" title="欧拉序LCA"></a>欧拉序LCA</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>, M = N * <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> n, m, p;<br><span class="hljs-type">int</span> e[M], ne[M], h[M], w[M], idx;<br><span class="hljs-type">int</span> lo2[N];       <span class="hljs-comment">// 预处理log2[x]</span><br><span class="hljs-type">int</span> dfn[N], cnt;  <span class="hljs-comment">// 欧拉序</span><br><span class="hljs-type">int</span> f[N][<span class="hljs-number">50</span>];     <span class="hljs-comment">// RMQ中的数组</span><br><span class="hljs-type">int</span> first[N];     <span class="hljs-comment">// 第一次出现的位置</span><br><span class="hljs-type">int</span> dep[N];       <span class="hljs-comment">// 深度</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    e[idx] = b, ne[idx] = h[a], h[a] = idx++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> fa, <span class="hljs-type">int</span> d)</span> </span>&#123;<br>    first[u] = ++cnt, dfn[cnt] = u;<br>    dep[cnt] = d;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; ~i; i = ne[i]) &#123;<br>        <span class="hljs-type">int</span> j = e[i];<br>        <span class="hljs-keyword">if</span> (j == fa)    <span class="hljs-keyword">continue</span>;<br><br>        <span class="hljs-built_in">dfs</span>(j, u, d + <span class="hljs-number">1</span>);<br>        dfn[++cnt] = u;  <span class="hljs-comment">// 回溯时也要加到序列里</span><br>        dep[cnt] = d;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; N; i++)  <span class="hljs-comment">// 预处理log2</span><br>        lo2[i] = lo2[i &gt;&gt; <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= cnt; i++)  f[i][<span class="hljs-number">0</span>] = i;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= lo2[cnt]; j++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i + (<span class="hljs-number">1</span> &lt;&lt; j) - <span class="hljs-number">1</span> &lt;= cnt; i++) &#123;<br>            <span class="hljs-type">int</span> a = f[i][j - <span class="hljs-number">1</span>];<br>            <span class="hljs-type">int</span> b = f[i + (<span class="hljs-number">1</span> &lt;&lt; (j - <span class="hljs-number">1</span>))][j - <span class="hljs-number">1</span>];<br><br>            <span class="hljs-keyword">if</span> (dep[a] &lt;= dep[b])   f[i][j] = b;<br>            <span class="hljs-keyword">else</span>    f[i][j] = b;<br>        &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;p);<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-built_in">sizeof</span>(h));<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-type">int</span> a, b;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);<br>        <span class="hljs-built_in">add</span>(a, b), <span class="hljs-built_in">add</span>(b, a);<br>    &#125;<br><br>    <span class="hljs-built_in">dfs</span>(p, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);  <span class="hljs-comment">// 欧拉序</span><br>    <span class="hljs-built_in">init</span>();        <span class="hljs-comment">//  RMQ</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;<br>        <span class="hljs-type">int</span> l, r;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;l, &amp;r);<br>        l = first[l], r = first[r];<br>        <span class="hljs-keyword">if</span> (l &gt; r)  <span class="hljs-built_in">swap</span>(l, r);<br><br>        <span class="hljs-type">int</span> p = lo2[r - l + <span class="hljs-number">1</span>] - <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> a = f[l][p], b = f[r - (l &lt;&lt; p) + <span class="hljs-number">1</span>][p];<br>        <br>        <span class="hljs-keyword">if</span> (dep[a] &lt;= dep[b])   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, dfn[a]);<br>        <span class="hljs-keyword">else</span>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, dfn[b]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><h2 id="欧拉路径和欧拉回路"><a href="#欧拉路径和欧拉回路" class="headerlink" title="欧拉路径和欧拉回路"></a>欧拉路径和欧拉回路</h2><p><strong>欧拉路径：</strong> 从图中任意一个点开始到图中任意一个点结束的路径，并且图中每条边通过且只通过一次。</p><p><strong>欧拉回路：</strong> 起点和终点相同的欧拉路</p><h3 id="对于无向图"><a href="#对于无向图" class="headerlink" title="对于无向图"></a>对于无向图</h3><p>（所有的边必须都连通）</p><ul><li><p><strong>欧拉路径</strong>：度数为奇数的点只有0或2个</p></li><li><p><strong>欧拉回路</strong>：所有的点度数都为偶数</p></li></ul><br><h3 id="对于有向图"><a href="#对于有向图" class="headerlink" title="对于有向图"></a>对于有向图</h3><p>（所有的边必须都连通）</p><ul><li><p><strong>欧拉路径</strong>：</p><ol><li>所有的点入度 &#x3D; 出度</li><li><ul><li>有一个点出度 &#x3D; 入度 + 1（起点）</li><li>有一个点入度 &#x3D; 出度 + 1（终点</li><li>其它所有的点入度 &#x3D; 出度</li></ul></li></ol></li><li><p><strong>欧拉回路</strong>：所有的点出度 &#x3D; 入度</p></li></ul><br><h2 id="二分图"><a href="#二分图" class="headerlink" title="二分图"></a>二分图</h2><h3 id="染色法判断二分图"><a href="#染色法判断二分图" class="headerlink" title="染色法判断二分图"></a>染色法判断二分图</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>, M = <span class="hljs-number">200010</span>;<br><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> h[N], e[M], ne[M], idx;  <span class="hljs-comment">// 邻接表存图</span><br><span class="hljs-type">int</span> color[N];                <span class="hljs-comment">// 1 和 2 两个颜色 </span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    e[idx] = b, ne[idx] = h[a], h[a] = idx++;<br>&#125;<br><br><span class="hljs-comment">// 如果在染色过程中发生矛盾，则不是二分图</span><br><span class="hljs-comment">// 如果完美染色，则是二分图</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> c)</span> </span>&#123;<br>    color[u] = c;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; i != <span class="hljs-number">-1</span>; i = ne[i]) &#123;<br>        <span class="hljs-type">int</span> j = e[i];<br>        <span class="hljs-keyword">if</span> (!color[j]) &#123;<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">dfs</span>(j, <span class="hljs-number">3</span> - c)) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125; <br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color[j] == c) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br><br>    <span class="hljs-keyword">while</span> (m--) &#123;<br>        <span class="hljs-type">int</span> a, b;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);<br>        <span class="hljs-built_in">add</span>(a, b), <span class="hljs-built_in">add</span>(b, a);  <span class="hljs-comment">// 双边</span><br>    &#125;<br><br>    <span class="hljs-type">bool</span> flag = <span class="hljs-literal">true</span>;<br>    <span class="hljs-comment">// 因为并不知道图是否连通，要对每个节点遍历一边</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">if</span> (!color[i]) &#123;<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">dfs</span>(i, <span class="hljs-number">1</span>)) &#123;<br>                flag = <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>    <span class="hljs-keyword">if</span> (flag)   <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Yes&quot;</span>);<br>    <span class="hljs-keyword">else</span>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="匈牙利算法"><a href="#匈牙利算法" class="headerlink" title="匈牙利算法"></a>匈牙利算法</h3><p>最小点覆盖 &#x3D; 最大匹配</p><p>最大独立集 &#x3D; n - 最大匹配</p><p>最小路径点覆盖 &#x3D; n - 最大匹配</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">510</span>, M = <span class="hljs-number">100010</span>;<br><br><span class="hljs-type">int</span> n1, n2, m;<br><span class="hljs-type">int</span> h[N], e[M], ne[M], idx;<br><span class="hljs-type">int</span> match[N];<br><span class="hljs-type">bool</span> st[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    e[idx] = b, ne[idx] = h[a], h[a] = idx++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[x]; i != <span class="hljs-number">-1</span>; i = ne[i]) &#123;<br>        <span class="hljs-type">int</span> j = e[i];<br>        <span class="hljs-keyword">if</span> (!st[j]) &#123;<br>            st[j] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (match[j] == <span class="hljs-number">0</span> || <span class="hljs-built_in">find</span>(match[j])) &#123;<br>                match[j] = x;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;n1, &amp;n2, &amp;m);<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br><br>    <span class="hljs-keyword">while</span> (m--) &#123;<br>        <span class="hljs-type">int</span> a, b;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);<br>        <span class="hljs-built_in">add</span>(a, b);<br>    &#125;<br><br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n1; i++) &#123;<br>        <span class="hljs-built_in">memset</span>(st, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> st);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">find</span>(i))    res++;<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, res);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><h2 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> e[N], ne[N], h[N], idx;<br><span class="hljs-type">int</span> n, m, d[N], top[N], cnt;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">topsort</span><span class="hljs-params">()</span> </span>&#123;<br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">if</span> (!d[i])  q.<span class="hljs-built_in">push</span>(i);<br><br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>()) &#123;<br>        <span class="hljs-type">int</span> t = q.<span class="hljs-built_in">front</span>();  q.<span class="hljs-built_in">pop</span>();<br>        top[cnt++] = t;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[t]; i != <span class="hljs-number">-1</span>; i = ne[i]) &#123;<br>            <span class="hljs-type">int</span> j = e[i];<br>            <span class="hljs-keyword">if</span> (--d[j] == <span class="hljs-number">0</span>)    q.<span class="hljs-built_in">push</span>(j);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> cnt == n;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    e[idx] = b, ne[idx] = h[a], h[a] = idx++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-built_in">sizeof</span>(h));<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>        <span class="hljs-type">int</span> a, b;   <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld&quot;</span>, &amp;a, &amp;b);<br>        d[b]++;<br>        <span class="hljs-built_in">add</span>(a, b);<br>    &#125;<br>    <span class="hljs-type">bool</span> f = <span class="hljs-built_in">topsort</span>();<br><br>    <span class="hljs-keyword">if</span> (!f) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;-1&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) cout &lt;&lt; top[i] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>    cout &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><h2 id="差分约束"><a href="#差分约束" class="headerlink" title="差分约束"></a>差分约束</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs none">A = B     &lt;=&gt; A ≥ B B ≥ A   add(b, a, 0), add(a, b, 0);<br>A &lt; B     &lt;=&gt; B ≥ A + 1     add(a, b, 1);<br>A ≥ B     &lt;=&gt; A ≥ B         add(b, a, 0);<br>A &gt; B     &lt;=&gt; A ≥ B + 1     add(b, a, 1);<br>B ≥ A     &lt;=&gt; B ≥ A         add(a, b, 0);<br></code></pre></td></tr></table></figure><p>$x &gt;&#x3D; 1$ 时，建立虚拟源点$x_0$  $(dist[x_0] &#x3D; 0)$</p><p>即$x &gt;&#x3D; x_0 + 1$   $add(x_0, x, 1);$</p><br><h2 id="网络流"><a href="#网络流" class="headerlink" title="网络流"></a>网络流</h2><h3 id="最大流"><a href="#最大流" class="headerlink" title="最大流"></a>最大流</h3><h4 id="edmonds-karp"><a href="#Edmonds-Karp" class="headerlink" title="Edmonds-Karp"></a>Edmonds-Karp</h4><p><font color="#004a97">最坏情况下，算法的时间复杂度是 $O(nm^2)$</font></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1000</span> + <span class="hljs-number">10</span>, M = <span class="hljs-number">20010</span>, INF = <span class="hljs-number">1e18</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MOD = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-type">int</span> e[M], ne[M], h[N], w[M], idx;<br><span class="hljs-type">int</span> n, m, S, T, zz[N][N], d[N], pre[N];<br><span class="hljs-type">bool</span> st[N];<br><br><span class="hljs-function">il <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span> </span>&#123;<br>    e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx++;<br>    e[idx] = a, w[idx] = <span class="hljs-number">0</span>, ne[idx] = h[b], h[b] = idx++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(st, <span class="hljs-literal">false</span>, <span class="hljs-built_in">sizeof</span>(st));<br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    q.<span class="hljs-built_in">push</span>(S), st[S] = <span class="hljs-literal">true</span>, d[S] = INF;<br>    <br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>()) &#123;<br>        <span class="hljs-type">int</span> t = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[t]; ~i; i = ne[i]) &#123;<br>            <span class="hljs-type">int</span> j = e[i];<br>            <span class="hljs-keyword">if</span> (st[j] || !w[i]) <span class="hljs-keyword">continue</span>;<br>            st[j] = <span class="hljs-literal">true</span>;<br>            d[j] = <span class="hljs-built_in">min</span>(d[t], w[i]);<br>            pre[j] = i;<span class="hljs-comment">// 这里记录的实际是前驱边</span><br>            <span class="hljs-keyword">if</span> (j == T) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            q.<span class="hljs-built_in">push</span>(j);<br>        &#125; <br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function">il <span class="hljs-type">int</span> <span class="hljs-title">EK</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">bfs</span>()) &#123;<br>        ans += d[T];<span class="hljs-comment">// 这里就是我们存图的技巧</span><br>        <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = T; i != S; i = e[pre[i] ^ <span class="hljs-number">1</span>])<br>            w[pre[i]] -= d[T], w[pre[i] ^ <span class="hljs-number">1</span>] += d[T];<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-built_in">sizeof</span>(h));<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld%lld%lld&quot;</span>, &amp;n, &amp;m, &amp;S, &amp;T);<br><br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        <span class="hljs-type">int</span> a, b, c;    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld%lld&quot;</span>, &amp;a, &amp;b, &amp;c);<br>        zz[a][b] += c;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>            <span class="hljs-keyword">if</span> (zz[i][j])   <span class="hljs-built_in">add</span>(i, j, zz[i][j]);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, <span class="hljs-built_in">EK</span>());<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><h4 id="dinic"><a href="#Dinic" class="headerlink" title="Dinic"></a>Dinic</h4><p><font color="#004a97">最坏情况下，算法的时间复杂度是 $O(mn^2)$</font></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">10010</span> + <span class="hljs-number">10</span>, M = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>, INF = <span class="hljs-number">1e18</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MOD = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-type">int</span> e[M], ne[M], h[N], w[M], idx;<br><span class="hljs-type">int</span> n, m, S, T, cur[N], d[N];<br><br><span class="hljs-function">il <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span> </span>&#123;<br>    e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx++;<br>    e[idx] = a, w[idx] = <span class="hljs-number">0</span>, ne[idx] = h[b], h[b] = idx++;<br>&#125;<br><br><span class="hljs-function">il <span class="hljs-type">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(d, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> d);<br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    q.<span class="hljs-built_in">push</span>(S), d[S] = <span class="hljs-number">0</span>, cur[S] = h[S];<br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>()) &#123;<br>        <span class="hljs-type">int</span> t = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[t]; ~i; i = ne[i]) &#123;<br>            <span class="hljs-type">int</span> j = e[i];<br>            <span class="hljs-keyword">if</span> (d[j] == <span class="hljs-number">-1</span> &amp;&amp; w[i]) &#123;<br>                d[j] = d[t] + <span class="hljs-number">1</span>;<br>                cur[j] = h[j];<br>                <span class="hljs-keyword">if</span> (j == T)<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                q.<span class="hljs-built_in">push</span>(j);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> limit)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (u == T)<span class="hljs-keyword">return</span> limit;<br>    <br>    <span class="hljs-type">int</span> flow = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = cur[u]; ~i &amp;&amp; flow &lt; limit; i = ne[i]) &#123;<br>        cur[u] = i;  <span class="hljs-comment">// 当前弧优化</span><br>        <span class="hljs-type">int</span> ver = e[i];<br>        <span class="hljs-keyword">if</span> (d[ver] == d[u] + <span class="hljs-number">1</span> &amp;&amp; w[i]) &#123;<br>            <span class="hljs-type">int</span> t = <span class="hljs-built_in">find</span>(ver, <span class="hljs-built_in">min</span>(w[i], limit - flow));<br>            <span class="hljs-keyword">if</span> (!t)d[ver] = <span class="hljs-number">-1</span>;<br>            w[i] -= t, w[i ^ <span class="hljs-number">1</span>] += t, flow += t;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> flow;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dinic</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> r = <span class="hljs-number">0</span>, flow;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">bfs</span>()) &#123;<br>        <span class="hljs-keyword">while</span> (flow = <span class="hljs-built_in">find</span>(S, INF))<br>            r += flow;<br>    &#125;<br>    <span class="hljs-keyword">return</span> r;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld%lld%lld&quot;</span>, &amp;n, &amp;m, &amp;S, &amp;T);<br>    <span class="hljs-keyword">while</span> (m--) &#123;<br>        <span class="hljs-type">int</span> a, b, c;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld%lld&quot;</span>, &amp;a, &amp;b, &amp;c);<br>        <span class="hljs-built_in">add</span>(a, b, c);<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, <span class="hljs-built_in">dinic</span>());<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br>]]></content>
      
      
      <categories>
          
          <category> ACM-Template </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Template-Data_structure</title>
      <link href="/post/24e496bb.html"/>
      <url>/post/24e496bb.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><img src="https://gitee.com/Greedy_firtree/picture/raw/master/blog/image-20221208191918315.png" alt="image-20221208191918315"></p><p><font size="5" color="#004a97"><strong>数据结构</strong></font></p><br><h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 递归回溯的过程中实现了路径压缩优化</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (p[x] != x)  p[x] = <span class="hljs-built_in">find</span>(p[x]);<br>    <span class="hljs-keyword">return</span> p[x];<br>&#125;<br></code></pre></td></tr></table></figure><br><h2 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h2><p><font color="#004a97">时间复杂度 $O(n)$   </font></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++">stack&lt;<span class="hljs-type">int</span>&gt; s;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>    <span class="hljs-keyword">while</span> (!s.<span class="hljs-built_in">empty</span>() &amp;&amp; <span class="hljs-built_in">check</span>(s.<span class="hljs-built_in">top</span>(), i))s.<span class="hljs-built_in">pop</span>();<br>    s.<span class="hljs-built_in">push</span>(i);<br>&#125;<br></code></pre></td></tr></table></figure><br><h2 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h2><p><font color="#004a97">时间复杂度 $O(n)$   </font></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> a[N];<br>deque&lt;<span class="hljs-type">int</span>&gt; q;  <span class="hljs-comment">// q存放编号</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n, k;<br>    cin &gt;&gt; n &gt;&gt; k;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        cin &gt;&gt; a[i];<br><br>    q.<span class="hljs-built_in">clear</span>();<br>    <span class="hljs-comment">// 单调递增 求最小值</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>() &amp;&amp; a[q.<span class="hljs-built_in">back</span>()] &gt;= a[i])   q.<span class="hljs-built_in">pop_back</span>();<br>        q.<span class="hljs-built_in">push_back</span>(i);<br>        <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>() &amp;&amp; i - k &gt;= q.<span class="hljs-built_in">front</span>())    q.<span class="hljs-built_in">pop_front</span>();<br>        <span class="hljs-keyword">if</span> (i &gt;= k) cout &lt;&lt; a[q.<span class="hljs-built_in">front</span>()] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    cout &lt;&lt; endl;<br>    <br>    q.<span class="hljs-built_in">clear</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>() &amp;&amp; a[q.<span class="hljs-built_in">back</span>()] &lt;= a[i])   q.<span class="hljs-built_in">pop_back</span>();<br>        q.<span class="hljs-built_in">push_back</span>(i);<br>        <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>() &amp;&amp; i - k &gt;= q.<span class="hljs-built_in">front</span>())    q.<span class="hljs-built_in">pop_front</span>();<br>        <span class="hljs-keyword">if</span> (i &gt;= k) cout &lt;&lt; a[q.<span class="hljs-built_in">front</span>()] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    cout &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><span class="hljs-comment">// 二维单调队列</span><br><span class="hljs-type">int</span> n, m, a, b, res;<br><span class="hljs-type">int</span> g[N * N], mp[N][N], ans[N][N];<br>deque&lt;<span class="hljs-type">int</span>&gt; q;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; a &gt;&gt; b;<br>    <span class="hljs-type">int</span> x, y, z;<br>    cin &gt;&gt; g[<span class="hljs-number">0</span>] &gt;&gt; x &gt;&gt; y &gt;&gt; z;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; N * N; i++) <br>        g[i] = (g[i - <span class="hljs-number">1</span>] * x + y) % z;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)<br>            mp[i][j] = g[(i - <span class="hljs-number">1</span>) * m + j - <span class="hljs-number">1</span>];<br>    <br>    <span class="hljs-comment">// 先处理行</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        q.<span class="hljs-built_in">clear</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++) &#123;<br>            <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>() &amp;&amp; j - b &gt;= q.<span class="hljs-built_in">front</span>()) <br>                q.<span class="hljs-built_in">pop_front</span>();<br>            <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>() &amp;&amp; mp[i][q.<span class="hljs-built_in">back</span>()] &gt;= mp[i][j]) <br>                q.<span class="hljs-built_in">pop_back</span>();<br>            q.<span class="hljs-built_in">push_back</span>(j);<br>            ans[i][j] = mp[i][q.<span class="hljs-built_in">front</span>()];<br>        &#125; <br>    &#125;<br><br>    <span class="hljs-comment">// 再处理列</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++) &#123;<br>        q.<span class="hljs-built_in">clear</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>() &amp;&amp; i - a &gt;= q.<span class="hljs-built_in">front</span>()) <br>                q.<span class="hljs-built_in">pop_front</span>();<br>            <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>() &amp;&amp; ans[q.<span class="hljs-built_in">back</span>()][j] &gt;= ans[i][j]) <br>                q.<span class="hljs-built_in">pop_back</span>();<br>            q.<span class="hljs-built_in">push_back</span>(i);<br>            <span class="hljs-keyword">if</span> (i &gt;= a &amp;&amp; j &gt;= b)   res += ans[q.<span class="hljs-built_in">front</span>()][j];<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; res &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><br><h2 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h2><h3 id="单点修改区间查询"><a href="#单点修改，区间查询" class="headerlink" title="单点修改，区间查询"></a>单点修改，区间查询</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; i; i -= <span class="hljs-built_in">lowbit</span>(i))  ans += tr[i];<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; i &lt;= n; i += <span class="hljs-built_in">lowbit</span>(i))<br>        tr[i] += y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">range</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<span class="hljs-comment">// 区间查询 (l ~ r)</span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>(r) - <span class="hljs-built_in">sum</span>(l - <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="区间修改单点查询"><a href="#区间修改，单点查询" class="headerlink" title="区间修改，单点查询"></a>区间修改，单点查询</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 可以用树状数组维护 原数组的差分数组</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n, m, a[N], c[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; i; i -= <span class="hljs-built_in">lowbit</span>(i))  ans += c[i];<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; i &lt;= n; i += <span class="hljs-built_in">lowbit</span>(i)) c[i] += y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br><br>    <span class="hljs-comment">//树状数组维护差分数组</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">add</span>(i, a[i] - a[i - <span class="hljs-number">1</span>]);<br><br>    <span class="hljs-keyword">while</span> (m--) &#123;<br>        <span class="hljs-type">char</span> op[<span class="hljs-number">2</span>];<br>        <span class="hljs-type">int</span> l, r, d;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s%d&quot;</span>, op, &amp;l);<br>        <span class="hljs-keyword">if</span> (op[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;C&#x27;</span>) &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;r, &amp;d);<br>            <span class="hljs-built_in">add</span>(l, d), <span class="hljs-built_in">add</span>(r + <span class="hljs-number">1</span>, -d);<br>        &#125;<br>        <span class="hljs-keyword">else</span>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%intd\n&quot;</span>, <span class="hljs-built_in">sum</span>(l));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="区间修改区间查询"><a href="#区间修改，区间查询" class="headerlink" title="区间修改，区间查询"></a>区间修改，区间查询</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 构造两个树状数组 tr1  tr2</span><br><span class="hljs-comment">// a. tr1 维护原数组的差分数组</span><br><span class="hljs-comment">// b. tr2 维护原数组 下标乘差分</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n, m, a[N];<br><span class="hljs-type">int</span> tr1[N], tr2[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> tr[], <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; i &lt;= n; i += <span class="hljs-built_in">lowbit</span>(i)) tr[i] += y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> tr[], <span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; i; i -= <span class="hljs-built_in">lowbit</span>(i))  ans += tr[i];<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">presum</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>(tr1, x) * (x + <span class="hljs-number">1</span>) - <span class="hljs-built_in">sum</span>(tr2, x);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-type">int</span> t = a[i] - a[i - <span class="hljs-number">1</span>];<br>        <span class="hljs-built_in">add</span>(tr1, i, t);<br>        <span class="hljs-built_in">add</span>(tr2, i, (<span class="hljs-type">int</span>)i * t);<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (m--) &#123;<br>        <span class="hljs-type">char</span> op[<span class="hljs-number">2</span>];<br>        <span class="hljs-type">int</span> l, r, d;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s%d%d&quot;</span>, op, &amp;l, &amp;r);<br>        <span class="hljs-keyword">if</span> (op[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;Q&#x27;</span>)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%intd\n&quot;</span>, <span class="hljs-built_in">presum</span>(r) - <span class="hljs-built_in">presum</span>(l - <span class="hljs-number">1</span>));<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;d);<br>            <span class="hljs-built_in">add</span>(tr1, l, d), <span class="hljs-built_in">add</span>(tr1, r + <span class="hljs-number">1</span>, -d);<br>            <span class="hljs-built_in">add</span>(tr2, l, l * d), <span class="hljs-built_in">add</span>(tr2, r + <span class="hljs-number">1</span>, (r + <span class="hljs-number">1</span>) * -d);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><h2 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h2><h3 id="单点修改"><a href="#单点修改" class="headerlink" title="单点修改"></a>单点修改</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n, m, p, last;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span> &#123;<br>    <span class="hljs-type">int</span> dat, l, r;<br>&#125; tr[N * <span class="hljs-number">4</span>];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    tr[x].dat = <span class="hljs-built_in">max</span>(tr[x &lt;&lt; <span class="hljs-number">1</span>].dat, tr[x &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].dat);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>    tr[p].l = l, tr[p].r = r;<br>    <span class="hljs-keyword">if</span> (l == r)<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, mid);<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (l &lt;= tr[p].l &amp;&amp; tr[p].r &lt;= r)<br>        <span class="hljs-keyword">return</span> tr[p].dat;<br>    <span class="hljs-type">int</span> mid = tr[p].l + tr[p].r &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">-0x3f3f3f3f</span>;<br>    <span class="hljs-keyword">if</span> (l &lt;= mid)<br>        res = <span class="hljs-built_in">max</span>(res, <span class="hljs-built_in">query</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, r));<br>    <span class="hljs-keyword">if</span> (r &gt; mid)<br>        res = <span class="hljs-built_in">max</span>(res, <span class="hljs-built_in">query</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r));<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> v)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (tr[p].l == x &amp;&amp; tr[p].r == x) &#123;<br>        tr[p].dat = v;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = tr[p].l + tr[p].r &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (x &lt;= mid)<br>        <span class="hljs-built_in">modify</span>(p &lt;&lt; <span class="hljs-number">1</span>, x, v);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">modify</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, x, v);<br>    <span class="hljs-built_in">pushup</span>(p);<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="区间修改"><a href="#区间修改" class="headerlink" title="区间修改"></a>区间修改</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n, m, w[N];<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span> &#123;<br>    <span class="hljs-type">int</span> l, r;<br>    <span class="hljs-type">int</span> sum;<br>    <span class="hljs-type">int</span> add;<br>&#125; tr[N * <span class="hljs-number">4</span>];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span> </span>&#123;<br>    tr[p].sum = tr[p &lt;&lt; <span class="hljs-number">1</span>].sum + tr[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].sum;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(node &amp;c, node &amp;a, node &amp;b)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (c.add) &#123;<br>        a.add += c.add;<br>        a.sum += (a.r - a.l + <span class="hljs-number">1</span>) * c.add;<br>        b.add += c.add;<br>        b.sum += (b.r - b.l + <span class="hljs-number">1</span>) * c.add;<br>        c.add = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span> </span>&#123;<br>    <span class="hljs-built_in">pushdown</span>(tr[p], tr[p &lt;&lt; <span class="hljs-number">1</span>], tr[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>    tr[p].l = l, tr[p].r = r;<br>    <span class="hljs-keyword">if</span> (l == r) &#123;<br>        tr[p] = &#123;l, r, w[l], <span class="hljs-number">0</span>&#125;;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, mid);<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r);<br>    <span class="hljs-built_in">pushup</span>(p);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> v)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (tr[p].l &gt;= l &amp;&amp; tr[p].r &lt;= r) &#123;<br>        tr[p].sum += (tr[p].r - tr[p].l + <span class="hljs-number">1</span>) * v;<br>        tr[p].add += v;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-built_in">pushdown</span>(p);<br>    <span class="hljs-type">int</span> mid = tr[p].l + tr[p].r &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (l &lt;= mid)<br>        <span class="hljs-built_in">modify</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, r, v);<br>    <span class="hljs-keyword">if</span> (r &gt; mid)<br>        <span class="hljs-built_in">modify</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r, v);<br>    <span class="hljs-built_in">pushup</span>(p);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (tr[p].l &gt;= l &amp;&amp; tr[p].r &lt;= r)<br>        <span class="hljs-keyword">return</span> tr[p].sum;<br>    <br>    <span class="hljs-built_in">pushdown</span>(p);<br>    <span class="hljs-type">int</span> mid = tr[p].l + tr[p].r &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">if</span> (l &lt;= mid)<br>        sum += <span class="hljs-built_in">query</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, r);<br>    <span class="hljs-keyword">if</span> (r &gt; mid)<br>        sum += <span class="hljs-built_in">query</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r);<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="权值线段树"><a href="#权值线段树" class="headerlink" title="权值线段树"></a>权值线段树</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>, M = <span class="hljs-number">110</span>, INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MOD = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-comment">// int e[M], ne[M], h[M], w[M], idx;</span><br><span class="hljs-type">int</span> n, m, op[N], a[N];<br>vector&lt;<span class="hljs-type">int</span>&gt; v;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span> &#123;<br>    <span class="hljs-type">int</span> l, r, sum;<br>&#125; tr[N * <span class="hljs-number">4</span>];<br><br><span class="hljs-function">il <span class="hljs-type">int</span> <span class="hljs-title">getid</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">lower_bound</span>(<span class="hljs-built_in">all</span>(v), x) - v.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>    tr[p] = &#123;l, r, <span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">if</span> (l == r) <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">build</span>(lson, l, mid);<br>    <span class="hljs-built_in">build</span>(rson, mid + <span class="hljs-number">1</span>, r);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> v)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (tr[p].l == tr[p].r) &#123;<br>        tr[p].sum += v;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = (tr[p].l + tr[p].r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (x &lt;= mid)    <span class="hljs-built_in">modify</span>(lson, x, v);<br>    <span class="hljs-keyword">else</span>    <span class="hljs-built_in">modify</span>(rson, x, v);<br><br>    tr[p].sum = tr[lson].sum + tr[rson].sum;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (l &gt; r)  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (l &lt;= tr[p].l &amp;&amp; r &gt;= tr[p].r)   <span class="hljs-keyword">return</span> tr[p].sum;<br><br>    <span class="hljs-type">int</span> mid = (tr[p].l + tr[p].r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (r &lt;= mid)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(lson, l, r);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(l &gt; mid)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(rson, l, r);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(lson, l, mid) + <span class="hljs-built_in">query</span>(rson, mid + <span class="hljs-number">1</span>, r);<br>&#125;<br><br><span class="hljs-comment">// 查找第k小</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">kth</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (tr[p].l == tr[p].r) <span class="hljs-keyword">return</span> tr[p].l;<br><br>    <span class="hljs-type">int</span> mid = (tr[p].l + tr[p].r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (tr[lson].sum &gt;= k)  <span class="hljs-keyword">return</span> <span class="hljs-built_in">kth</span>(lson, k);<br>    <span class="hljs-keyword">else</span>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">kth</span>(rson, k - tr[lson].sum);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld&quot;</span>, &amp;op[i], &amp;a[i]);<br>        <span class="hljs-keyword">if</span> (op[i] != <span class="hljs-number">4</span>) v.<span class="hljs-built_in">pb</span>(a[i]);<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(<span class="hljs-built_in">all</span>(v));<br>    v.<span class="hljs-built_in">erase</span>(<span class="hljs-built_in">unique</span>(<span class="hljs-built_in">all</span>(v)), v.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-type">int</span> tot = v.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, tot);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (op[i] == <span class="hljs-number">1</span>)         <span class="hljs-comment">// 插入</span><br>            <span class="hljs-built_in">modify</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">getid</span>(a[i]), <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op[i] == <span class="hljs-number">2</span>)    <span class="hljs-comment">// 删除 </span><br>            <span class="hljs-built_in">modify</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">getid</span>(a[i]), <span class="hljs-number">-1</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op[i] == <span class="hljs-number">3</span>) &#123;  <span class="hljs-comment">// x的排名</span><br>            <span class="hljs-type">int</span> ans = <span class="hljs-built_in">query</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-built_in">getid</span>(a[i]) - <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op[i] == <span class="hljs-number">4</span>) &#123;  <span class="hljs-comment">// 排名为x的数</span><br>            <span class="hljs-type">int</span> idx = <span class="hljs-built_in">kth</span>(<span class="hljs-number">1</span>, a[i]) - <span class="hljs-number">1</span>;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, v[idx]);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op[i] == <span class="hljs-number">5</span>) &#123;  <span class="hljs-comment">// 前驱</span><br>            <span class="hljs-type">int</span> t = <span class="hljs-built_in">query</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-built_in">getid</span>(a[i]) - <span class="hljs-number">1</span>);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, v[<span class="hljs-built_in">kth</span>(<span class="hljs-number">1</span>, t) - <span class="hljs-number">1</span>]);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;                  <span class="hljs-comment">// 后继</span><br>            <span class="hljs-type">int</span> t = <span class="hljs-built_in">query</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-built_in">getid</span>(a[i]));<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, v[<span class="hljs-built_in">kth</span>(<span class="hljs-number">1</span>, t + <span class="hljs-number">1</span>) - <span class="hljs-number">1</span>]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> tt = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// cin &gt;&gt; tt;</span><br>    <span class="hljs-comment">// init();</span><br>    <span class="hljs-keyword">while</span> (tt--)<br>        <span class="hljs-built_in">solve</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">一、查询第K小的数：</span><br><span class="hljs-comment">这个可以利用权值线段树存储的是数出现的次数</span><br><span class="hljs-comment">维护区间内数字出现的次数</span><br><span class="hljs-comment">查询左右子树数字出现的次数</span><br><span class="hljs-comment">    如果左儿子数字出现次数和是小于K，代表这个第K小在右子树</span><br><span class="hljs-comment">    但是它在右子树的排名是K减去左子树儿子的个数</span><br><span class="hljs-comment">这样不断往下进行查找，当查找到单点的时候，就是第K小。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">二、查询x数的排名：</span><br><span class="hljs-comment">可以利用权值线段树存储的数字个数的信息</span><br><span class="hljs-comment">查询[1,x-1]区间内部数字出现的个数+1</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">三、求x的前驱：</span><br><span class="hljs-comment">我们可以求在[1,x-1]区间内部数字出现的次数记为k</span><br><span class="hljs-comment">那么第k大其实就是前面最靠近x的数，也就是前驱</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">四、求x的后继:</span><br><span class="hljs-comment">我们可以求在[1,x]区间内部数字出现的的次数为k</span><br><span class="hljs-comment">那么第k+1大其实就是后面最靠近x的数，也就是后继。</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><br><h2 id="主席树"><a href="#主席树" class="headerlink" title="主席树"></a>主席树</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n, m, a[N],cnt, root[N];<br>vector&lt;<span class="hljs-type">int</span>&gt; v;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span> &#123;<br>    <span class="hljs-type">int</span> l, r, sum;<br>&#125; tr[N * <span class="hljs-number">40</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getid</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-built_in">lower_bound</span>(<span class="hljs-built_in">all</span>(v), x) - v.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">1</span>; <br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> pre, <span class="hljs-type">int</span> &amp;now, <span class="hljs-type">int</span> pos)</span> </span>&#123;<br>    tr[++cnt] = tr[pre];<br>    now = cnt;<br>    tr[now].sum++;<br>    <span class="hljs-keyword">if</span> (l == r) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (pos &lt;= mid)  <span class="hljs-built_in">insert</span>(l, mid, tr[pre].l, tr[now].l, pos);<br>    <span class="hljs-keyword">else</span>    <span class="hljs-built_in">insert</span>(mid + <span class="hljs-number">1</span>, r, tr[pre].r, tr[now].r, pos);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> st, <span class="hljs-type">int</span> ed, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (l == r) <span class="hljs-keyword">return</span> l;<br>    <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> tmp = tr[tr[ed].l].sum - tr[tr[st].l].sum;<br>    <span class="hljs-keyword">if</span> (k &lt;= tmp)   <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(l, mid, tr[st].l, tr[ed].l, k);<br>    <span class="hljs-keyword">else</span>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(mid + <span class="hljs-number">1</span>, r, tr[st].r, tr[ed].r, k - tmp);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;a[i]);<br>        v.<span class="hljs-built_in">pb</span>(a[i]);<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(<span class="hljs-built_in">all</span>(v));<br>    v.<span class="hljs-built_in">erase</span>(<span class="hljs-built_in">unique</span>(<span class="hljs-built_in">all</span>(v)), v.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">insert</span>(<span class="hljs-number">1</span>, n, root[i - <span class="hljs-number">1</span>], root[i], <span class="hljs-built_in">getid</span>(a[i]));<br>    <span class="hljs-keyword">while</span> (m--) &#123;<br>        <span class="hljs-type">int</span> x, y, k;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld%lld&quot;</span>, &amp;x, &amp;y, &amp;k);<br>        <span class="hljs-type">int</span> idx = <span class="hljs-built_in">query</span>(<span class="hljs-number">1</span>, n, root[x - <span class="hljs-number">1</span>], root[y], k);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, v[idx - <span class="hljs-number">1</span>]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><h2 id="st表"><a href="#ST表" class="headerlink" title="ST表"></a>ST表</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n, m, x, f[N][<span class="hljs-number">100</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);<br>        f[i][<span class="hljs-number">0</span>] = x;<br>    &#125; <br><br>    <span class="hljs-type">int</span> tmp = (<span class="hljs-type">int</span>)(<span class="hljs-built_in">log</span>(n) / <span class="hljs-built_in">log</span>(<span class="hljs-number">2</span>));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= tmp; j++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i + (<span class="hljs-number">1</span> &lt;&lt; j) - <span class="hljs-number">1</span> &lt;= n; i++)<br>            f[i][j] = <span class="hljs-built_in">max</span>(f[i][j - <span class="hljs-number">1</span>], f[i + (<span class="hljs-number">1</span> &lt;&lt; (j - <span class="hljs-number">1</span>))][j - <span class="hljs-number">1</span>]);<br>    <br>    <span class="hljs-keyword">while</span> (m--) &#123;<br>        <span class="hljs-type">int</span> l, r;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;l, &amp;r);<br>        <span class="hljs-type">int</span> p = (<span class="hljs-type">int</span>)(<span class="hljs-built_in">log</span>(r - l + <span class="hljs-number">1</span>) / <span class="hljs-built_in">log</span>(<span class="hljs-number">2</span>));<br>        <span class="hljs-type">int</span> ans = <span class="hljs-built_in">max</span>(f[l][p], f[r - (<span class="hljs-number">1</span> &lt;&lt; p) + <span class="hljs-number">1</span>][p]);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><h2 id="树剖"><a href="#树剖" class="headerlink" title="树剖"></a>树剖</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>, M = N * <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> e[M], ne[M], h[M], idx;<br><span class="hljs-type">int</span> n, m, rt, mod, v[M];<br><span class="hljs-comment">//父节点， 深度， 大小， 重儿子</span><br><span class="hljs-type">int</span> fa[N], dep[N], sz[N], son[N];<br><span class="hljs-comment">// 时间戳计数， 时间戳， 重链头， 权值</span><br><span class="hljs-type">int</span> tim, dfn[N], top[N], w[N];<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span> &#123;<br>    <span class="hljs-type">int</span> l, r;<br>    <span class="hljs-type">int</span> sum;<br>    <span class="hljs-type">int</span> add;<br>&#125; tr[N * <span class="hljs-number">4</span>];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span> </span>&#123;<br>    tr[p].sum = (tr[p &lt;&lt; <span class="hljs-number">1</span>].sum + tr[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].sum) % mod;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(node &amp;c, node &amp;a, node &amp;b)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (c.add) &#123;<br>        a.add += c.add;<br>        a.sum += (a.r - a.l + <span class="hljs-number">1</span>) * c.add % mod;<br>        b.add += c.add;<br>        b.sum += (b.r - b.l + <span class="hljs-number">1</span>) * c.add % mod;<br>        c.add = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span> </span>&#123;<br>    <span class="hljs-built_in">pushdown</span>(tr[p], tr[p &lt;&lt; <span class="hljs-number">1</span>], tr[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>    tr[p].l = l, tr[p].r = r;<br>    <span class="hljs-keyword">if</span> (l == r) &#123;<br>        tr[p] = &#123;l, r, w[l] % mod, <span class="hljs-number">0</span>&#125;;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, mid);<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r);<br>    <span class="hljs-built_in">pushup</span>(p);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> v)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (tr[p].l &gt;= l &amp;&amp; tr[p].r &lt;= r) &#123;<br>        tr[p].add += v;<br>        tr[p].sum += (tr[p].r - tr[p].l + <span class="hljs-number">1</span>) * v ;<br>        tr[p].sum %= mod;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-built_in">pushdown</span>(p);<br>    <span class="hljs-type">int</span> mid = tr[p].l + tr[p].r &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (l &lt;= mid)<br>        <span class="hljs-built_in">modify</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, r, v);<br>    <span class="hljs-keyword">if</span> (r &gt; mid)<br>        <span class="hljs-built_in">modify</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r, v);<br>    <span class="hljs-built_in">pushup</span>(p);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (tr[p].l &gt;= l &amp;&amp; tr[p].r &lt;= r)<br>        <span class="hljs-keyword">return</span> tr[p].sum % mod;<br>    <br>    <span class="hljs-built_in">pushdown</span>(p);<br>    <span class="hljs-type">int</span> mid = tr[p].l + tr[p].r &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">if</span> (l &lt;= mid)<br>        sum += <span class="hljs-built_in">query</span>(p &lt;&lt; <span class="hljs-number">1</span>, l, r);<br>    <span class="hljs-keyword">if</span> (r &gt; mid)<br>        sum += <span class="hljs-built_in">query</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r);<br>    <span class="hljs-keyword">return</span> sum % mod;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs1</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> pa)</span> </span>&#123;<br>    fa[u] = pa, dep[u] = dep[pa] + <span class="hljs-number">1</span>;<br>    sz[u] = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> mxsz = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; ~i; i = ne[i]) &#123;<br>        <span class="hljs-type">int</span> j = e[i];<br>        <span class="hljs-keyword">if</span> (j == pa)    <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">dfs1</span>(j, u);<br>        sz[u] += sz[j];<br>        <span class="hljs-keyword">if</span> (sz[j] &gt; mxsz)   mxsz = sz[j], son[u] = j;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs2</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> t)</span> </span>&#123;<br>    dfn[u] = ++tim, top[u] = t;<br>    w[tim] = v[u];<br>    <span class="hljs-keyword">if</span> (!son[u])    <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 没有重儿子</span><br>    <span class="hljs-built_in">dfs2</span>(son[u], t);        <span class="hljs-comment">// 头结点不变</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; ~i; i = ne[i]) &#123;<br>        <span class="hljs-type">int</span> j = e[i];<br>        <span class="hljs-keyword">if</span> (j == fa[u] || j == son[u])  <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">dfs2</span>(j, j);         <span class="hljs-comment">// 再从轻儿子开始</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 将x到y最短路径上的结点加z</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify_chain</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> z)</span> </span>&#123;<br>    z %= mod;<br>    <span class="hljs-keyword">while</span> (top[x] != top[y]) &#123;<br>        <span class="hljs-keyword">if</span> (dep[top[x]] &lt; dep[top[y]])  <span class="hljs-built_in">swap</span>(x, y);<br>        <span class="hljs-built_in">modify</span>(<span class="hljs-number">1</span>, dfn[top[x]], dfn[x], z);<br>        x = fa[top[x]];<br>    &#125;<br>    <span class="hljs-keyword">if</span> (dep[x] &gt; dep[y])    <span class="hljs-built_in">swap</span>(x, y);<br>    <span class="hljs-built_in">modify</span>(<span class="hljs-number">1</span>, dfn[x], dfn[y], z);<br>&#125;<br><br><span class="hljs-comment">// 求x到y最短路径上的结点之和</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query_chain</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (top[x] != top[y]) &#123;<br>        <span class="hljs-keyword">if</span> (dep[top[x]] &lt; dep[top[y]])  <span class="hljs-built_in">swap</span>(x, y);<br>        res += <span class="hljs-built_in">query</span>(<span class="hljs-number">1</span>, dfn[top[x]], dfn[x]);<br>        x = fa[top[x]];<br>    &#125;<br>    <span class="hljs-keyword">if</span> (dep[x] &gt; dep[y])    <span class="hljs-built_in">swap</span>(x, y);<br>    res += <span class="hljs-built_in">query</span>(<span class="hljs-number">1</span>, dfn[x], dfn[y]);<br><br>    <span class="hljs-keyword">return</span> res % mod;<br>&#125;<br><br><span class="hljs-comment">// 以x为根节点的子树结点都加上z</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify_son</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> z)</span> </span>&#123;<br>    <span class="hljs-built_in">modify</span>(<span class="hljs-number">1</span>, dfn[x], dfn[x] + sz[x] - <span class="hljs-number">1</span>, z);<br>&#125;<br><br><span class="hljs-comment">// 求以x为根节点的子树节点数值之和</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query_son</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(<span class="hljs-number">1</span>, dfn[x], dfn[x] + sz[x] - <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    e[idx] = b, ne[idx] = h[a], h[a] = idx++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-built_in">sizeof</span>(h));<br><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;rt, &amp;mod);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)    cin &gt;&gt; v[i];<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-type">int</span> ta, tb;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;ta, &amp;tb);<br>        <span class="hljs-built_in">add</span>(ta, tb), <span class="hljs-built_in">add</span>(tb, ta);<br>    &#125;<br><br>    <span class="hljs-built_in">dfs1</span>(rt, rt);<br>    <span class="hljs-built_in">dfs2</span>(rt, rt);<br>    <span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);<br><br>    <span class="hljs-keyword">while</span> (m--) &#123;<br>        <span class="hljs-type">int</span> op;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;op);<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-type">int</span> x, y, z;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;z);<br>            <span class="hljs-built_in">modify_chain</span>(x, y, z);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-type">int</span> x, y;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">query_chain</span>(x, y)); <br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-number">3</span>) &#123;<br>            <span class="hljs-type">int</span> x, z;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;x, &amp;z);<br>            <span class="hljs-built_in">modify_son</span>(x, z);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">int</span> x;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">query_son</span>(x));<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><h2 id="莫队"><a href="#莫队" class="headerlink" title="莫队"></a>莫队</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5e4</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n, m, k, a[N], pos[N], cnt[N];<br><span class="hljs-type">int</span> res, ans[N];<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span> &#123;<br>    <span class="hljs-type">int</span> l, r, id;<br>&#125; q[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(node a, node b)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (pos[a.l] == pos[b.l])   <span class="hljs-keyword">return</span> a.r &lt; b.r;<br>    <span class="hljs-keyword">return</span> pos[a.l] &lt; pos[b.l];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">Add</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    cnt[a[x]]++;<br>    res += cnt[a[x]] * cnt[a[x]] - (cnt[a[x]] - <span class="hljs-number">1</span>) * (cnt[a[x]] - <span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">Sub</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    cnt[a[x]]--;<br>    res -= (cnt[a[x]] + <span class="hljs-number">1</span>) * (cnt[a[x]] + <span class="hljs-number">1</span>) - cnt[a[x]] * cnt[a[x]];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;<br>    <span class="hljs-type">int</span> ksz = <span class="hljs-built_in">sqrt</span>(n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;a[i]);<br>        pos[i] = i / ksz;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld&quot;</span>, &amp;q[i].l, &amp;q[i].r);<br>        q[i].id = i;<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(q + <span class="hljs-number">1</span>, q + <span class="hljs-number">1</span> + m, cmp);<br><br>    <span class="hljs-type">int</span> l = <span class="hljs-number">1</span>, r = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        <span class="hljs-keyword">while</span> (q[i].l &lt; l)  <span class="hljs-built_in">Add</span>(--l);<br>        <span class="hljs-keyword">while</span> (q[i].r &gt; r)  <span class="hljs-built_in">Add</span>(++r);<br><br>        <span class="hljs-keyword">while</span> (q[i].l &gt; l)  <span class="hljs-built_in">Sub</span>(l++);<br>        <span class="hljs-keyword">while</span> (q[i].r &lt; r)  <span class="hljs-built_in">Sub</span>(r--);<br><br>        ans[q[i].id] = res;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>        cout &lt;&lt; ans[i] &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><h2 id="点分治"><a href="#点分治" class="headerlink" title="点分治"></a>点分治</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e4</span> + <span class="hljs-number">10</span>, M = N * <span class="hljs-number">2</span>, INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MOD = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-type">int</span> e[M], ne[M], h[M], w[M], idx;<br><span class="hljs-type">int</span> n, m, rt, sum, cnt;<br><span class="hljs-type">int</span> tmp[N], sz[N], mxsz[N], q[<span class="hljs-number">200</span>], dis[N];<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MX = <span class="hljs-number">1e7</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">bool</span> judge[MX], ans[<span class="hljs-number">200</span>], st[N]; <br><br><span class="hljs-function">il <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span> </span>&#123;<br>    e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx++;<br>&#125;<br><br><span class="hljs-comment">// 找树的重心</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs1</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> fa)</span> </span>&#123;<br>    sz[u] = <span class="hljs-number">1</span>, mxsz[u] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = h[u]; ~i; i = ne[i]) &#123;<br>        <span class="hljs-type">int</span> j = e[i];<br>        <span class="hljs-keyword">if</span> (st[j] || j == fa)   <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">dfs1</span>(j, u);<br>        sz[u] += sz[j];<br>        mxsz[u] = <span class="hljs-built_in">max</span>(mxsz[u], sz[j]);<br>    &#125;<br>    mxsz[u] = <span class="hljs-built_in">max</span>(mxsz[u], sum - sz[u]);<br>    <span class="hljs-keyword">if</span> (mxsz[u] &lt; mxsz[rt]) rt = u;<br><br>&#125;<br><br><span class="hljs-comment">// 处理每个点到根节点的距离</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs2</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> fa)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (dis[u] &lt;= MX)   tmp[cnt++] = dis[u];<br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = h[u]; ~i; i = ne[i]) &#123;<br>        <span class="hljs-type">int</span> j = e[i];<br>        <span class="hljs-keyword">if</span> (j == fa || st[j])   <span class="hljs-keyword">continue</span>;<br>        dis[j] = dis[u] + w[i];<br>        <span class="hljs-built_in">dfs2</span>(j, u);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span> </span>&#123;<br>    queue&lt;<span class="hljs-type">int</span>&gt; que;<br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = h[u]; ~i; i = ne[i]) &#123;<br>        <span class="hljs-type">int</span> j = e[i];<br>        <span class="hljs-keyword">if</span> (st[j])  <span class="hljs-keyword">continue</span>;<br>        cnt = <span class="hljs-number">0</span>, dis[j] = w[i];<br>        <span class="hljs-built_in">dfs2</span>(j, u);<br>        <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>; x &lt; cnt; x++)    <span class="hljs-comment">// 遍历距离</span><br>            <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> y = <span class="hljs-number">0</span>; y &lt; m; y++)  <span class="hljs-comment">// 遍历询问</span><br>                <span class="hljs-keyword">if</span> (q[y] &gt;= tmp[x]) <br>                    ans[y] |= judge[q[y] - tmp[x]];<br>        <br>        <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; cnt; k++) &#123;<br>            que.<span class="hljs-built_in">push</span>(tmp[k]);<br>            judge[tmp[k]] = <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 优化清空</span><br>    <span class="hljs-keyword">while</span> (!que.<span class="hljs-built_in">empty</span>()) &#123;<br>        judge[que.<span class="hljs-built_in">front</span>()] = <span class="hljs-literal">false</span>;<br>        que.<span class="hljs-built_in">pop</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 分治</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">divide</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span> </span>&#123;<br>    st[u] = judge[<span class="hljs-number">0</span>] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-built_in">test</span>(u);<br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = h[u]; ~i; i = ne[i]) &#123;<br>        <span class="hljs-type">int</span> j = e[i];<br>        <span class="hljs-keyword">if</span> (st[j])  <span class="hljs-keyword">continue</span>;<br>        rt = <span class="hljs-number">0</span>, mxsz[rt] = sum = sz[j];<br>        <span class="hljs-built_in">dfs1</span>(j, <span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">dfs1</span>(rt, <span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">divide</span>(rt);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-built_in">sizeof</span>(h));<br>    <span class="hljs-type">int</span> a, b, c;<br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld%lld&quot;</span>, &amp;a, &amp;b, &amp;c);<br>        <span class="hljs-built_in">add</span>(a, b, c), <span class="hljs-built_in">add</span>(b, a, c);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;q[i]);<br>    mxsz[<span class="hljs-number">0</span>] = sum = n;<br>    <span class="hljs-built_in">dfs1</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);     <span class="hljs-comment">// 找根</span><br>    <span class="hljs-built_in">dfs1</span>(rt, <span class="hljs-number">0</span>);    <span class="hljs-comment">// 确定根以后 更新size</span><br>    <span class="hljs-built_in">divide</span>(rt);<br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>        <span class="hljs-keyword">if</span> (ans[i]) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;AYE&quot;</span>);<br>        <span class="hljs-keyword">else</span>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;NAY&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><h2 id="二维数点"><a href="#二维数点" class="headerlink" title="二维数点"></a>二维数点</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> n, m, cnt, c[<span class="hljs-number">10000010</span>], ans[N];<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span> &#123;<br>    <span class="hljs-type">int</span> x, y, id, op;<br>&#125; qs[N &lt;&lt; <span class="hljs-number">2</span>];<br><span class="hljs-function">il <span class="hljs-type">bool</span> <span class="hljs-title">cmp1</span><span class="hljs-params">(node a, node b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> a.x &lt; b.x;<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">point</span> &#123;<br>    <span class="hljs-type">int</span> x, y;<br>&#125; zz[N];<br><span class="hljs-function">il <span class="hljs-type">bool</span> <span class="hljs-title">cmp2</span><span class="hljs-params">(point a, point b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> a.x &lt; b.x;<br>&#125;<br><br><span class="hljs-function">il <span class="hljs-type">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; i; i -= <span class="hljs-built_in">lowbit</span>(i))  ans += c[i];<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function">il <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; i &lt;= n; i += <span class="hljs-built_in">lowbit</span>(i)) c[i] += y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-type">int</span> x, y;   <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld&quot;</span>, &amp;x, &amp;y);<br>        zz[i] = &#123;x + <span class="hljs-number">1</span>, y + <span class="hljs-number">1</span>&#125;;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        <span class="hljs-type">int</span> x1, y1, x2, y2;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld%lld%lld&quot;</span>, &amp;x1, &amp;y1, &amp;x2, &amp;y2);<br>        x1++, y1++, x2++, y2++;<br>        qs[++cnt] = &#123;x2, y2, i, <span class="hljs-number">1</span>&#125;;<br>        qs[++cnt] = &#123;x1 - <span class="hljs-number">1</span>, y2, i, <span class="hljs-number">-1</span>&#125;;<br>        qs[++cnt] = &#123;x2, y1 - <span class="hljs-number">1</span>, i, <span class="hljs-number">-1</span>&#125;;<br>        qs[++cnt] = &#123;x1 - <span class="hljs-number">1</span>, y1 - <span class="hljs-number">1</span>, i, <span class="hljs-number">1</span>&#125;;<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(zz + <span class="hljs-number">1</span>, zz + n + <span class="hljs-number">1</span>, cmp2);<br>    <span class="hljs-built_in">sort</span>(qs + <span class="hljs-number">1</span>, qs + cnt + <span class="hljs-number">1</span>, cmp1);<br><br>    <span class="hljs-type">int</span> now = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= cnt; i++) &#123;<br>        <span class="hljs-keyword">while</span> (now &lt;= n &amp;&amp; zz[now].x &lt;= qs[i].x) &#123;<br>            <span class="hljs-built_in">add</span>(zz[now].y, <span class="hljs-number">1</span>);<br>            now++;<br>        &#125;<br>        ans[qs[i].id] += qs[i].op * <span class="hljs-built_in">sum</span>(qs[i].y);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans[i]);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br>]]></content>
      
      
      <categories>
          
          <category> ACM-Template </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Template-String</title>
      <link href="/post/61c841f1.html"/>
      <url>/post/61c841f1.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><img src="https://gitee.com/Greedy_firtree/picture/raw/master/blog/image-20221208200822351.png" alt="image-20221208200822351"></p><p><font size="5" color="#004a97"><strong>字符串</strong></font></p><br><h2 id="kmp"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> n, m, nx[N];<br>string s, t;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; s &gt;&gt; t;<br>    n = s.<span class="hljs-built_in">size</span>(), m = t.<span class="hljs-built_in">size</span>();<br>    s = <span class="hljs-string">&quot; &quot;</span> + s, t = <span class="hljs-string">&quot; &quot;</span> + t;<br><br>    nx[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= m; i++) &#123;<br>        nx[i] = nx[i - <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">while</span> (nx[i] &amp;&amp; t[i] != t[nx[i] + <span class="hljs-number">1</span>])   <br>            nx[i] = nx[nx[i]];<br>        nx[i] += (t[i] == t[nx[i] + <span class="hljs-number">1</span>]);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, j = <span class="hljs-number">1</span>; i &lt;= n;) &#123;<br>        <span class="hljs-keyword">while</span> (j != <span class="hljs-number">1</span> &amp;&amp; s[i] != t[j])<br>            j = nx[j - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (s[i] == t[j])   i++, j++;<br>        <span class="hljs-keyword">else</span>    i++;<br>        <br>        <span class="hljs-keyword">if</span> (j == m + <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, i - m);<br>            j = nx[m] + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld &quot;</span>, nx[i]);<br>    <br>    cout &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">KMP</span> &#123;<br>    <span class="hljs-type">int</span> nxt[maxn];<br>    <span class="hljs-type">int</span> len;<br>    <span class="hljs-type">char</span> t[maxn];<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span> </span>&#123; len = nxt[<span class="hljs-number">0</span>] = nxt[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>; &#125;<br>    <span class="hljs-comment">/* 1-bas */</span><br>    <span class="hljs-comment">/* 注意在ss结尾添加‘\0’ */</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-type">char</span>* ss)</span> </span>&#123;<br>        len = <span class="hljs-built_in">strlen</span>(ss + <span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">memcpy</span>(t, ss, (len + <span class="hljs-number">2</span>) * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">char</span>));<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= len; i++) &#123;<br>            nxt[i] = nxt[i - <span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">while</span> (nxt[i] &amp;&amp; ss[i] != ss[nxt[i] + <span class="hljs-number">1</span>])<br>                nxt[i] = nxt[nxt[i]];<br>            nxt[i] += (ss[i] == ss[nxt[i] + <span class="hljs-number">1</span>]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/* 求所有在ss串中的start_pos. 如果first_only设置为true，则只返回第一个位置*/</span><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">match</span><span class="hljs-params">(<span class="hljs-type">char</span>* ss, <span class="hljs-type">bool</span> first_only = <span class="hljs-literal">false</span>)</span> </span>&#123;<br>        <span class="hljs-type">int</span> len_s = <span class="hljs-built_in">strlen</span>(ss + <span class="hljs-number">1</span>);<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">start_pos</span><span class="hljs-params">(<span class="hljs-number">0</span>)</span></span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, j = <span class="hljs-number">1</span>; i &lt;= len_s;) &#123;<br>            <span class="hljs-keyword">while</span> (j != <span class="hljs-number">1</span> &amp;&amp; ss[i] != t[j])<br>                j = nxt[j - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (ss[i] == t[j])  j++, i++;<br>            <span class="hljs-keyword">else</span>    i++;<br>            <span class="hljs-keyword">if</span> (j == len + <span class="hljs-number">1</span>) &#123;<br>                start_pos.<span class="hljs-built_in">push_back</span>(i - j + <span class="hljs-number">1</span>);<br>                <span class="hljs-keyword">if</span> (first_only) <span class="hljs-keyword">return</span> start_pos;<br>                j = nxt[len] + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> start_pos;<br>    &#125;<br><br>    <span class="hljs-comment">/* 循环周期 形如 acaca 中 ac 是一个合法周期 */</span><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">periodic</span><span class="hljs-params">()</span> </span>&#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt; ret;<br>        <span class="hljs-type">int</span> now = len;<br>        <span class="hljs-keyword">while</span> (now) &#123;<br>            now = nxt[now];<br>            ret.<span class="hljs-built_in">push_back</span>(len - now);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>    <span class="hljs-comment">/* 循环节 形如 acac 中ac、acac是循环节，aca不是*/</span><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">periodic_loop</span><span class="hljs-params">()</span> </span>&#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt; ret;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x : <span class="hljs-built_in">periodic</span>()) &#123;<br>            <span class="hljs-keyword">if</span> (len % x == <span class="hljs-number">0</span>)   ret.<span class="hljs-built_in">push_back</span>(x);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">min_periodic_loop</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">periodic_loop</span>()[<span class="hljs-number">0</span>]; &#125;<br>&#125; kmper;<br><br></code></pre></td></tr></table></figure><br><h2 id="失配树"><a href="#失配树" class="headerlink" title="失配树"></a>失配树</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 两个前缀的公共border其实就是在失配树上求lca</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e6</span> + <span class="hljs-number">10</span>, M = N * <span class="hljs-number">2</span>, maxd = <span class="hljs-number">30</span>;<br><span class="hljs-type">int</span> e[M], ne[M], h[N], w[M], idx;<br><span class="hljs-type">int</span> n, m, nx[N], dep[N], fa[N][maxd + <span class="hljs-number">1</span>];<br>string s;<br><br><span class="hljs-function">il <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    e[idx] = b, ne[idx] = h[a], h[a] = idx++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> p)</span> </span>&#123;<br>    dep[u] = dep[p] + <span class="hljs-number">1</span>;<br>    fa[u][<span class="hljs-number">0</span>] = p;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; (<span class="hljs-number">1</span> &lt;&lt; i) &lt;= n; i++)<br>        fa[u][i] = fa[fa[u][i - <span class="hljs-number">1</span>]][i - <span class="hljs-number">1</span>];<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[u]; ~i; i = ne[i]) &#123;<br>        <span class="hljs-type">int</span> j = e[i];<br>        <span class="hljs-keyword">if</span> (!dep[j])    <span class="hljs-built_in">dfs</span>(j, u);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lca</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (dep[x] &lt; dep[y])    <span class="hljs-built_in">swap</span>(x, y);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = maxd; i &gt;= <span class="hljs-number">0</span>; i--)<br>        <span class="hljs-keyword">if</span> (dep[fa[x][i]] &gt;= dep[y])<br>            x = fa[x][i];<br><br>    <span class="hljs-keyword">if</span> (x == y) <span class="hljs-keyword">return</span> x;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = maxd; i &gt;= <span class="hljs-number">0</span>; i--)<br>        <span class="hljs-keyword">if</span> (fa[x][i] != fa[y][i])<br>            x = fa[x][i], y = fa[y][i];<br><br>    <span class="hljs-keyword">return</span> fa[x][<span class="hljs-number">0</span>];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; s &gt;&gt; m;<br>    n = s.<span class="hljs-built_in">size</span>();   s = <span class="hljs-string">&quot; &quot;</span> + s;<br><br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++) &#123;<br>        nx[i] = nx[i - <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">while</span> (nx[i] &amp;&amp; s[i] != s[nx[i] + <span class="hljs-number">1</span>])   nx[i] = nx[nx[i]];<br>        nx[i] += (s[i] == s[nx[i] + <span class="hljs-number">1</span>]);<br>    &#125;<br><br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-built_in">sizeof</span>(h));<br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-type">int</span> j = nx[i], u = i;<br>        <span class="hljs-built_in">add</span>(u, j), <span class="hljs-built_in">add</span>(j, u);<br>    &#125;<br><br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>, n + <span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        <span class="hljs-type">int</span> p, q;   <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld&quot;</span>, &amp;p, &amp;q);<br>        <span class="hljs-type">int</span> ans = <span class="hljs-built_in">lca</span>(p, q);<br><br>        <span class="hljs-comment">// 这里处理一下特判就行</span><br>        <span class="hljs-keyword">if</span> (ans == p || ans == q)   ans = nx[ans];<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><h2 id="manacher"><a href="#Manacher" class="headerlink" title="Manacher"></a>Manacher</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Manacher</span> &#123;<br>    <span class="hljs-type">int</span> lc[MAX];<br>    <span class="hljs-type">char</span> ch[MAX];<br>    <span class="hljs-type">int</span> N;<br>    <span class="hljs-built_in">Manacher</span>(<span class="hljs-type">char</span>* s) &#123;<br>        <span class="hljs-built_in">init</span>(s);<br>        <span class="hljs-built_in">manacher</span>();<br>    &#125;<br>    <span class="hljs-comment">/* s 1 bas */</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-type">char</span>* s)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = <span class="hljs-built_in">strlen</span>(s + <span class="hljs-number">1</span>);<br>        ch[n * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;#&#x27;</span>;<br>        ch[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;@&#x27;</span>;<br>        ch[n * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n; i &gt;= <span class="hljs-number">1</span>; i--) &#123;<br>            ch[i * <span class="hljs-number">2</span>] = s[i];<br>            ch[i * <span class="hljs-number">2</span> - <span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;#&#x27;</span>;<br>        &#125;<br>        N = <span class="hljs-number">2</span> * n + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">manacher</span><span class="hljs-params">()</span> </span>&#123;<br>        lc[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> k = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= N; i++) &#123;<br>            <span class="hljs-type">int</span> p = k + lc[k] - <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (i &lt;= p) &#123;<br>                lc[i] = <span class="hljs-built_in">min</span>(lc[<span class="hljs-number">2</span> * k - i], p - i + <span class="hljs-number">1</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                lc[i] = <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">while</span> (ch[i + lc[i]] == ch[i - lc[i]])<br>                lc[i]++;<br>            <span class="hljs-keyword">if</span> (i + lc[i] &gt; k + lc[k])<br>                k = i;<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><br><h2 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h2><p><img src="https://gitee.com/Greedy_firtree/picture/raw/master/blog/image-20221209203619250.png" alt="image-20221209203619250"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">305</span> * <span class="hljs-number">305</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> HASH_CNT = <span class="hljs-number">2</span>; <span class="hljs-comment">/* hash次数 */</span><br>ULL Seed_Pool[] = &#123;<span class="hljs-number">911</span>, <span class="hljs-number">146527</span>, <span class="hljs-number">19260817</span>, <span class="hljs-number">91815541</span>&#125;;<br>ULL Mod_Pool[] = &#123;<span class="hljs-number">29123</span>, <span class="hljs-number">998244353</span>, <span class="hljs-number">1000000009</span>, <span class="hljs-number">4294967291ull</span>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Hash</span> &#123;<br>    ULL seed, mod;<br>    ULL base[maxn], sum[maxn];<br>    <span class="hljs-comment">// 构造哈希,从1~n,如果没有输入字符串的长度，需要手动把n设为sz(a)-1</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-type">int</span> seedindex, <span class="hljs-type">int</span> modindex, string a)</span> </span>&#123;<br>        seed = Seed_Pool[seedindex], mod = Mod_Pool[modindex];<br>        base[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            base[i] = base[i - <span class="hljs-number">1</span>] * seed % mod;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            sum[i] = (sum[i - <span class="hljs-number">1</span>] * seed % mod + a[i - <span class="hljs-number">1</span>]) % mod;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 这个不会单独用，是为了给外面的函数得到哈希值用的</span><br>    <span class="hljs-function">ULL <span class="hljs-title">gethash</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (sum[r] - sum[l - <span class="hljs-number">1</span>] * base[r - l + <span class="hljs-number">1</span>] % mod + mod) % mod;<br>    &#125;<br>&#125; hasher[HASH_CNT];<br><span class="hljs-comment">// 得到字符串(l~r)的哈希值(双哈希)</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> pair&lt;ULL, ULL&gt; <span class="hljs-title">hashrange</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">make_pair</span>(hasher[<span class="hljs-number">0</span>].<span class="hljs-built_in">gethash</span>(l, r), hasher[<span class="hljs-number">1</span>].<span class="hljs-built_in">gethash</span>(l, r));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    string a;<br>    cin &gt;&gt; a;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; HASH_CNT; i++) &#123;<br>        hasher[i].<span class="hljs-built_in">init</span>(i, i, a);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        <span class="hljs-type">int</span> l1, r1, l2, r2;<br>        cin &gt;&gt; l1 &gt;&gt; r1 &gt;&gt; l2 &gt;&gt; r2;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">hashrange</span>(l1, r1) == <span class="hljs-built_in">hashrange</span>(l2, r2))<br>            cout &lt;&lt; <span class="hljs-string">&quot;Yes&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">else</span><br>            cout &lt;&lt; <span class="hljs-string">&quot;No&quot;</span> &lt;&lt; endl;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><h2 id="字典树"><a href="#字典树" class="headerlink" title="字典树"></a>字典树</h2><h3 id="trie"><a href="#Trie" class="headerlink" title="Trie"></a>Trie</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n, m, son[N][<span class="hljs-number">26</span>], cnt[N], nowtmp;<br><br><span class="hljs-function">il <span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(string s)</span> </span>&#123;<br>    <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i : s) &#123;<br>        <span class="hljs-type">int</span> c = i - <span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-keyword">if</span> (!son[p][c]) son[p][c] = ++nowtmp;<br>        p = son[p][c];<br>    &#125;<br>    cnt[p]++;<br>&#125;<br><br><span class="hljs-function">il <span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(string s)</span> </span>&#123;<br>    <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i : s) &#123;<br>        <span class="hljs-type">int</span> c = i - <span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-keyword">if</span> (!son[p][c]) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        p = son[p][c];<br>    &#125;<br>    <span class="hljs-keyword">return</span> cnt[p];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-type">char</span> op[<span class="hljs-number">2</span>]; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, op);<br>        string s;   cin &gt;&gt; s;<br>        <span class="hljs-keyword">if</span> (op[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;I&#x27;</span>)   <span class="hljs-built_in">insert</span>(s);<br>        <span class="hljs-keyword">else</span>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, <span class="hljs-built_in">query</span>(s)); <br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="01trie"><a href="#01Trie" class="headerlink" title="01Trie"></a>01Trie</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 区间异或值最大</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5e6</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n, m, a[N], pre[N];<br><span class="hljs-type">int</span> nowtmp, son[N][<span class="hljs-number">2</span>], tag[N];<br><br><span class="hljs-function">il <span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> id)</span> </span>&#123;<br>    <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">20</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        <span class="hljs-type">int</span> c = (x &gt;&gt; i) &amp; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (!son[p][c]) son[p][c] = ++nowtmp;<br>        p = son[p][c];<br>    &#125;<br>    tag[p] = id;<br>&#125;<br><br><span class="hljs-function">il PII <span class="hljs-title">search</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>, res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">20</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        <span class="hljs-type">int</span> c = (x &gt;&gt; i) &amp; <span class="hljs-number">1</span>, o = c ^ <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (son[p][o])  p = son[p][o], res |= (<span class="hljs-number">1</span> &lt;&lt; i);<br>        <span class="hljs-keyword">else</span>    p = son[p][c];<br>        <span class="hljs-comment">// 这样更新也是可以的</span><br>        <span class="hljs-comment">// if (son[p][o])  p = son[p][o], res = res &lt;&lt; 1 | 1;</span><br>        <span class="hljs-comment">// else    p = son[p][c], res &lt;&lt;= 1;</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> &#123;res, tag[p]&#125;;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;a[i]);<br>        pre[i] = pre[i - <span class="hljs-number">1</span>] ^ a[i];<br>    &#125;<br>    <span class="hljs-built_in">insert</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">-1</span>, l, r;<br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        PII tmp = <span class="hljs-built_in">search</span>(pre[i]);<br>        <span class="hljs-keyword">if</span> (ans &lt; tmp.first)<br>            ans = tmp.first, l = tmp.second, r = i;<br>        <span class="hljs-built_in">insert</span>(pre[i], i + <span class="hljs-number">1</span>);<br>    &#125;<br>    cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; l &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; r &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="可持久01trie"><a href="#可持久01Trie" class="headerlink" title="可持久01Trie"></a>可持久01Trie</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">6e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> root[N], son[N * <span class="hljs-number">30</span>][<span class="hljs-number">2</span>], cnt[N * <span class="hljs-number">30</span>], nowtmp;<br><br><span class="hljs-function">il <span class="hljs-type">int</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> pre)</span> </span>&#123;<br>    <span class="hljs-type">int</span> u = ++nowtmp, t = u;<br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">30</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        <span class="hljs-type">int</span> tmp = ((x &gt;&gt; i) &amp; <span class="hljs-number">1</span>);<br>        son[u][<span class="hljs-number">0</span>] = son[pre][<span class="hljs-number">0</span>], son[u][<span class="hljs-number">1</span>] = son[pre][<span class="hljs-number">1</span>];<br>        cnt[u] = cnt[pre] + <span class="hljs-number">1</span>;<br>        son[u][tmp] = ++nowtmp;<br>        u = son[u][tmp], pre = son[pre][tmp];<br>    &#125;<br>    cnt[u] = cnt[pre] + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> t;<br>&#125;<br><br><span class="hljs-function">il <span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">30</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        <span class="hljs-type">int</span> tmp = !((x &gt;&gt; i) &amp; <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span> (cnt[son[r][tmp]] - cnt[son[l][tmp]] &gt; <span class="hljs-number">0</span>) &#123;<br>            res |= (<span class="hljs-number">1ll</span> &lt;&lt; i);<br>            l = son[l][tmp], r = son[r][tmp];<br>        &#125;<br>        <span class="hljs-keyword">else</span>    l = son[l][!tmp], r = son[r][!tmp];<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-type">int</span> now = <span class="hljs-number">0</span>;<br>    n++;<br>    root[<span class="hljs-number">1</span>] = <span class="hljs-built_in">insert</span>(now, root[<span class="hljs-number">0</span>]);<br><br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-type">int</span> x;  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;x);<br>        now ^= x;<br>        root[i] = <span class="hljs-built_in">insert</span>(now, root[i - <span class="hljs-number">1</span>]);<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (m--) &#123;<br>        <span class="hljs-type">char</span> op[<span class="hljs-number">2</span>];<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, op);<br>        <span class="hljs-keyword">if</span> (op[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;A&#x27;</span>) &#123;<br>            <span class="hljs-type">int</span> x;  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;x);<br>            now ^= x;<br>            n++;<br>            root[n] = <span class="hljs-built_in">insert</span>(now, root[n - <span class="hljs-number">1</span>]);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">int</span> l, r, x;    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld%lld&quot;</span>, &amp;l, &amp;r, &amp;x);<br>            <span class="hljs-type">int</span> tmp = now ^ x;<br>            <span class="hljs-type">int</span> ans = <span class="hljs-built_in">query</span>(tmp, root[l - <span class="hljs-number">1</span>], root[r]);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><h2 id="ac自动机"><a href="#AC自动机" class="headerlink" title="AC自动机"></a>AC自动机</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>, M = N;<br><span class="hljs-type">int</span> e[M], ne[M], h[N], w[M], idx;<br><span class="hljs-type">int</span> n, m, fail[N], son[N][<span class="hljs-number">26</span>], nowtmp;<br><span class="hljs-type">int</span> ed[N], sum[N];<br><br><span class="hljs-function">il <span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    e[idx] = b, ne[idx] = h[a], h[a] = idx++;<br>&#125;<br><br><span class="hljs-function">il <span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(string s, <span class="hljs-type">int</span> idx)</span> </span>&#123;<br><span class="hljs-type">int</span> len = s.<span class="hljs-built_in">size</span>(), p = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br><span class="hljs-type">int</span> c = s[i] - <span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-keyword">if</span> (!son[p][c]) &#123;<br>son[p][c] = ++ nowtmp;<br>&#125;<br>p = son[p][c];<br>&#125;<br>ed[idx] = p;<br>&#125;<br><br><span class="hljs-function">il <span class="hljs-type">void</span> <span class="hljs-title">get_fail</span><span class="hljs-params">()</span> </span>&#123;<br>queue&lt;<span class="hljs-type">int</span>&gt; q;<br><br><span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++) &#123;<br><span class="hljs-keyword">if</span> (son[<span class="hljs-number">0</span>][i]) &#123;<br>fail[son[<span class="hljs-number">0</span>][i]]= <span class="hljs-number">0</span>;<br>q.<span class="hljs-built_in">push</span>(son[<span class="hljs-number">0</span>][i]);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>()) &#123;<br><span class="hljs-type">int</span> u = q.<span class="hljs-built_in">front</span>();<br>q.<span class="hljs-built_in">pop</span>();<br><br><span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++) &#123;<br><span class="hljs-keyword">if</span> (son[u][i]) &#123;<br>fail[son[u][i]] = son[fail[u]][i];<br>q.<span class="hljs-built_in">push</span>(son[u][i]);<br>&#125;<br><span class="hljs-keyword">else</span>son[u][i] = son[fail[u]][i];<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function">il <span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = h[u]; ~i; i = ne[i]) &#123;<br>        <span class="hljs-built_in">dfs</span>(e[i]);<br>        sum[u] += sum[e[i]];<br>    &#125;<br>&#125;<br><br><span class="hljs-function">il <span class="hljs-type">void</span> <span class="hljs-title">acam</span><span class="hljs-params">(string s)</span> </span>&#123;<br><span class="hljs-type">int</span> len = s.<span class="hljs-built_in">size</span>(), p = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>p = son[p][s[i] - <span class="hljs-string">&#x27;a&#x27;</span>];<br>++sum[p];<br>&#125;<br><br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-built_in">sizeof</span>(h));<br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= nowtmp; i++)<br>        <span class="hljs-built_in">add</span>(fail[i], i);<br>    <br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n;<br><br>    string s;<br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        cin &gt;&gt; s;<br>        <span class="hljs-built_in">insert</span>(s, i);<br>    &#125;<br><br>    <span class="hljs-built_in">get_fail</span>();<br>    cin &gt;&gt; s;<br>    <span class="hljs-built_in">acam</span>(s);<br><br>    <span class="hljs-keyword">for</span> (re <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, sum[ed[i]]);<br><br><span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM-Template </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
